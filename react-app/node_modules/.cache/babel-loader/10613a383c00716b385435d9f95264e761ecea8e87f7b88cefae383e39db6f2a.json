{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\n// import questions from \"./questions\";\nimport { isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength, isValidEmailFormat, toTitle } from './validate';\nimport { response } from 'express';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [voiceInput, setVoiceInput] = useState('');\n  const inputRef = useRef(null);\n  const [userInputs, setUserInputs] = useState([]);\n  const [inputs, setInputs] = useState([]);\n  const [lastQuestionValue, setLastQuestionValue] = useState('');\n  // const [questions, setQuestions] = useState([]);\n  let questions = [];\n  let currentQuestion = {};\n  const location = useLocation();\n  let selectedFormId = null;\n\n  // Function to fetch questions from the server\n  const getQuestions = async () => {\n    try {\n      const response = await axios.get(`http://localhost:3001/getQuestions/${selectedFormId}`).then(response => {});\n      // console.log(response)\n      // setQuestions(response.data);\n      questions = response.data;\n      // console.log(questions);\n      //   const currentQuestion = questions[currentQuestionIndex];\n      // setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\n      // readOutText(currentQuestion.text); \n      // After receiving the questions, you can set the initial question and start the conversation.\n      // Here, I assume that the questions received are an array.\n      // setMessages([ { text: questions[0].text, isUser: false } ]);\n    } catch (error) {\n      console.error('Failed to fetch questions:', error);\n    }\n  };\n  useEffect(() => {\n    console.log('use');\n    console.log(questions);\n    currentQuestion = questions[currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n    readOutText(currentQuestion.text);\n  }, [questions]);\n  if (location !== null) {\n    selectedFormId = location.state.selectedFormId;\n    if (selectedFormId) {\n      getQuestions();\n      // console.log(questions)\n    }\n  }\n\n  // useEffect(() => {\n  //   console.log('use')\n\n  // }, [selectedFormId]);\n\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const readOutText = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  const askNextQuestion = () => {\n    // Check if there are more questions in the selected form\n    if (currentQuestionIndex + 1 < questions.length) {\n      // Get the next question\n      const nextQuestion = questions[currentQuestionIndex + 1];\n\n      // Create a message for the next question\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n\n      // Update the state with the new question and messages\n      setMessages(messages => [...messages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n\n      // Read out the next question\n      readOutText(nextQuestion.text);\n    } else {\n      // Conversation ended, you can handle this however you want\n      const endMessage = {\n        text: 'Thank you for the conversation!\\n Enter your Name',\n        isUser: false\n      };\n      // setMessages([...messages, endMessage]);\n      setMessages(messages => [...messages, endMessage]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n      readOutText(endMessage.text);\n    }\n  };\n  const handleUserInput = async event => {\n    event.preventDefault();\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    // Remove trailing full stop if it exists\n    userInput = userInput.replace(/\\.$/, '');\n    const currentQuestion = questions[currentQuestionIndex];\n    let updatedMessages = [];\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\n\n    if (userInput === \"\") {\n      // If field is mandatory\n      if (currentQuestion.mandatory) {\n        const mandatoryMessage = {\n          text: 'This field is required.'\n        };\n        setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\n        readOutText(mandatoryMessage.text);\n        return;\n      }\n\n      // If user input is empty, just move to the next question\n      if (currentQuestion.last === true) setLastQuestionValue('Empty');\n      askNextQuestion();\n      return; // Skip further processing\n    } else {\n      if (currentQuestion.options) return;\n    }\n    let validationFailed = false;\n    let invalidMessage;\n    if (currentQuestion.callValidations) {\n      for (let i = 0; i < currentQuestion.callValidations.length; i++) {\n        const validationCheck = currentQuestion.callValidations[i];\n        if (validationCheck === 'onlyAlphabets') {\n          if (!hasOnlyAlphabets(userInput)) {\n            invalidMessage = \"Field must contain only alphabets.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'onlyDigits') {\n          if (!hasOnlyDigits(userInput)) {\n            invalidMessage = \"Field must contain only digits.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'maxLength') {\n          if (!hasFieldLength(userInput, currentQuestion.fieldLength, false)) {\n            invalidMessage = \"Field exceeds the max length.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'fixedLength') {\n          if (!hasFieldLength(userInput, currentQuestion.fieldLength, true)) {\n            invalidMessage = \"Field is not of the required length.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'validEmail') {\n          if (!isValidEmailFormat(userInput)) {\n            invalidMessage = \"Field is not of proper Email id format.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'makeTitle') {\n          userInput = toTitle(userInput);\n        } else if (validationCheck === 'dateFormat') {\n          if (!isValidDateFormat(userInput)) {\n            invalidMessage = \"Field is not of proper date format.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'validDate') {\n          if (!isValidDate(userInput)) {\n            invalidMessage = \"Field is not a proper calendar date or date lies in the future.\";\n            validationFailed = true;\n            break;\n          }\n        }\n      }\n    }\n    if (validationFailed) {\n      const invalidMessageObj = {\n        text: invalidMessage,\n        isUser: false\n      };\n      setMessages([...messages, invalidMessageObj]);\n      readOutText(invalidMessage);\n      return; // Exit the handleUserInput function if validation failed\n    }\n\n    if (userInput) {\n      setInputs([...inputs, {\n        fieldName: currentQuestion.field,\n        val: userInput\n      }]);\n      if (currentQuestion.last === true) setLastQuestionValue(userInput);\n\n      // Add the user's input to the messages\n      updatedMessages = [...messages, {\n        text: userInput,\n        isUser: true\n      }];\n      setMessages(updatedMessages);\n      setVoiceInput('');\n    }\n\n    // Move to the next field or end the conversation\n    askNextQuestion();\n  };\n\n  // Use useEffect to capture the updated dob value before sending it to the server\n  useEffect(() => {\n    if (lastQuestionValue || lastQuestionValue === 'Empty') {\n      // Send the user input to the server\n      const sendUserInput = async () => {\n        const userInputData = {};\n        for (let i = 0; i < inputs.length; i++) {\n          console.log(inputs[i]);\n          userInputData[inputs[i].fieldName] = inputs[i].val;\n        }\n        try {\n          await axios.post('http://localhost:3001/save', {\n            userInput: userInputData,\n            selectedFormId\n          });\n          console.log('User input saved successfully');\n\n          // Add the user inputs to the userInputs array\n          const newInput = userInputData;\n          console.log(newInput);\n          setUserInputs(prevUserInputs => [...prevUserInputs, newInput]);\n\n          // Clear the input fields\n          setLastQuestionValue('');\n          setInputs([]);\n        } catch (error) {\n          console.error('Failed to save user input:', error);\n        }\n      };\n      sendUserInput();\n    }\n  }, [lastQuestionValue]);\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n    readOutText(currentQuestion.text); // Read out the initial question\n  }, [questions]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      className: \"chat-window\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isUser ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this)), userInputs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Collected Inputs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), userInputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: Object.entries(input).map(([fieldName, fieldValue]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [fieldName, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 23\n              }, this), \" \", fieldValue]\n            }, fieldName, true, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 19\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        value: voiceInput,\n        onChange: e => setVoiceInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recognition\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startVoiceRecognition,\n        children: \"Start Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopVoiceRecognition,\n        children: \"Stop Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"3zgdqW4T80lWOw8KlFMTWTtxVXg=\", false, function () {\n  return [useLocation];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useLocation","isValidDateFormat","isValidDate","hasOnlyAlphabets","hasOnlyDigits","hasFieldLength","isValidEmailFormat","toTitle","response","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","currentQuestionIndex","setCurrentQuestionIndex","voiceInput","setVoiceInput","inputRef","userInputs","setUserInputs","inputs","setInputs","lastQuestionValue","setLastQuestionValue","questions","currentQuestion","location","selectedFormId","getQuestions","get","then","data","error","console","log","text","isUser","readOutText","state","handleVoiceInput","event","transcript","results","handleVoiceError","utterance","SpeechSynthesisUtterance","window","speechSynthesis","speak","startVoiceRecognition","SpeechRecognition","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","askNextQuestion","length","nextQuestion","nextQuestionMessage","endMessage","handleUserInput","preventDefault","userInput","current","value","replace","updatedMessages","trim","mandatory","mandatoryMessage","prevMessages","last","options","validationFailed","invalidMessage","callValidations","i","validationCheck","fieldLength","invalidMessageObj","fieldName","field","val","sendUserInput","userInputData","post","newInput","prevUserInputs","chatWindow","document","getElementById","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","message","index","input","Object","entries","fieldValue","onSubmit","type","ref","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport axios from 'axios';\r\nimport { useLocation } from 'react-router-dom';\r\n// import questions from \"./questions\";\r\nimport { isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength, isValidEmailFormat, toTitle } from './validate';\r\nimport { response } from 'express';\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const inputRef = useRef(null);\r\n  const [userInputs, setUserInputs] = useState([]);\r\n  const [inputs, setInputs] = useState([]);\r\n  const [lastQuestionValue, setLastQuestionValue] = useState('');\r\n  // const [questions, setQuestions] = useState([]);\r\n  let questions = [];\r\n  let currentQuestion={};\r\n\r\n  const location = useLocation();\r\n  let selectedFormId = null;\r\n\r\n  // Function to fetch questions from the server\r\n  const getQuestions = async () => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:3001/getQuestions/${selectedFormId}`).then((response)=>{});\r\n      // console.log(response)\r\n      // setQuestions(response.data);\r\n      questions=response.data;\r\n      // console.log(questions);\r\n    //   const currentQuestion = questions[currentQuestionIndex];\r\n    // setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n    // readOutText(currentQuestion.text); \r\n      // After receiving the questions, you can set the initial question and start the conversation.\r\n      // Here, I assume that the questions received are an array.\r\n      // setMessages([ { text: questions[0].text, isUser: false } ]);\r\n    } catch (error) {\r\n      console.error('Failed to fetch questions:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('use')\r\n    console.log(questions)\r\n    currentQuestion = questions[currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n    readOutText(currentQuestion.text); \r\n  }, [questions]);\r\n\r\n  if (location !== null) {\r\n    selectedFormId = location.state.selectedFormId;\r\n    if (selectedFormId) {\r\n      getQuestions();\r\n      // console.log(questions)\r\n      \r\n    }\r\n  }\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   console.log('use')\r\n    \r\n  // }, [selectedFormId]);\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const readOutText = (text) => {\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n\r\n  const askNextQuestion = () => {\r\n    // Check if there are more questions in the selected form\r\n    if (currentQuestionIndex + 1 < questions.length) {\r\n      // Get the next question\r\n      const nextQuestion = questions[currentQuestionIndex + 1];\r\n\r\n      // Create a message for the next question\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n\r\n      // Update the state with the new question and messages\r\n      setMessages((messages) => [...messages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n\r\n      // Read out the next question\r\n      readOutText(nextQuestion.text);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!\\n Enter your Name',\r\n        isUser: false,\r\n      };\r\n      // setMessages([...messages, endMessage]);\r\n      setMessages((messages) => [...messages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n      readOutText(endMessage.text);\r\n    }\r\n  };\r\n\r\n\r\n  const handleUserInput = async (event) => {\r\n    event.preventDefault();\r\n\r\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    // Remove trailing full stop if it exists\r\n    userInput = userInput.replace(/\\.$/, '');\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    let updatedMessages = [];\r\n\r\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\r\n\r\n    if (userInput === \"\") {\r\n      // If field is mandatory\r\n      if (currentQuestion.mandatory) {\r\n        const mandatoryMessage = {\r\n          text: 'This field is required.',\r\n        };\r\n        setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\r\n        readOutText(mandatoryMessage.text);\r\n        return;\r\n      }\r\n\r\n      // If user input is empty, just move to the next question\r\n      if (currentQuestion.last === true)\r\n        setLastQuestionValue('Empty');\r\n      askNextQuestion();\r\n      return; // Skip further processing\r\n    } else {\r\n      if (currentQuestion.options)\r\n        return;\r\n    }\r\n\r\n    let validationFailed = false;\r\n    let invalidMessage;\r\n\r\n    if (currentQuestion.callValidations) {\r\n      for (let i = 0; i < currentQuestion.callValidations.length; i++) {\r\n        const validationCheck = currentQuestion.callValidations[i];\r\n        if (validationCheck === 'onlyAlphabets') {\r\n          if (!hasOnlyAlphabets(userInput)) {\r\n            invalidMessage = \"Field must contain only alphabets.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'onlyDigits') {\r\n          if (!hasOnlyDigits(userInput)) {\r\n            invalidMessage = \"Field must contain only digits.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'maxLength') {\r\n          if (!hasFieldLength(userInput, currentQuestion.fieldLength, false)) {\r\n            invalidMessage = \"Field exceeds the max length.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'fixedLength') {\r\n          if (!hasFieldLength(userInput, currentQuestion.fieldLength, true)) {\r\n            invalidMessage = \"Field is not of the required length.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'validEmail') {\r\n          if (!isValidEmailFormat(userInput)) {\r\n            invalidMessage = \"Field is not of proper Email id format.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'makeTitle') {\r\n          userInput = toTitle(userInput);\r\n        } else if (validationCheck === 'dateFormat') {\r\n          if (!isValidDateFormat(userInput)) {\r\n            invalidMessage = \"Field is not of proper date format.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'validDate') {\r\n          if (!isValidDate(userInput)) {\r\n            invalidMessage = \"Field is not a proper calendar date or date lies in the future.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validationFailed) {\r\n      const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n      setMessages([...messages, invalidMessageObj]);\r\n      readOutText(invalidMessage);\r\n      return; // Exit the handleUserInput function if validation failed\r\n    }\r\n    if (userInput) {\r\n      setInputs([...inputs, { fieldName: currentQuestion.field, val: userInput }]);\r\n      if (currentQuestion.last === true)\r\n        setLastQuestionValue(userInput);\r\n\r\n      // Add the user's input to the messages\r\n      updatedMessages = [\r\n        ...messages,\r\n        { text: userInput, isUser: true },\r\n      ];\r\n      setMessages(updatedMessages);\r\n      setVoiceInput('');\r\n    }\r\n\r\n    // Move to the next field or end the conversation\r\n    askNextQuestion();\r\n  };\r\n\r\n\r\n  // Use useEffect to capture the updated dob value before sending it to the server\r\n  useEffect(() => {\r\n    if (lastQuestionValue || lastQuestionValue === 'Empty') {\r\n      // Send the user input to the server\r\n      const sendUserInput = async () => {\r\n        const userInputData = {};\r\n        for (let i = 0; i < inputs.length; i++) {\r\n          console.log(inputs[i]);\r\n          userInputData[inputs[i].fieldName] = inputs[i].val;\r\n        }\r\n\r\n        try {\r\n          await axios.post('http://localhost:3001/save', {\r\n            userInput: userInputData, selectedFormId\r\n          });\r\n          console.log('User input saved successfully');\r\n\r\n          // Add the user inputs to the userInputs array\r\n          const newInput = userInputData;\r\n          console.log(newInput);\r\n          setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\r\n\r\n          // Clear the input fields\r\n          setLastQuestionValue('');\r\n          setInputs([]);\r\n\r\n        } catch (error) {\r\n          console.error('Failed to save user input:', error);\r\n        }\r\n      };\r\n\r\n      sendUserInput();\r\n    }\r\n  }, [lastQuestionValue]);\r\n\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n    readOutText(currentQuestion.text); // Read out the initial question\r\n  }, [questions]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {userInputs.length > 0 && (\r\n          <div className=\"message bot\">\r\n            <h4>Collected Inputs:</h4>\r\n            {userInputs.map((input, index) => (\r\n              <div key={index}>\r\n                {Object.entries(input).map(([fieldName, fieldValue]) => (\r\n                  <div>\r\n                    <span key={fieldName}>\r\n                      <strong>{fieldName}:</strong> {fieldValue}\r\n                    </span>\r\n                    <br />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        {/* {questions[currentQuestionIndex].options ? (\r\n          <div className=\"checkbox-options\">\r\n            {questions[currentQuestionIndex].options.map((option) => (\r\n              <div key={option.value} className=\"checkbox-option\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={option.value}\r\n                  name={option.value}\r\n                  // checked={checkboxValue === option.value}\r\n                  checked={false}\r\n                  onChange={() => {\r\n                    // setCheckboxValue(option.value);\r\n                    setInputs([...inputs, { fieldName: questions[currentQuestionIndex].field, val: option.value }]);\r\n                    const checkboxMessage = {\r\n                      text: option.value,\r\n                      isUser: true,\r\n                    };\r\n                    setMessages([...messages, checkboxMessage]);\r\n                    if (questions[currentQuestionIndex].last === true)\r\n                      setLastQuestionValue('Empty');\r\n                    askNextQuestion();\r\n                  }}\r\n                />\r\n                <label htmlFor={option.value}>{option.label}</label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : null} */}\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          ref={inputRef}\r\n          value={voiceInput}\r\n          onChange={(e) => setVoiceInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}