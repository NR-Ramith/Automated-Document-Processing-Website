{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\Photo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { saveAs } from 'file-saver';\nimport { Buffer } from 'buffer';\nimport UploadForm from './UploadForm';\n// import { URL } from 'node-url';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Photo() {\n  _s();\n  const [processedImage, setProcessedImage] = useState(null);\n  // const path = require('path');\n  // const fs = require('fs');\n  // const passportImagePath = path.join(__dirname, 'res_image.jpeg');\n  const handleImageUpload = async imageData => {\n    try {\n      const response = await axios.post('http://localhost:5000/processImage', {\n        imageData,\n        responseType: 'blob'\n      });\n      // console.log(response);\n      // setProcessedImage(response.data);\n      // const processedImageUrl = URL.createObjectURL(response.data);\n\n      const blob = new Blob([response.data], {\n        type: 'image/jpeg'\n      });\n      const blobURL = URL.createObjectURL(blob);\n      console.log(blobURL); // Check the console to see if it's a valid Blob\n      setProcessedImage(blobURL);\n      // Save the buffer as a temporary image\n      // console.log(response);\n      // fs.writeFile(passportImagePath, response, (err) => {\n      //   if (err) {\n      //     console.error(err);\n      //   }});\n      // const buffer = Buffer.from(response.data, 'binary'); // Convert image data to Buffer\n      // const blob = new Blob([response.data], { type: 'image/jpeg' }); // Create Blob from Buffer\n      // setProcessedImage(URL.createObjectURL(blob)); // Convert Blob to URL\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    console.log('Processed image changed:', processedImage);\n  }, [processedImage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image Processing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UploadForm, {\n      onImageUpload: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), processedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Processed Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: processedImage,\n        alt: \"Processed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Photo, \"pHlMN/vdNVIxKseDkiZZltjiGXs=\");\n_c = Photo;\nexport default Photo;\nvar _c;\n$RefreshReg$(_c, \"Photo\");","map":{"version":3,"names":["React","useState","useEffect","axios","saveAs","Buffer","UploadForm","jsxDEV","_jsxDEV","Photo","_s","processedImage","setProcessedImage","handleImageUpload","imageData","response","post","responseType","blob","Blob","data","type","blobURL","URL","createObjectURL","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onImageUpload","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/Photo.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { saveAs } from 'file-saver';\r\nimport { Buffer } from 'buffer';\r\nimport UploadForm from './UploadForm';\r\n// import { URL } from 'node-url';\r\n\r\nfunction Photo() {\r\n  const [processedImage, setProcessedImage] = useState(null);\r\n  // const path = require('path');\r\n  // const fs = require('fs');\r\n  // const passportImagePath = path.join(__dirname, 'res_image.jpeg');\r\n  const handleImageUpload = async (imageData) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/processImage', {\r\n        imageData,\r\n        responseType: 'blob',\r\n      });\r\n      // console.log(response);\r\n      // setProcessedImage(response.data);\r\n      // const processedImageUrl = URL.createObjectURL(response.data);\r\n      \r\n      const blob = new Blob([response.data], { type: 'image/jpeg' });\r\n     \r\n      const blobURL = URL.createObjectURL(blob);\r\n      console.log(blobURL); // Check the console to see if it's a valid Blob\r\n      setProcessedImage(blobURL);\r\n      // Save the buffer as a temporary image\r\n      // console.log(response);\r\n      // fs.writeFile(passportImagePath, response, (err) => {\r\n      //   if (err) {\r\n      //     console.error(err);\r\n      //   }});\r\n      // const buffer = Buffer.from(response.data, 'binary'); // Convert image data to Buffer\r\n      // const blob = new Blob([response.data], { type: 'image/jpeg' }); // Create Blob from Buffer\r\n      // setProcessedImage(URL.createObjectURL(blob)); // Convert Blob to URL\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('Processed image changed:', processedImage);\r\n  }, [processedImage]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Image Processing</h1>\r\n      <UploadForm onImageUpload={handleImageUpload} />\r\n      {processedImage && (\r\n        <div>\r\n          <h2>Processed Image</h2>\r\n          <img src={processedImage} alt=\"Processed\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Photo;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,YAAY;AACnC,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,UAAU,MAAM,cAAc;AACrC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC1D;EACA;EACA;EACA,MAAMY,iBAAiB,GAAG,MAAOC,SAAS,IAAK;IAC7C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,oCAAoC,EAAE;QACtEF,SAAS;QACTG,YAAY,EAAE;MAChB,CAAC,CAAC;MACF;MACA;MACA;;MAEA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,QAAQ,CAACK,IAAI,CAAC,EAAE;QAAEC,IAAI,EAAE;MAAa,CAAC,CAAC;MAE9D,MAAMC,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;MACzCO,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC,CAAC,CAAC;MACtBV,iBAAiB,CAACU,OAAO,CAAC;MAC1B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAEDzB,SAAS,CAAC,MAAM;IACduB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEf,cAAc,CAAC;EACzD,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpB,oBACEH,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBxB,OAAA,CAACF,UAAU;MAAC2B,aAAa,EAAEpB;IAAkB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC/CrB,cAAc,iBACbH,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QAAAoB,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBxB,OAAA;QAAK0B,GAAG,EAAEvB,cAAe;QAACwB,GAAG,EAAC;MAAW;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACtB,EAAA,CAlDQD,KAAK;AAAA2B,EAAA,GAAL3B,KAAK;AAoDd,eAAeA,KAAK;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}