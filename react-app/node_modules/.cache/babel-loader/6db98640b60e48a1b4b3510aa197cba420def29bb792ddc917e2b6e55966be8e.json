{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\ImageDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageDisplay() {\n  _s();\n  const [imageUrl, setImageUrl] = useState('');\n  useEffect(() => {\n    // Make a request to fetch the image from the server\n    fetch('http://localhost:3001/getImage').then(response => response.blob()).then(blob => {\n      // Check if the Blob has a valid type (e.g., image/jpeg, image/png)\n      if (blob.type.startsWith('image/')) {\n        // Create a Blob URL for the image\n        console.log();\n        const imageUrl = URL.createObjectURL(blob);\n        setImageUrl(imageUrl);\n      } else {\n        console.error('Invalid Blob type:', blob.type);\n        // Handle the case where the Blob is not a valid image\n      }\n    }).catch(error => {\n      console.error('Error fetching image:', error);\n      // Handle the fetch error here\n    });\n\n    // Clean up the Blob URL when the component unmounts\n    return () => {\n      if (imageUrl) {\n        URL.revokeObjectURL(imageUrl);\n      }\n    };\n  }, []); // Empty dependency array means this effect runs only once, like componentDidMount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageUrl,\n      alt: \"Server Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageDisplay, \"KjMZRZCO4mLZUizaO9kQ3A3TUQU=\");\n_c = ImageDisplay;\nexport default ImageDisplay;\nvar _c;\n$RefreshReg$(_c, \"ImageDisplay\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ImageDisplay","_s","imageUrl","setImageUrl","fetch","then","response","blob","type","startsWith","console","log","URL","createObjectURL","error","catch","revokeObjectURL","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/ImageDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction ImageDisplay() {\r\n  const [imageUrl, setImageUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Make a request to fetch the image from the server\r\n    fetch('http://localhost:3001/getImage')\r\n      .then((response) => response.blob())\r\n      .then((blob) => {\r\n        // Check if the Blob has a valid type (e.g., image/jpeg, image/png)\r\n        if (blob.type.startsWith('image/')) {\r\n          // Create a Blob URL for the image\r\n          console.log()\r\n          const imageUrl = URL.createObjectURL(blob);\r\n          setImageUrl(imageUrl);\r\n        } else {\r\n          console.error('Invalid Blob type:', blob.type);\r\n          // Handle the case where the Blob is not a valid image\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching image:', error);\r\n        // Handle the fetch error here\r\n      });\r\n\r\n    // Clean up the Blob URL when the component unmounts\r\n    return () => {\r\n      if (imageUrl) {\r\n        URL.revokeObjectURL(imageUrl);\r\n      }\r\n    };\r\n  }, []); // Empty dependency array means this effect runs only once, like componentDidMount\r\n\r\n  return (\r\n    <div>\r\n      {imageUrl && (\r\n        <img src={imageUrl} alt=\"Server Image\" />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageDisplay;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAO,KAAK,CAAC,gCAAgC,CAAC,CACpCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEE,IAAI,IAAK;MACd;MACA,IAAIA,IAAI,CAACC,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,EAAE;QAClC;QACAC,OAAO,CAACC,GAAG,CAAC,CAAC;QACb,MAAMT,QAAQ,GAAGU,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;QAC1CJ,WAAW,CAACD,QAAQ,CAAC;MACvB,CAAC,MAAM;QACLQ,OAAO,CAACI,KAAK,CAAC,oBAAoB,EAAEP,IAAI,CAACC,IAAI,CAAC;QAC9C;MACF;IACF,CAAC,CAAC,CACDO,KAAK,CAAED,KAAK,IAAK;MAChBJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C;IACF,CAAC,CAAC;;IAEJ;IACA,OAAO,MAAM;MACX,IAAIZ,QAAQ,EAAE;QACZU,GAAG,CAACI,eAAe,CAACd,QAAQ,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEH,OAAA;IAAAkB,QAAA,EACGf,QAAQ,iBACPH,OAAA;MAAKmB,GAAG,EAAEhB,QAAS;MAACiB,GAAG,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACzC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACtB,EAAA,CAvCQD,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAyCrB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}