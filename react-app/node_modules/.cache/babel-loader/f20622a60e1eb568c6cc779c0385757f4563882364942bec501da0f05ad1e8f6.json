{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\Menu.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Menu.css';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport UploadForm from './UploadForm';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Menu = () => {\n  _s();\n  const [processedImage, setProcessedImage] = useState(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n  let selectedFormId = null;\n  if (location !== null) {\n    selectedFormId = location.state.selectedFormId;\n    console.log(selectedFormId);\n  }\n  // const path = require('path');\n  // const fs = require('fs');\n  // const passportImagePath = path.join(__dirname, 'res_image.jpeg');\n\n  const handleImageUpload = async imageData => {\n    try {\n      fetch('http://localhost:5000/processImage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageData\n        }) // Assuming imageData is a base64-encoded image\n      }).then(response => response.blob()).then(blob => {\n        // Check if the Blob has a valid type (e.g., image/jpeg, image/png)\n        if (blob.type.startsWith('image/')) {\n          // Create a Blob URL for the image\n          const imageUrl = URL.createObjectURL(blob);\n          console.log();\n          setProcessedImage(imageUrl);\n        } else {\n          console.error('Invalid Blob type:', blob.type);\n          // Handle the case where the Blob is not a valid image\n        }\n      }).catch(error => {\n        console.error('Error fetching image:', error);\n        // Handle the fetch error here\n      });\n      ;\n      // console.log(response);\n      // setProcessedImage(response.data);\n      // const processedImageUrl = URL.createObjectURL(response.data);\n      // const fetchresponse = await fetch(response.data); // Replace with the actual path\n      // console.log(response);\n      // const imageBlob = await response.data.blob();\n      // setProcessedImage(URL.createObjectURL(imageBlob));\n      // const blob = new Blob([response.data], { type: 'image/png' });\n      // saveAs(blob, \"my-image.jpeg\");\n\n      // const blobURL = URL.createObjectURL(response.blob());\n      // console.log(blobURL); // Check the console to see if it's a valid Blob\n      // setProcessedImage(blobURL);\n      // Save the buffer as a temporary image\n      // console.log(response);\n      // fs.writeFile(passportImagePath, response, (err) => {\n      //   if (err) {\n      //     console.error(err);\n      //   }});\n      // const buffer = Buffer.from(response.data, 'binary'); // Convert image data to Buffer\n      // const blob = new Blob([response.data], { type: 'image/jpeg' }); // Create Blob from Buffer\n      // setProcessedImage(URL.createObjectURL(blob)); // Convert Blob to URL\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleButtonClick = () => {\n    navigate('/chatbot', {\n      state: {\n        selectedFormId: selectedFormId\n      }\n    });\n  };\n  useEffect(() => {\n    console.log('Processed image changed:', processedImage);\n  }, [processedImage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"menu-title\",\n        children: \"Image Processing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UploadForm, {\n        onImageUpload: handleImageUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), processedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processed-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Processed Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"processed-image\",\n          src: processedImage,\n          alt: \"Processed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-application\",\n      children: \"Don't have the filled application form?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      className: \"chatbot-button\",\n      children: \"Try ChatBot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(Menu, \"w96UgVjXg+3vnnulwY6q9hVeeLg=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Menu;\nexport default Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","useNavigate","UploadForm","axios","jsxDEV","_jsxDEV","Menu","_s","processedImage","setProcessedImage","navigate","location","selectedFormId","state","console","log","handleImageUpload","imageData","fetch","method","headers","body","JSON","stringify","then","response","blob","type","startsWith","imageUrl","URL","createObjectURL","error","catch","handleButtonClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onImageUpload","src","alt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/Menu.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Menu.css';\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\r\nimport UploadForm from './UploadForm';\r\nimport axios from 'axios';\r\n\r\nconst Menu = () => {\r\n\r\n    const [processedImage, setProcessedImage] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    const location = useLocation();\r\n    let selectedFormId = null;\r\n    if (location !== null) {\r\n        selectedFormId = location.state.selectedFormId;\r\n        console.log(selectedFormId);\r\n    }\r\n    // const path = require('path');\r\n    // const fs = require('fs');\r\n    // const passportImagePath = path.join(__dirname, 'res_image.jpeg');\r\n\r\n    const handleImageUpload = async (imageData) => {\r\n        try {\r\n            fetch('http://localhost:5000/processImage', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ imageData }), // Assuming imageData is a base64-encoded image\r\n            }).then((response) => response.blob())\r\n                .then((blob) => {\r\n                    // Check if the Blob has a valid type (e.g., image/jpeg, image/png)\r\n                    if (blob.type.startsWith('image/')) {\r\n                        // Create a Blob URL for the image\r\n                        const imageUrl = URL.createObjectURL(blob);\r\n                        console.log()\r\n                        setProcessedImage(imageUrl);\r\n                    } else {\r\n                        console.error('Invalid Blob type:', blob.type);\r\n                        // Handle the case where the Blob is not a valid image\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error fetching image:', error);\r\n                    // Handle the fetch error here\r\n                });;\r\n            // console.log(response);\r\n            // setProcessedImage(response.data);\r\n            // const processedImageUrl = URL.createObjectURL(response.data);\r\n            // const fetchresponse = await fetch(response.data); // Replace with the actual path\r\n            // console.log(response);\r\n            // const imageBlob = await response.data.blob();\r\n            // setProcessedImage(URL.createObjectURL(imageBlob));\r\n            // const blob = new Blob([response.data], { type: 'image/png' });\r\n            // saveAs(blob, \"my-image.jpeg\");\r\n\r\n            // const blobURL = URL.createObjectURL(response.blob());\r\n            // console.log(blobURL); // Check the console to see if it's a valid Blob\r\n            // setProcessedImage(blobURL);\r\n            // Save the buffer as a temporary image\r\n            // console.log(response);\r\n            // fs.writeFile(passportImagePath, response, (err) => {\r\n            //   if (err) {\r\n            //     console.error(err);\r\n            //   }});\r\n            // const buffer = Buffer.from(response.data, 'binary'); // Convert image data to Buffer\r\n            // const blob = new Blob([response.data], { type: 'image/jpeg' }); // Create Blob from Buffer\r\n            // setProcessedImage(URL.createObjectURL(blob)); // Convert Blob to URL\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const handleButtonClick = () => {\r\n        navigate('/chatbot', { state: { selectedFormId: selectedFormId } });\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('Processed image changed:', processedImage);\r\n    }, [processedImage]);\r\n\r\n    return (\r\n        <div className=\"menu-container\">\r\n            <div className=\"menu-content\">\r\n                <h1 className=\"menu-title\">Image Processing</h1>\r\n                <UploadForm onImageUpload={handleImageUpload} />\r\n                {processedImage && (\r\n                    <div className=\"processed-image-container\">\r\n                        <h2>Processed Image</h2>\r\n                        <img className=\"processed-image\" src={processedImage} alt=\"Processed\" />\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <p className=\"no-application\">Don't have the filled application form?</p>\r\n            {/* <Link to={{ pathname: '/chatBot', state: { selectedForm } }} className=\"chatbot-link\"> */}\r\n            <button onClick={handleButtonClick} className=\"chatbot-button\">Try ChatBot</button>\r\n            {/* </Link> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}