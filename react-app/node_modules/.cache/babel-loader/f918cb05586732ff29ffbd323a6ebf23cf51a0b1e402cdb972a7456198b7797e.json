{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\react-app\\\\src\\\\components\\\\ViewFinalData.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport axios from './axios-object';\nimport { getTemplateId, getDId, getStateValue, getAllFieldValues, setTemplateId, setDId, resetFieldValues, resetFilledMandatoryFieldIndicator, resetStateValues, setFieldValue } from './values';\nimport './ViewFinalData.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing.unit * 2,\n    color: theme.palette.text.secondary\n  },\n  finalpaper: {\n    // padding: theme.spacing.unit * 2,\n    color: theme.palette.text.secondary,\n    position: \"relative\",\n    display: \"inline-block\"\n  },\n  image: {\n    width: '100%'\n  }\n});\nclass ViewFinalData extends Component {\n  constructor() {\n    super();\n    this.handleInputChange = (e, fieldName) => {\n      console.log('');\n      // Access the new value from the input field\n      const newValue = e.target.value;\n      setFieldValue(fieldName, newValue);\n      console.log(getAllFieldValues());\n    };\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const dataToSend = getAllFieldValues();\n\n      // Filter out key-value pairs with null values\n      const filteredData = Object.fromEntries(Object.entries(dataToSend).filter(([key, value]) => value !== null));\n\n      // Check if there are non-null values to submit\n      if (Object.keys(filteredData).length === 0) {\n        alert('No data to submit.');\n        return;\n      }\n\n      // Send a POST request to the server\n      axios.post(`http://localhost:3001/saveResponse`, {\n        userInput: filteredData,\n        selectedFormId: getTemplateId()\n      }).then(response => {\n        // Handle success\n        alert('Response Submitted');\n        setTemplateId(0);\n        setDId(0);\n        resetFieldValues();\n        resetFilledMandatoryFieldIndicator();\n        resetStateValues();\n        window.history.pushState({}, null, \"/formsList\");\n        window.dispatchEvent(new Event('popstate'));\n      }).catch(error => {\n        // Handle error\n        console.error('Error submitting response:', error);\n        alert('Failed to submit response. Please try again.');\n      });\n    };\n    this.state = {\n      data: [],\n      tid: null,\n      did: null,\n      templateURL: null,\n      formImageURL: null\n    };\n  }\n  componentDidMount() {\n    let tid = getTemplateId();\n    let did = getDId();\n    this.setState({\n      tid: tid,\n      did: did\n    });\n    const url = window.URL.createObjectURL(new Blob([getStateValue(\"form-image\")]));\n    this.setState({\n      formImageURL: url\n    });\n\n    // Make a request to fetch the file data\n    axios.get('/getTemplateFile/' + tid, {\n      responseType: 'blob'\n    }).then(response => {\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      // Set the URL to a state variable\n      this.setState({\n        templateURL: url\n      });\n    });\n    const dataToSend = getAllFieldValues();\n\n    // Filter out key-value pairs with null values\n    const filteredData = Object.fromEntries(Object.entries(dataToSend).filter(([key, value]) => value !== null));\n    console.log('filtered    ', filteredData);\n    axios.post('/showFinalMarked/' + tid, filteredData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(response => {\n      this.setState({\n        data: response.data\n      });\n      console.log(response.data);\n      // if (response.data)\n    });\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        wrap: \"nowrap\",\n        spacing: 24,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            className: classes.paper,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.formImageURL,\n              className: classes.image,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            className: classes.finalpaper,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.templateURL,\n              className: classes.image,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this), this.state.data.map(function (field, key) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: Object.keys(field).map(data => {\n                  const st2 = {\n                    location: {\n                      position: \"absolute\",\n                      margin: \"0 auto\",\n                      color: \"black\",\n                      letterSpacing: \"0.4em\",\n                      left: field[data][\"lx\"] + 0.5 + \"%\",\n                      top: field[data][\"ty\"] + \"%\"\n                    }\n                  };\n                  if (field[data][\"type\"] === \"Text\") {\n                    return /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        style: st2.location,\n                        children: /*#__PURE__*/_jsxDEV(\"input\", {\n                          type: \"text\",\n                          class: \"transparent-input\",\n                          placeholder: data,\n                          value: data,\n                          onChange: e => this.handleInputChange(e, field[data]['field'])\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 158,\n                          columnNumber: 87\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 158,\n                        columnNumber: 61\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 158,\n                      columnNumber: 53\n                    }, this);\n                  } else if (field[data][\"type\"] === \"Signature\") {\n                    console.log(\"SIGNATURE\");\n                    // console.log(field[data])\n                    if (data === 'passportImage') {\n                      if (getAllFieldValues()['passportImage'] instanceof Blob) {\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          style: st2.location,\n                          children: /*#__PURE__*/_jsxDEV(\"img\", {\n                            src: URL.createObjectURL(getAllFieldValues()['passportImage']),\n                            alt: \"Passport\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 168,\n                            columnNumber: 87\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 168,\n                          columnNumber: 61\n                        }, this);\n                      } else {\n                        // Convert the base64 string to binary data\n                        const binaryImageData = atob(getAllFieldValues()['passportImage']);\n                        const arrayBuffer = new ArrayBuffer(binaryImageData.length);\n                        const view = new Uint8Array(arrayBuffer);\n                        for (let i = 0; i < binaryImageData.length; i++) {\n                          view[i] = binaryImageData.charCodeAt(i);\n                        }\n                        // Create a Blob and generate a URL for displaying the image\n                        const blob = new Blob([arrayBuffer], {\n                          type: 'image/png'\n                        });\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          style: st2.location,\n                          children: /*#__PURE__*/_jsxDEV(\"img\", {\n                            src: URL.createObjectURL(blob),\n                            alt: \"Passport\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 182,\n                            columnNumber: 87\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 182,\n                          columnNumber: 61\n                        }, this);\n                      }\n                      // else {\n                      //     // Fetch the blob data from the FormData object\n                      //     console.log(\" form data - \", field[data][\"imageData\"])\n                      //     const blobData = field[data][\"imageData\"].get('image');\n                      //     return (\n                      //         <div style={st2.location}><img src={URL.createObjectURL(blobData)} alt=\"Passport\" /></div>\n                      //     )\n                      // }\n                    } else {\n                      // Convert the base64 string to binary data\n                      const binaryImageData = atob(data);\n                      const arrayBuffer = new ArrayBuffer(binaryImageData.length);\n                      const view = new Uint8Array(arrayBuffer);\n                      for (let i = 0; i < binaryImageData.length; i++) {\n                        view[i] = binaryImageData.charCodeAt(i);\n                      }\n                      // Create a Blob and generate a URL for displaying the image\n                      const blob = new Blob([arrayBuffer], {\n                        type: 'image/png'\n                      });\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        style: st2.location,\n                        children: /*#__PURE__*/_jsxDEV(\"img\", {\n                          src: URL.createObjectURL(blob),\n                          alt: \"Passport\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 205,\n                          columnNumber: 83\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 205,\n                        columnNumber: 57\n                      }, this);\n                    }\n                  } else {\n                    return /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        style: st2.location,\n                        children: \"Nothing\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 211,\n                        columnNumber: 61\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 211,\n                      columnNumber: 53\n                    }, this);\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 37\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        className: classes.button,\n        type: \"submit\",\n        onClick: this.handleSubmit,\n        children: \"Submit Response\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this);\n  }\n}\nViewFinalData.contextTypes = {\n  router: PropTypes.object\n};\nViewFinalData.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(ViewFinalData);","map":{"version":3,"names":["React","Component","PropTypes","withStyles","Button","Paper","Grid","axios","getTemplateId","getDId","getStateValue","getAllFieldValues","setTemplateId","setDId","resetFieldValues","resetFilledMandatoryFieldIndicator","resetStateValues","setFieldValue","jsxDEV","_jsxDEV","styles","theme","root","flexGrow","paper","padding","spacing","unit","color","palette","text","secondary","finalpaper","position","display","image","width","ViewFinalData","constructor","handleInputChange","e","fieldName","console","log","newValue","target","value","handleSubmit","event","preventDefault","dataToSend","filteredData","Object","fromEntries","entries","filter","key","keys","length","alert","post","userInput","selectedFormId","then","response","window","history","pushState","dispatchEvent","Event","catch","error","state","data","tid","did","templateURL","formImageURL","componentDidMount","setState","url","URL","createObjectURL","Blob","get","responseType","headers","render","classes","props","className","children","container","wrap","item","xs","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","field","st2","location","margin","letterSpacing","left","top","style","type","class","placeholder","onChange","binaryImageData","atob","arrayBuffer","ArrayBuffer","view","Uint8Array","i","charCodeAt","blob","variant","button","onClick","contextTypes","router","object","propTypes","isRequired"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/react-app/src/components/ViewFinalData.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport axios from './axios-object';\r\nimport { getTemplateId, getDId, getStateValue, getAllFieldValues, setTemplateId, setDId, resetFieldValues, resetFilledMandatoryFieldIndicator, resetStateValues, setFieldValue } from './values';\r\nimport './ViewFinalData.css';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing.unit * 2,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    finalpaper: {\r\n        // padding: theme.spacing.unit * 2,\r\n        color: theme.palette.text.secondary,\r\n        position: \"relative\",\r\n        display: \"inline-block\"\r\n    },\r\n    image: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\nclass ViewFinalData extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: [],\r\n            tid: null,\r\n            did: null,\r\n            templateURL: null,\r\n            formImageURL: null,\r\n        }\r\n    }\r\n\r\n    static contextTypes = {\r\n        router: PropTypes.object,\r\n    }\r\n\r\n    componentDidMount() {\r\n        let tid = getTemplateId();\r\n        let did = getDId();\r\n        this.setState({ tid: tid, did: did });\r\n\r\n        const url = window.URL.createObjectURL(new Blob([getStateValue(\"form-image\")]));\r\n        this.setState({ formImageURL: url });\r\n\r\n        // Make a request to fetch the file data\r\n        axios.get('/getTemplateFile/' + tid, { responseType: 'blob' })\r\n            .then((response) => {\r\n                const url = window.URL.createObjectURL(new Blob([response.data]));\r\n                // Set the URL to a state variable\r\n                this.setState({ templateURL: url });\r\n            });\r\n\r\n        const dataToSend = getAllFieldValues();\r\n\r\n        // Filter out key-value pairs with null values\r\n        const filteredData = Object.fromEntries(\r\n            Object.entries(dataToSend).filter(([key, value]) => value !== null)\r\n        );\r\n\r\n        console.log('filtered    ', filteredData)\r\n\r\n        axios.post('/showFinalMarked/' + tid, filteredData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        })\r\n            .then(response => {\r\n                this.setState({ data: response.data }); console.log(response.data);\r\n                // if (response.data)\r\n            });\r\n    }\r\n\r\n    handleInputChange = (e, fieldName) => {\r\n        console.log('')\r\n        // Access the new value from the input field\r\n        const newValue = e.target.value;\r\n        setFieldValue(fieldName, newValue);\r\n        console.log(getAllFieldValues())\r\n      };\r\n\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const dataToSend = getAllFieldValues();\r\n\r\n        // Filter out key-value pairs with null values\r\n        const filteredData = Object.fromEntries(\r\n            Object.entries(dataToSend).filter(([key, value]) => value !== null)\r\n        );\r\n\r\n        // Check if there are non-null values to submit\r\n        if (Object.keys(filteredData).length === 0) {\r\n            alert('No data to submit.');\r\n            return;\r\n        }\r\n\r\n        // Send a POST request to the server\r\n        axios.post(`http://localhost:3001/saveResponse`, { userInput: filteredData, selectedFormId: getTemplateId() })\r\n            .then(response => {\r\n                // Handle success\r\n                alert('Response Submitted');\r\n                setTemplateId(0);\r\n                setDId(0);\r\n                resetFieldValues();\r\n                resetFilledMandatoryFieldIndicator();\r\n                resetStateValues();\r\n                window.history.pushState({}, null, \"/formsList\");\r\n                window.dispatchEvent(new Event('popstate'));\r\n            })\r\n            .catch(error => {\r\n                // Handle error\r\n                console.error('Error submitting response:', error);\r\n                alert('Failed to submit response. Please try again.');\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container wrap=\"nowrap\" spacing={24}>\r\n                    <Grid item xs={6}>\r\n                        <Paper className={classes.paper}>\r\n                            <img src={this.state.formImageURL} className={classes.image} alt='' />\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Paper className={classes.finalpaper}>\r\n                            <img src={this.state.templateURL} className={classes.image} alt='' />\r\n\r\n                            {this.state.data.map(function (field, key) {\r\n\r\n                                return (\r\n                                    <div>\r\n                                        {Object.keys(field).map(data => {\r\n                                            const st2 = {\r\n                                                location: {\r\n                                                    position: \"absolute\",\r\n                                                    margin: \"0 auto\",\r\n                                                    color: \"black\",\r\n                                                    letterSpacing: \"0.4em\",\r\n                                                    left: field[data][\"lx\"] + 0.5 + \"%\",\r\n                                                    top: field[data][\"ty\"] + \"%\",\r\n                                                }\r\n                                            }\r\n                                            if (field[data][\"type\"] === \"Text\") {\r\n                                                return (\r\n                                                    <strong><div style={st2.location}><input type=\"text\" class=\"transparent-input\"  placeholder={data} value={data}\r\n                                                    onChange={(e) => this.handleInputChange(e, field[data]['field'])}/></div></strong>\r\n                                                )\r\n                                            }\r\n                                            else if (field[data][\"type\"] === \"Signature\") {\r\n                                                console.log(\"SIGNATURE\");\r\n                                                // console.log(field[data])\r\n                                                if (data === 'passportImage') {\r\n                                                    if (getAllFieldValues()['passportImage'] instanceof Blob) {\r\n                                                        return (\r\n                                                            <div style={st2.location}><img src={URL.createObjectURL(getAllFieldValues()['passportImage'])} alt=\"Passport\" /></div>\r\n                                                        )\r\n                                                    }\r\n                                                    else {\r\n                                                        // Convert the base64 string to binary data\r\n                                                        const binaryImageData = atob(getAllFieldValues()['passportImage']);\r\n                                                        const arrayBuffer = new ArrayBuffer(binaryImageData.length);\r\n                                                        const view = new Uint8Array(arrayBuffer);\r\n                                                        for (let i = 0; i < binaryImageData.length; i++) {\r\n                                                            view[i] = binaryImageData.charCodeAt(i);\r\n                                                        }\r\n                                                        // Create a Blob and generate a URL for displaying the image\r\n                                                        const blob = new Blob([arrayBuffer], { type: 'image/png' });\r\n                                                        return (\r\n                                                            <div style={st2.location}><img src={URL.createObjectURL(blob)} alt=\"Passport\" /></div>\r\n                                                        )\r\n                                                    }\r\n                                                    // else {\r\n                                                    //     // Fetch the blob data from the FormData object\r\n                                                    //     console.log(\" form data - \", field[data][\"imageData\"])\r\n                                                    //     const blobData = field[data][\"imageData\"].get('image');\r\n                                                    //     return (\r\n                                                    //         <div style={st2.location}><img src={URL.createObjectURL(blobData)} alt=\"Passport\" /></div>\r\n                                                    //     )\r\n                                                    // }\r\n                                                }\r\n                                                else{\r\n                                                    // Convert the base64 string to binary data\r\n                                                    const binaryImageData = atob(data);\r\n                                                    const arrayBuffer = new ArrayBuffer(binaryImageData.length);\r\n                                                    const view = new Uint8Array(arrayBuffer);\r\n                                                    for (let i = 0; i < binaryImageData.length; i++) {\r\n                                                        view[i] = binaryImageData.charCodeAt(i);\r\n                                                    }\r\n                                                    // Create a Blob and generate a URL for displaying the image\r\n                                                    const blob = new Blob([arrayBuffer], { type: 'image/png' });\r\n                                                    return (\r\n                                                        <div style={st2.location}><img src={URL.createObjectURL(blob)} alt=\"Passport\" /></div>\r\n                                                    )\r\n                                                }\r\n\r\n                                            } else {\r\n                                                return (\r\n                                                    <strong><div style={st2.location}>Nothing</div></strong>\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                    </div>\r\n                                )\r\n                            })}\r\n\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n                <Button variant=\"contained\" color=\"primary\" className={classes.button} type=\"submit\" onClick={this.handleSubmit}>\r\n                    Submit Response\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nViewFinalData.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ViewFinalData);"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,UAAU,QAAQ,0BAA0B;AACrD,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,OAAOC,KAAK,MAAM,yBAAyB;AAC3C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,KAAK,MAAM,gBAAgB;AAClC,SAASC,aAAa,EAAEC,MAAM,EAAEC,aAAa,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,MAAM,EAAEC,gBAAgB,EAAEC,kCAAkC,EAAEC,gBAAgB,EAAEC,aAAa,QAAQ,UAAU;AAChM,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,MAAM,GAAGC,KAAK,KAAK;EACrBC,IAAI,EAAE;IACFC,QAAQ,EAAE;EACd,CAAC;EACDC,KAAK,EAAE;IACHC,OAAO,EAAEJ,KAAK,CAACK,OAAO,CAACC,IAAI,GAAG,CAAC;IAC/BC,KAAK,EAAEP,KAAK,CAACQ,OAAO,CAACC,IAAI,CAACC;EAC9B,CAAC;EACDC,UAAU,EAAE;IACR;IACAJ,KAAK,EAAEP,KAAK,CAACQ,OAAO,CAACC,IAAI,CAACC,SAAS;IACnCE,QAAQ,EAAE,UAAU;IACpBC,OAAO,EAAE;EACb,CAAC;EACDC,KAAK,EAAE;IACHC,KAAK,EAAE;EACX;AACJ,CAAC,CAAC;AAEF,MAAMC,aAAa,SAASpC,SAAS,CAAC;EAClCqC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IAAC,KAkDZC,iBAAiB,GAAG,CAACC,CAAC,EAAEC,SAAS,KAAK;MAClCC,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;MACf;MACA,MAAMC,QAAQ,GAAGJ,CAAC,CAACK,MAAM,CAACC,KAAK;MAC/B7B,aAAa,CAACwB,SAAS,EAAEG,QAAQ,CAAC;MAClCF,OAAO,CAACC,GAAG,CAAChC,iBAAiB,CAAC,CAAC,CAAC;IAClC,CAAC;IAAA,KAGHoC,YAAY,GAAIC,KAAK,IAAK;MACtBA,KAAK,CAACC,cAAc,CAAC,CAAC;MAEtB,MAAMC,UAAU,GAAGvC,iBAAiB,CAAC,CAAC;;MAEtC;MACA,MAAMwC,YAAY,GAAGC,MAAM,CAACC,WAAW,CACnCD,MAAM,CAACE,OAAO,CAACJ,UAAU,CAAC,CAACK,MAAM,CAAC,CAAC,CAACC,GAAG,EAAEV,KAAK,CAAC,KAAKA,KAAK,KAAK,IAAI,CACtE,CAAC;;MAED;MACA,IAAIM,MAAM,CAACK,IAAI,CAACN,YAAY,CAAC,CAACO,MAAM,KAAK,CAAC,EAAE;QACxCC,KAAK,CAAC,oBAAoB,CAAC;QAC3B;MACJ;;MAEA;MACApD,KAAK,CAACqD,IAAI,CAAE,oCAAmC,EAAE;QAAEC,SAAS,EAAEV,YAAY;QAAEW,cAAc,EAAEtD,aAAa,CAAC;MAAE,CAAC,CAAC,CACzGuD,IAAI,CAACC,QAAQ,IAAI;QACd;QACAL,KAAK,CAAC,oBAAoB,CAAC;QAC3B/C,aAAa,CAAC,CAAC,CAAC;QAChBC,MAAM,CAAC,CAAC,CAAC;QACTC,gBAAgB,CAAC,CAAC;QAClBC,kCAAkC,CAAC,CAAC;QACpCC,gBAAgB,CAAC,CAAC;QAClBiD,MAAM,CAACC,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC;QAChDF,MAAM,CAACG,aAAa,CAAC,IAAIC,KAAK,CAAC,UAAU,CAAC,CAAC;MAC/C,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACZ;QACA7B,OAAO,CAAC6B,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDZ,KAAK,CAAC,8CAA8C,CAAC;MACzD,CAAC,CAAC;IACV,CAAC;IA5FG,IAAI,CAACa,KAAK,GAAG;MACTC,IAAI,EAAE,EAAE;MACRC,GAAG,EAAE,IAAI;MACTC,GAAG,EAAE,IAAI;MACTC,WAAW,EAAE,IAAI;MACjBC,YAAY,EAAE;IAClB,CAAC;EACL;EAMAC,iBAAiBA,CAAA,EAAG;IAChB,IAAIJ,GAAG,GAAGlE,aAAa,CAAC,CAAC;IACzB,IAAImE,GAAG,GAAGlE,MAAM,CAAC,CAAC;IAClB,IAAI,CAACsE,QAAQ,CAAC;MAAEL,GAAG,EAAEA,GAAG;MAAEC,GAAG,EAAEA;IAAI,CAAC,CAAC;IAErC,MAAMK,GAAG,GAAGf,MAAM,CAACgB,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACzE,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAC/E,IAAI,CAACqE,QAAQ,CAAC;MAAEF,YAAY,EAAEG;IAAI,CAAC,CAAC;;IAEpC;IACAzE,KAAK,CAAC6E,GAAG,CAAC,mBAAmB,GAAGV,GAAG,EAAE;MAAEW,YAAY,EAAE;IAAO,CAAC,CAAC,CACzDtB,IAAI,CAAEC,QAAQ,IAAK;MAChB,MAAMgB,GAAG,GAAGf,MAAM,CAACgB,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACnB,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC;MACjE;MACA,IAAI,CAACM,QAAQ,CAAC;QAAEH,WAAW,EAAEI;MAAI,CAAC,CAAC;IACvC,CAAC,CAAC;IAEN,MAAM9B,UAAU,GAAGvC,iBAAiB,CAAC,CAAC;;IAEtC;IACA,MAAMwC,YAAY,GAAGC,MAAM,CAACC,WAAW,CACnCD,MAAM,CAACE,OAAO,CAACJ,UAAU,CAAC,CAACK,MAAM,CAAC,CAAC,CAACC,GAAG,EAAEV,KAAK,CAAC,KAAKA,KAAK,KAAK,IAAI,CACtE,CAAC;IAEDJ,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEQ,YAAY,CAAC;IAEzC5C,KAAK,CAACqD,IAAI,CAAC,mBAAmB,GAAGc,GAAG,EAAEvB,YAAY,EAAE;MAChDmC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CACGvB,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACe,QAAQ,CAAC;QAAEN,IAAI,EAAET,QAAQ,CAACS;MAAK,CAAC,CAAC;MAAE/B,OAAO,CAACC,GAAG,CAACqB,QAAQ,CAACS,IAAI,CAAC;MAClE;IACJ,CAAC,CAAC;EACV;;EA+CAc,MAAMA,CAAA,EAAG;IACL,MAAM;MAAEC;IAAQ,CAAC,GAAG,IAAI,CAACC,KAAK;IAC9B,oBACItE,OAAA;MAAKuE,SAAS,EAAEF,OAAO,CAAClE,IAAK;MAAAqE,QAAA,gBACzBxE,OAAA,CAACb,IAAI;QAACsF,SAAS;QAACC,IAAI,EAAC,QAAQ;QAACnE,OAAO,EAAE,EAAG;QAAAiE,QAAA,gBACtCxE,OAAA,CAACb,IAAI;UAACwF,IAAI;UAACC,EAAE,EAAE,CAAE;UAAAJ,QAAA,eACbxE,OAAA,CAACd,KAAK;YAACqF,SAAS,EAAEF,OAAO,CAAChE,KAAM;YAAAmE,QAAA,eAC5BxE,OAAA;cAAK6E,GAAG,EAAE,IAAI,CAACxB,KAAK,CAACK,YAAa;cAACa,SAAS,EAAEF,OAAO,CAACrD,KAAM;cAAC8D,GAAG,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACPlF,OAAA,CAACb,IAAI;UAACwF,IAAI;UAACC,EAAE,EAAE,CAAE;UAAAJ,QAAA,eACbxE,OAAA,CAACd,KAAK;YAACqF,SAAS,EAAEF,OAAO,CAACxD,UAAW;YAAA2D,QAAA,gBACjCxE,OAAA;cAAK6E,GAAG,EAAE,IAAI,CAACxB,KAAK,CAACI,WAAY;cAACc,SAAS,EAAEF,OAAO,CAACrD,KAAM;cAAC8D,GAAG,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EAEpE,IAAI,CAAC7B,KAAK,CAACC,IAAI,CAAC6B,GAAG,CAAC,UAAUC,KAAK,EAAE/C,GAAG,EAAE;cAEvC,oBACIrC,OAAA;gBAAAwE,QAAA,EACKvC,MAAM,CAACK,IAAI,CAAC8C,KAAK,CAAC,CAACD,GAAG,CAAC7B,IAAI,IAAI;kBAC5B,MAAM+B,GAAG,GAAG;oBACRC,QAAQ,EAAE;sBACNxE,QAAQ,EAAE,UAAU;sBACpByE,MAAM,EAAE,QAAQ;sBAChB9E,KAAK,EAAE,OAAO;sBACd+E,aAAa,EAAE,OAAO;sBACtBC,IAAI,EAAEL,KAAK,CAAC9B,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG;sBACnCoC,GAAG,EAAEN,KAAK,CAAC9B,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG;oBAC7B;kBACJ,CAAC;kBACD,IAAI8B,KAAK,CAAC9B,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;oBAChC,oBACItD,OAAA;sBAAAwE,QAAA,eAAQxE,OAAA;wBAAK2F,KAAK,EAAEN,GAAG,CAACC,QAAS;wBAAAd,QAAA,eAACxE,OAAA;0BAAO4F,IAAI,EAAC,MAAM;0BAACC,KAAK,EAAC,mBAAmB;0BAAEC,WAAW,EAAExC,IAAK;0BAAC3B,KAAK,EAAE2B,IAAK;0BAC/GyC,QAAQ,EAAG1E,CAAC,IAAK,IAAI,CAACD,iBAAiB,CAACC,CAAC,EAAE+D,KAAK,CAAC9B,IAAI,CAAC,CAAC,OAAO,CAAC;wBAAE;0BAAAyB,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAC;sBAAC;wBAAAH,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAK;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC;kBAE1F,CAAC,MACI,IAAIE,KAAK,CAAC9B,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,WAAW,EAAE;oBAC1C/B,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;oBACxB;oBACA,IAAI8B,IAAI,KAAK,eAAe,EAAE;sBAC1B,IAAI9D,iBAAiB,CAAC,CAAC,CAAC,eAAe,CAAC,YAAYwE,IAAI,EAAE;wBACtD,oBACIhE,OAAA;0BAAK2F,KAAK,EAAEN,GAAG,CAACC,QAAS;0BAAAd,QAAA,eAACxE,OAAA;4BAAK6E,GAAG,EAAEf,GAAG,CAACC,eAAe,CAACvE,iBAAiB,CAAC,CAAC,CAAC,eAAe,CAAC,CAAE;4BAACsF,GAAG,EAAC;0BAAU;4BAAAC,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA,OAAE;wBAAC;0BAAAH,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAK,CAAC;sBAE9H,CAAC,MACI;wBACD;wBACA,MAAMc,eAAe,GAAGC,IAAI,CAACzG,iBAAiB,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;wBAClE,MAAM0G,WAAW,GAAG,IAAIC,WAAW,CAACH,eAAe,CAACzD,MAAM,CAAC;wBAC3D,MAAM6D,IAAI,GAAG,IAAIC,UAAU,CAACH,WAAW,CAAC;wBACxC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,eAAe,CAACzD,MAAM,EAAE+D,CAAC,EAAE,EAAE;0BAC7CF,IAAI,CAACE,CAAC,CAAC,GAAGN,eAAe,CAACO,UAAU,CAACD,CAAC,CAAC;wBAC3C;wBACA;wBACA,MAAME,IAAI,GAAG,IAAIxC,IAAI,CAAC,CAACkC,WAAW,CAAC,EAAE;0BAAEN,IAAI,EAAE;wBAAY,CAAC,CAAC;wBAC3D,oBACI5F,OAAA;0BAAK2F,KAAK,EAAEN,GAAG,CAACC,QAAS;0BAAAd,QAAA,eAACxE,OAAA;4BAAK6E,GAAG,EAAEf,GAAG,CAACC,eAAe,CAACyC,IAAI,CAAE;4BAAC1B,GAAG,EAAC;0BAAU;4BAAAC,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA,OAAE;wBAAC;0BAAAH,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAK,CAAC;sBAE9F;sBACA;sBACA;sBACA;sBACA;sBACA;sBACA;sBACA;sBACA;oBACJ,CAAC,MACG;sBACA;sBACA,MAAMc,eAAe,GAAGC,IAAI,CAAC3C,IAAI,CAAC;sBAClC,MAAM4C,WAAW,GAAG,IAAIC,WAAW,CAACH,eAAe,CAACzD,MAAM,CAAC;sBAC3D,MAAM6D,IAAI,GAAG,IAAIC,UAAU,CAACH,WAAW,CAAC;sBACxC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,eAAe,CAACzD,MAAM,EAAE+D,CAAC,EAAE,EAAE;wBAC7CF,IAAI,CAACE,CAAC,CAAC,GAAGN,eAAe,CAACO,UAAU,CAACD,CAAC,CAAC;sBAC3C;sBACA;sBACA,MAAME,IAAI,GAAG,IAAIxC,IAAI,CAAC,CAACkC,WAAW,CAAC,EAAE;wBAAEN,IAAI,EAAE;sBAAY,CAAC,CAAC;sBAC3D,oBACI5F,OAAA;wBAAK2F,KAAK,EAAEN,GAAG,CAACC,QAAS;wBAAAd,QAAA,eAACxE,OAAA;0BAAK6E,GAAG,EAAEf,GAAG,CAACC,eAAe,CAACyC,IAAI,CAAE;0BAAC1B,GAAG,EAAC;wBAAU;0BAAAC,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAE;sBAAC;wBAAAH,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAK,CAAC;oBAE9F;kBAEJ,CAAC,MAAM;oBACH,oBACIlF,OAAA;sBAAAwE,QAAA,eAAQxE,OAAA;wBAAK2F,KAAK,EAAEN,GAAG,CAACC,QAAS;wBAAAd,QAAA,EAAC;sBAAO;wBAAAO,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAK;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC;kBAEhE;gBACJ,CAAC;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACD,CAAC;YAEd,CAAC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACPlF,OAAA,CAACf,MAAM;QAACwH,OAAO,EAAC,WAAW;QAAChG,KAAK,EAAC,SAAS;QAAC8D,SAAS,EAAEF,OAAO,CAACqC,MAAO;QAACd,IAAI,EAAC,QAAQ;QAACe,OAAO,EAAE,IAAI,CAAC/E,YAAa;QAAA4C,QAAA,EAAC;MAEjH;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAEd;AACJ;AAtMMhE,aAAa,CAYR0F,YAAY,GAAG;EAClBC,MAAM,EAAE9H,SAAS,CAAC+H;AACtB,CAAC;AA0LL5F,aAAa,CAAC6F,SAAS,GAAG;EACtB1C,OAAO,EAAEtF,SAAS,CAAC+H,MAAM,CAACE;AAC9B,CAAC;AAED,eAAehI,UAAU,CAACiB,MAAM,CAAC,CAACiB,aAAa,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}