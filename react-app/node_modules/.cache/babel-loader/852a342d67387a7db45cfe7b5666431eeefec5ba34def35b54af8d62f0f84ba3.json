{"ast":null,"code":"export function isValidDateFormat(input) {\n  // Regular expression to match \"YYYY-MM-DD\" format\n  const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  return regex.test(input);\n}\nexport function isValidDate(input) {\n  const parts = input.split('-');\n  const year = parseInt(parts[0], 10);\n  const month = parseInt(parts[1], 10);\n  const day = parseInt(parts[2], 10);\n  const dateObject = new Date(year, month - 1, day); // Month is 0-indexed\n  if (dateObject.getFullYear() !== year || dateObject.getMonth() !== month - 1 || dateObject.getDate() !== day) {\n    return false; // Invalid date\n  }\n\n  // Check if the input date is not beyond the present day\n  const currentDate = new Date();\n  if (dateObject > currentDate) {\n    return false; // Input date is in the future\n  }\n\n  // Check if the day is within the valid range for the given month\n  const lastDayOfMonth = new Date(year, month, 0).getDate();\n  if (day < 1 || day > lastDayOfMonth) {\n    return false; // Invalid day for the given month\n  }\n\n  return true; // Date is valid\n}\n\nexport function hasOnlyAlphabets(input) {\n  // Check if the input contains any numbers or special characters\n  if (/\\d/.test(input) || /[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\/]/.test(input)) {\n    return false;\n  }\n  return true;\n}\nexport function hasFieldLength(input, fieldLength, hasFixedLength) {\n  // Check if the field is of fixed length or variable\n  if (hasFixedLength) {\n    // Check if the input is of the given fixed length\n    if (input.length !== fieldLength) {\n      return false;\n    }\n  } else {\n    // Check if the input length is within the field's max length\n    if (input.length <= fieldLength) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function hasOnlyDigits(input) {\n  if (!/^\\d+$/.test(input)) {\n    return false;\n  }\n  return true;\n}\nexport function isValidEmailFormat(input) {\n  if (!/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/.test(input)) {\n    return false;\n  }\n  return true;\n}\nexport function toTitle(input) {\n  const words = input.split(' ');\n  const capitalizedWords = words.map(word => {\n    if (word.length > 0) {\n      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    }\n    return word;\n  });\n  const formattedName = capitalizedWords.join(' ');\n  return formattedName;\n}\nexport function isValidPhoneNumberFormat(input) {\n  if (input.length !== 10 || !/^\\d+$/.test(input)) {\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["isValidDateFormat","input","regex","test","isValidDate","parts","split","year","parseInt","month","day","dateObject","Date","getFullYear","getMonth","getDate","currentDate","lastDayOfMonth","hasOnlyAlphabets","hasFieldLength","fieldLength","hasFixedLength","length","hasOnlyDigits","isValidEmailFormat","toTitle","words","capitalizedWords","map","word","charAt","toUpperCase","slice","toLowerCase","formattedName","join","isValidPhoneNumberFormat"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/validate.js"],"sourcesContent":["export function isValidDateFormat(input) {\r\n    // Regular expression to match \"YYYY-MM-DD\" format\r\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n    return regex.test(input);\r\n}\r\n\r\nexport function isValidDate(input) {\r\n    const parts = input.split('-');\r\n    const year = parseInt(parts[0], 10);\r\n    const month = parseInt(parts[1], 10);\r\n    const day = parseInt(parts[2], 10);\r\n    const dateObject = new Date(year, month - 1, day); // Month is 0-indexed\r\n    if (\r\n        dateObject.getFullYear() !== year ||\r\n        dateObject.getMonth() !== month - 1 ||\r\n        dateObject.getDate() !== day\r\n    ) {\r\n        return false; // Invalid date\r\n    }\r\n\r\n    // Check if the input date is not beyond the present day\r\n    const currentDate = new Date();\r\n    if (dateObject > currentDate) {\r\n        return false; // Input date is in the future\r\n    }\r\n\r\n    // Check if the day is within the valid range for the given month\r\n    const lastDayOfMonth = new Date(year, month, 0).getDate();\r\n    if (day < 1 || day > lastDayOfMonth) {\r\n        return false; // Invalid day for the given month\r\n    }\r\n\r\n    return true; // Date is valid\r\n}\r\n\r\nexport function hasOnlyAlphabets(input) {\r\n    // Check if the input contains any numbers or special characters\r\n    if (/\\d/.test(input) || /[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\/]/.test(input)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function hasFieldLength(input, fieldLength, hasFixedLength) {\r\n    // Check if the field is of fixed length or variable\r\n    if (hasFixedLength) {\r\n        // Check if the input is of the given fixed length\r\n        if (input.length !== fieldLength) {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        // Check if the input length is within the field's max length\r\n        if (input.length <= fieldLength) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function hasOnlyDigits(input) {\r\n    if (!/^\\d+$/.test(input)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function isValidEmailFormat(input) {\r\n    if (!/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/.test(input)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function toTitle(input) {\r\n    const words = input.split(' ');\r\n    const capitalizedWords = words.map((word) => {\r\n        if (word.length > 0) {\r\n            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n        }\r\n        return word;\r\n    });\r\n    const formattedName = capitalizedWords.join(' ');\r\n    return formattedName;\r\n}\r\n\r\nexport function isValidPhoneNumberFormat(input) {\r\n    if (input.length !== 10 || !/^\\d+$/.test(input)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}