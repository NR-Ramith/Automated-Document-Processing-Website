{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\react-app\\\\src\\\\components\\\\Menu.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Menu.css';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport UploadForm from './UploadForm';\nimport { getStateValue, getTemplateId, setFieldValue, setFilledMandatoryFieldIndicator, setStateValue, getAllFieldValues } from './values';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Menu = () => {\n  _s();\n  const [processedImageBlob, setProcessedImageBlob] = useState(null);\n  const [processedImageURL, setProcessedImageURL] = useState(null);\n  const [backgroundColor, setBackgroundColor] = useState('white');\n  const [isLoading, setIsLoading] = useState(false); // New loading state\n  const navigate = useNavigate();\n  const fileInputRef = useRef(null);\n  let selectedFormId = getTemplateId();\n  const location = useLocation();\n  useEffect(() => {\n    if (!getStateValue('fetchedQuestions')) {\n      // Fetch questions when the component mounts or when selectedFormId changes\n      if (location.state && location.state.selectedFormId) {\n        const formId = location.state.selectedFormId;\n        selectedFormId = formId;\n        axios.get(`http://localhost:3001/getQuestions/${formId}`).then(response => {\n          setStateValue('questions', response.data);\n          for (let i = 0; i < response.data.length; i++) {\n            const qesDictionary = response.data[i];\n            setFieldValue(qesDictionary.field, null);\n            if (qesDictionary.mandatory) setFilledMandatoryFieldIndicator(qesDictionary.field, 0);\n          }\n          setStateValue('fetchedQuestions', 1);\n        }).catch(error => {\n          // Handle errors, e.g., questions not found for the selected form ID\n          console.error('Error fetching questions:', error);\n        });\n      }\n    }\n  }, [location.state]);\n  const handleImageUpload = async imageData => {\n    if (imageData && !isLoading) {\n      setIsLoading(true); // Set loading state to true when processing starts\n\n      try {\n        const response = await fetch('http://localhost:5000/processImage', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            imageData,\n            backgroundColor\n          }) // Assuming imageData is a base64-encoded image\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const blob = await response.blob();\n\n        // Check if the Blob has a valid type (e.g., image/jpeg, image/png)\n        if (blob.type.startsWith('image/')) {\n          // Create a Blob URL for the image\n          setProcessedImageBlob(blob);\n          const imageUrl = URL.createObjectURL(blob);\n          setProcessedImageURL(imageUrl);\n        } else {\n          console.error('Invalid Blob type:', blob.type);\n          // Handle the case where the Blob is not a valid image\n        }\n      } catch (error) {\n        console.error('Error fetching image:', error);\n        // Handle the fetch error here\n      } finally {\n        setIsLoading(false); // Set loading state to false when processing is complete\n      }\n    } else {\n      alert('Upload Image');\n    }\n  };\n  const handleBackgroundChange = e => {\n    setBackgroundColor(e.target.value);\n  };\n  const handleButtonClick = () => {\n    navigate('/chatbot', {\n      state: {\n        selectedFormId: selectedFormId\n      }\n    });\n  };\n  const handleScanFormClick = () => {\n    navigate('/getdata');\n  };\n  const handleImageSubmit = async () => {\n    if (processedImageBlob) {\n      setIsLoading(true);\n      try {\n        // const formData = new FormData();\n        // formData.append('image', processedImageBlob);\n\n        // const response = await fetch('http://localhost:5000/uploadImage', {\n        //     method: 'POST',\n        //     body: formData,\n        // });\n\n        // if (!response.ok) {\n        //     throw new Error(`HTTP error! Status: ${response.status}`);\n        // }\n\n        // console.log('Image uploaded successfully');\n\n        setFieldValue('passportImage', processedImageBlob);\n\n        // Reset the file input value to clear the selected file\n        fileInputRef.current.value = '';\n\n        // Reset the processedImageBlob and URL after upload\n        setProcessedImageBlob(null);\n        setProcessedImageURL(null);\n      } catch (error) {\n        console.error('Error uploading image:', error);\n        // Handle the fetch error here\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  const handleSubmit = () => {\n    const qes = getStateValue('questions');\n    const allFieldValues = getAllFieldValues();\n    for (let i = 0; i < qes.length; i++) {\n      if (qes[i].mandatory === 'true') {\n        console.log(qes[i]);\n        if (!allFieldValues[qes[i].field]) {\n          alert('Fill all the mandatory fields.');\n          return;\n        }\n      }\n    }\n    navigate('/viewfinaldata');\n  };\n  const goBack = () => {\n    navigate('/formsList');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goBack,\n      className: \"back-button\",\n      children: \"< Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"menu-title\",\n        children: \"Image Processing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"background-dropdown-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"background-dropdown-label\",\n          children: \"Background color\\xA0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"background-dropdown\",\n          value: backgroundColor,\n          onChange: handleBackgroundChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"white\",\n            children: \"Choose...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"white\",\n            children: \"White\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"blue\",\n            children: \"Blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"background-dropdown-label\",\n          children: \"Image size\\xA0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"background-dropdown\",\n          value: backgroundColor,\n          onChange: handleBackgroundChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"white\",\n            children: \"Choose...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"blue\",\n            children: \"Blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UploadForm, {\n        onImageUpload: handleImageUpload,\n        fileInputRef: fileInputRef,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this) : processedImageURL ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processed-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Processed Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"processed-image\",\n          src: processedImageURL,\n          alt: \"Processed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleImageSubmit,\n          className: \"submit-button\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleScanFormClick,\n      className: \"scan-form-button\",\n      children: \"Scan Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-application\",\n      children: \"Don't have the filled application form?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      className: \"chatbot-button\",\n      children: \"Try ChatBot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      className: \"submit-button\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n};\n_s(Menu, \"u2G5XwoSNhcXSafz4jSx/sUBaIw=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Menu;\nexport default Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","useNavigate","useLocation","UploadForm","getStateValue","getTemplateId","setFieldValue","setFilledMandatoryFieldIndicator","setStateValue","getAllFieldValues","jsxDEV","_jsxDEV","Menu","_s","processedImageBlob","setProcessedImageBlob","processedImageURL","setProcessedImageURL","backgroundColor","setBackgroundColor","isLoading","setIsLoading","navigate","fileInputRef","selectedFormId","location","state","formId","get","then","response","data","i","length","qesDictionary","field","mandatory","catch","error","console","handleImageUpload","imageData","fetch","method","headers","body","JSON","stringify","ok","Error","status","blob","type","startsWith","imageUrl","URL","createObjectURL","alert","handleBackgroundChange","e","target","value","handleButtonClick","handleScanFormClick","handleImageSubmit","current","handleSubmit","qes","allFieldValues","log","goBack","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onImageUpload","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/react-app/src/components/Menu.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Menu.css';\r\nimport axios from 'axios';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport UploadForm from './UploadForm';\r\nimport { getStateValue, getTemplateId, setFieldValue, setFilledMandatoryFieldIndicator, setStateValue, getAllFieldValues } from './values';\r\n\r\nconst Menu = () => {\r\n    const [processedImageBlob, setProcessedImageBlob] = useState(null);\r\n    const [processedImageURL, setProcessedImageURL] = useState(null);\r\n    const [backgroundColor, setBackgroundColor] = useState('white');\r\n    const [isLoading, setIsLoading] = useState(false); // New loading state\r\n    const navigate = useNavigate();\r\n    const fileInputRef = useRef(null);\r\n    let selectedFormId = getTemplateId();\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        if (!getStateValue('fetchedQuestions')) {\r\n            // Fetch questions when the component mounts or when selectedFormId changes\r\n            if (location.state && location.state.selectedFormId) {\r\n                const formId = location.state.selectedFormId;\r\n                selectedFormId = formId;\r\n\r\n                axios.get(`http://localhost:3001/getQuestions/${formId}`)\r\n                    .then((response) => {\r\n                        setStateValue('questions', response.data);\r\n\r\n                        for (let i = 0; i < response.data.length; i++) {\r\n                            const qesDictionary = response.data[i];\r\n                            setFieldValue(qesDictionary.field, null);\r\n                            if (qesDictionary.mandatory)\r\n                                setFilledMandatoryFieldIndicator(qesDictionary.field, 0);\r\n                        }\r\n                        setStateValue('fetchedQuestions', 1);\r\n                    })\r\n                    .catch((error) => {\r\n                        // Handle errors, e.g., questions not found for the selected form ID\r\n                        console.error('Error fetching questions:', error);\r\n                    });\r\n            }\r\n        }\r\n    }, [location.state]);\r\n\r\n    const handleImageUpload = async (imageData) => {\r\n        if (imageData && !isLoading) {\r\n            setIsLoading(true); // Set loading state to true when processing starts\r\n\r\n            try {\r\n                const response = await fetch('http://localhost:5000/processImage', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ imageData, backgroundColor }), // Assuming imageData is a base64-encoded image\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! Status: ${response.status}`);\r\n                }\r\n\r\n                const blob = await response.blob();\r\n\r\n                // Check if the Blob has a valid type (e.g., image/jpeg, image/png)\r\n                if (blob.type.startsWith('image/')) {\r\n                    // Create a Blob URL for the image\r\n                    setProcessedImageBlob(blob);\r\n                    const imageUrl = URL.createObjectURL(blob);\r\n                    setProcessedImageURL(imageUrl);\r\n                } else {\r\n                    console.error('Invalid Blob type:', blob.type);\r\n                    // Handle the case where the Blob is not a valid image\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching image:', error);\r\n                // Handle the fetch error here\r\n            } finally {\r\n                setIsLoading(false); // Set loading state to false when processing is complete\r\n            }\r\n        } else {\r\n            alert('Upload Image');\r\n        }\r\n    };\r\n\r\n    const handleBackgroundChange = (e) => {\r\n        setBackgroundColor(e.target.value);\r\n    };\r\n\r\n    const handleButtonClick = () => {\r\n        navigate('/chatbot', { state: { selectedFormId: selectedFormId } });\r\n    };\r\n\r\n    const handleScanFormClick = () => {\r\n        navigate('/getdata');\r\n    };\r\n\r\n    const handleImageSubmit = async () => {\r\n        if (processedImageBlob) {\r\n            setIsLoading(true);\r\n\r\n            try {\r\n                // const formData = new FormData();\r\n                // formData.append('image', processedImageBlob);\r\n\r\n                // const response = await fetch('http://localhost:5000/uploadImage', {\r\n                //     method: 'POST',\r\n                //     body: formData,\r\n                // });\r\n\r\n                // if (!response.ok) {\r\n                //     throw new Error(`HTTP error! Status: ${response.status}`);\r\n                // }\r\n\r\n                // console.log('Image uploaded successfully');\r\n\r\n                setFieldValue('passportImage', processedImageBlob);\r\n\r\n                // Reset the file input value to clear the selected file\r\n                fileInputRef.current.value = '';\r\n\r\n                // Reset the processedImageBlob and URL after upload\r\n                setProcessedImageBlob(null);\r\n                setProcessedImageURL(null);\r\n            } catch (error) {\r\n                console.error('Error uploading image:', error);\r\n                // Handle the fetch error here\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        const qes = getStateValue('questions');\r\n        const allFieldValues = getAllFieldValues();\r\n        for (let i = 0; i < qes.length; i++) {\r\n            if (qes[i].mandatory === 'true') {\r\n                console.log(qes[i])\r\n                if (!allFieldValues[qes[i].field]) {\r\n                    alert('Fill all the mandatory fields.');\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        navigate('/viewfinaldata');\r\n    };\r\n\r\n    const goBack = () => {\r\n        navigate('/formsList');\r\n    };\r\n\r\n    return (\r\n        <div className=\"menu-container\">\r\n            <button onClick={goBack} className=\"back-button\">&lt; Back</button>\r\n            <div className=\"menu-content\">\r\n                <h1 className=\"menu-title\">Image Processing</h1>\r\n                <h5>Upload Image</h5>\r\n                <div className=\"background-dropdown-container\">\r\n                    <label className=\"background-dropdown-label\">Background color&nbsp;</label>\r\n                    <select\r\n                        className=\"background-dropdown\"\r\n                        value={backgroundColor}\r\n                        onChange={handleBackgroundChange}\r\n                    >\r\n                        <option value=\"white\">Choose...</option>\r\n                        <option value=\"white\">White</option>\r\n                        <option value=\"blue\">Blue</option>\r\n                    </select>\r\n                    <label className=\"background-dropdown-label\">Image size&nbsp;</label>\r\n                    <select\r\n                        className=\"background-dropdown\"\r\n                        value={backgroundColor}\r\n                        onChange={handleBackgroundChange}\r\n                    >\r\n                        <option value=\"white\">Choose...</option>\r\n                        <option value=\"white\"></option>\r\n                        <option value=\"blue\">Blue</option>\r\n                    </select>\r\n                </div>\r\n                <UploadForm onImageUpload={handleImageUpload} fileInputRef={fileInputRef} isLoading={isLoading} />\r\n                {isLoading ? (\r\n                    <div className=\"loading-spinner-container\">\r\n                        <div className=\"loading-spinner\"></div>\r\n                    </div>\r\n                ) : processedImageURL ? (\r\n                    <div className=\"processed-image-container\">\r\n                        <h2>Processed Image</h2>\r\n                        <img className=\"processed-image\" src={processedImageURL} alt=\"Processed\" />\r\n                        <button onClick={handleImageSubmit} className=\"submit-button\">Submit</button>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n            <button onClick={handleScanFormClick} className=\"scan-form-button\">Scan Form</button>\r\n            <p className=\"no-application\">Don't have the filled application form?</p>\r\n            <button onClick={handleButtonClick} className=\"chatbot-button\">Try ChatBot</button>\r\n            <button onClick={handleSubmit} className=\"submit-button\">Submit</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}