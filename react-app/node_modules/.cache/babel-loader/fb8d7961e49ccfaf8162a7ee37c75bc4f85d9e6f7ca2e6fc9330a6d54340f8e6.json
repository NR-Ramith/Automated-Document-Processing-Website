{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport questions from \"./questions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [name, setName] = useState(null);\n  const [personalNumber, setPersonalNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [fatherName, setFatherName] = useState('');\n  const [fatherNumber, setFatherNumber] = useState('');\n  const [motherName, setMotherName] = useState('');\n  const [motherNumber, setMotherNumber] = useState('');\n  const [guardianName, setGuardianName] = useState('');\n  const [guardianNumber, setGuardianNumber] = useState('');\n  const [dob, setDob] = useState('');\n  const [date, setDate] = useState('');\n  const [address, setAddress] = useState('');\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [nationality, setNationality] = useState('');\n  const [pinCode, setPinCode] = useState('');\n  const [voiceInput, setVoiceInput] = useState('');\n  const inputRef = useRef(null);\n  const [userInputs, setUserInputs] = useState([]);\n  const [familyIncome, setFamilyIncome] = useState('');\n  const location = useLocation();\n  let selectedFormId = null;\n  if (location !== null) {\n    selectedFormId = location.state.selectedFormId;\n    console.log(selectedFormId);\n  }\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const readOutText = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  function validateAndFormatName(input) {\n    // Check if the name contains numbers or special characters\n    if (/\\d/.test(input) || /[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\/]/.test(input)) {\n      return {\n        isValid: false,\n        formattedName: null\n      };\n    }\n\n    // Capitalize the first letter of every word\n    const words = input.split(' ');\n    const capitalizedWords = words.map(word => {\n      if (word.length > 0) {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n      }\n      return word;\n    });\n    const formattedName = capitalizedWords.join(' ');\n    return {\n      isValid: true,\n      formattedName\n    };\n  }\n  function isValidDateFormat(input) {\n    // Regular expression to match \"YYYY-MM-DD\" format\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(input);\n  }\n  function isValidDate(year, month, day) {\n    const dateObject = new Date(year, month - 1, day); // Month is 0-indexed\n    if (dateObject.getFullYear() !== year || dateObject.getMonth() !== month - 1 || dateObject.getDate() !== day) {\n      return false; // Invalid date\n    }\n\n    // Check if the input date is not beyond the present day\n    const currentDate = new Date();\n    if (dateObject > currentDate) {\n      return false; // Input date is in the future\n    }\n\n    // Check if the day is within the valid range for the given month\n    const lastDayOfMonth = new Date(year, month, 0).getDate();\n    if (day < 1 || day > lastDayOfMonth) {\n      return false; // Invalid day for the given month\n    }\n\n    return true; // Date is valid\n  }\n\n  const handleUserInput = async event => {\n    event.preventDefault();\n    // console.log('Handle User Input');\n    // console.log('Data:', { name, address, dob });\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    // Remove trailing full stop if it exists\n    userInput = userInput.replace(/\\.$/, '');\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\n    let updatedMessages = [];\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\n\n    if (userInput === \"\") {\n      // If field is mandatory\n      if (currentQuestion.field === 'name' || currentQuestion.field === 'personalNumber') {\n        const mandatoryMessage = {\n          text: 'This field is required.'\n        };\n        setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\n        readOutText(mandatoryMessage.text);\n        return;\n      }\n      if (currentQuestion.field === 'familyIncome') {\n        if (familyIncome === '') {\n          const mandatoryMessage = {\n            text: 'Please select an option.',\n            isUser: false\n          };\n          setMessages([...messages, mandatoryMessage]);\n          readOutText(mandatoryMessage.text);\n          return;\n        }\n        // userInput=familyIncome;\n        // console.log(familyIncome);\n        // const familyIncomeMessage = { text: 'yes', isUser: true };\n        // setMessages(prevMessages => [...prevMessages, familyIncomeMessage]);\n        // setMessages([...messages, familyIncomeMessage]);\n        // readOutText(familyIncomeMessage.text);\n        // console.log(messages)\n        // setVoiceInput('');\n        // setUserInputs((prevUserInputs) => [...prevUserInputs, { familyIncome }]);\n      }\n      // If user input is empty, just move to the next question\n      if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\n        const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\n        const nextQuestionMessage = {\n          text: nextQuestion.text,\n          isUser: false\n        };\n        setMessages([...messages, nextQuestionMessage]);\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n        readOutText(nextQuestion.text);\n      } else {\n        // Conversation ended, you can handle this however you want\n        const endMessage = {\n          text: 'Thank you for the conversation!\\n Enter your Name',\n          isUser: false\n        };\n        setMessages([...updatedMessages, endMessage]);\n        setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n        readOutText(endMessage.text);\n      }\n      return; // Skip further processing\n    }\n\n    // Validation and formatting for name fields\n    if (currentQuestion.field === 'name' || currentQuestion.field === 'fatherName' || currentQuestion.field === 'motherName' || currentQuestion.field === 'guardianName' || currentQuestion.field === 'city' || currentQuestion.field === 'state' || currentQuestion.field === 'nationality') {\n      const {\n        isValid,\n        formattedName\n      } = validateAndFormatName(userInput);\n      if (!isValid) {\n        const invalidMessage = \"Invalid Name. Please enter a valid name with no numbers and special characters.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n\n      userInput = formattedName; // Use the formatted name\n    }\n\n    // Validation for number\n    if (currentQuestion.field === 'personalNumber') {\n      if (userInput.length !== 10 || !/^\\d+$/.test(userInput)) {\n        const invalidMessage = \"Invalid Number. Please enter a 10-digit numeric number.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n    }\n\n    // Validation for email\n    if (currentQuestion.field === 'email') {\n      if (!/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/.test(userInput)) {\n        const invalidMessage = \"Invalid Email. Please enter a valid email address.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n    }\n\n    // Validation for pinCode\n    if (currentQuestion.field === 'pinCode') {\n      if (userInput.length !== 6 || !/^\\d+$/.test(userInput)) {\n        const invalidMessage = \"Invalid Pin Code. Please enter a 6-digit numeric number.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n    }\n\n    // Validation for dates\n    if (currentQuestion.field === 'date' || currentQuestion.field === 'dob') {\n      if (!isValidDateFormat(userInput)) {\n        const invalidMessage = \"Invalid Date Format. Please use YYYY-MM-DD format.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n      // Check if the date is a valid date\n      const parts = userInput.split('-');\n      const year = parseInt(parts[0], 10);\n      const month = parseInt(parts[1], 10);\n      const day = parseInt(parts[2], 10);\n      if (!isValidDate(year, month, day)) {\n        const invalidMessage = \"Invalid Date. Please enter a valid calendar date.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: true\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n    }\n\n    // Capture the user's input for the current field\n    switch (currentQuestion.field) {\n      case 'name':\n        setName(userInput);\n        break;\n      case 'personalNumber':\n        setPersonalNumber(userInput);\n        break;\n      case 'email':\n        setEmail(userInput);\n        break;\n      case 'fatherName':\n        setFatherName(userInput);\n        break;\n      case 'fatherNumber':\n        setFatherNumber(userInput);\n        break;\n      case 'motherName':\n        setMotherName(userInput);\n        break;\n      case 'motherNumber':\n        setMotherNumber(userInput);\n        break;\n      case 'guardianName':\n        setGuardianName(userInput);\n        break;\n      case 'guardianNumber':\n        setGuardianNumber(userInput);\n        break;\n      case 'dob':\n        setDob(userInput);\n        break;\n      case 'date':\n        setDate(userInput);\n        break;\n      case 'address':\n        setAddress(userInput);\n        break;\n      case 'city':\n        setCity(userInput);\n        break;\n      case 'state':\n        setState(userInput);\n        break;\n      case 'nationality':\n        setNationality(userInput);\n        break;\n      case 'pinCode':\n        setPinCode(userInput);\n        break;\n      default:\n        break;\n    }\n\n    // Add the user's input to the messages\n    updatedMessages = [...messages, {\n      text: userInput,\n      isUser: true\n    }];\n    setMessages(updatedMessages);\n    setVoiceInput('');\n\n    // Move to the next field or end the conversation\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\n      // Ask the next question\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n      setMessages([...updatedMessages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n\n      // Read out the next question\n      readOutText(nextQuestion.text);\n    } else {\n      // Conversation ended, you can handle this however you want\n      const endMessage = {\n        text: 'Thank you for the conversation!\\n Enter your Name',\n        isUser: false\n      };\n      setMessages([...updatedMessages, endMessage]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n      readOutText(endMessage.text);\n    }\n  };\n\n  // Use useEffect to capture the updated dob value before sending it to the server\n  useEffect(() => {\n    if (dob) {\n      // Capture the updated dob value\n      const updatedDob = dob;\n\n      // Send the user input to the server\n      const sendUserInput = async () => {\n        // Define the fields and their corresponding values\n        const fields = {\n          name,\n          personalNumber,\n          email,\n          fatherName,\n          fatherNumber,\n          motherName,\n          motherNumber,\n          guardianName,\n          guardianNumber,\n          date,\n          address,\n          city,\n          state,\n          nationality,\n          pinCode,\n          dob: updatedDob\n        };\n\n        // Prepare the user input data by filtering out empty fields\n        const userInputData = {};\n        for (const [key, value] of Object.entries(fields)) {\n          if (value !== null && value !== undefined && value !== '') {\n            userInputData[key] = value;\n          }\n        }\n        try {\n          await axios.post('http://localhost:3001/save', {\n            userInput: userInputData\n          });\n          console.log('User input saved successfully');\n\n          // Add the user inputs to the userInputs array\n          const newInput = userInputData;\n          setUserInputs(prevUserInputs => [...prevUserInputs, newInput]);\n\n          // Clear the input fields\n          setName('');\n          setAddress('');\n          setDob('');\n        } catch (error) {\n          console.error('Failed to save user input:', error);\n        }\n      };\n      sendUserInput();\n    }\n  }, [dob]);\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n    readOutText(currentQuestion.text); // Read out the initial question\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      className: \"chat-window\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isUser ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this)), userInputs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Collected Inputs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }, this), userInputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [input.name && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 38\n            }, this), \" \", input.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 17\n          }, this), input.personalNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Personal Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 48\n            }, this), \" \", input.personalNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 17\n          }, this), input.email && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Email:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 39\n            }, this), \" \", input.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 17\n          }, this), input.fatherName && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Father's Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 44\n            }, this), \" \", input.fatherName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 38\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 17\n          }, this), input.fatherNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Father's Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 46\n            }, this), \" \", input.fatherNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 17\n          }, this), input.motherName && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Mother's Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 44\n            }, this), \" \", input.motherName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 38\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 17\n          }, this), input.motherNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Mother's Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 46\n            }, this), \" \", input.motherNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 17\n          }, this), input.guardianName && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Guardian's Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 46\n            }, this), \" \", input.guardianName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 17\n          }, this), input.guardianNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Guardian's Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 48\n            }, this), \" \", input.guardianNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 17\n          }, this), input.dob && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date of Birth:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 37\n            }, this), \" \", input.dob]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 17\n          }, this), input.date && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 38\n            }, this), \" \", input.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 17\n          }, this), input.address && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Address:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 41\n            }, this), \" \", input.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 17\n          }, this), input.city && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"City:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 38\n            }, this), \" \", input.city]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 17\n          }, this), input.state && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"State:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 39\n            }, this), \" \", input.state]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 17\n          }, this), input.nationality && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Nationality:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 45\n            }, this), \" \", input.nationality]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 17\n          }, this), input.pinCode && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"PIN Code:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 41\n            }, this), \" \", input.pinCode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 11\n      }, this), questions[selectedFormId][currentQuestionIndex].options ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-options\",\n        children: questions[selectedFormId][currentQuestionIndex].options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-option\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: option.value,\n            name: option.value,\n            checked: familyIncome === option.value,\n            onChange: () => {\n              setFamilyIncome(option.value);\n              const familyIncomeMessage = {\n                text: option.value,\n                isUser: true\n              };\n              setMessages([...messages, familyIncomeMessage]);\n              readOutText(familyIncomeMessage.text);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: option.value,\n            children: option.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 17\n          }, this)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        value: voiceInput,\n        onChange: e => setVoiceInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recognition\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startVoiceRecognition,\n        children: \"Start Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopVoiceRecognition,\n        children: \"Stop Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"9YKJPgbX6gj6xQ2ji2MhHI7tMyE=\", false, function () {\n  return [useLocation];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useLocation","questions","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","currentQuestionIndex","setCurrentQuestionIndex","name","setName","personalNumber","setPersonalNumber","email","setEmail","fatherName","setFatherName","fatherNumber","setFatherNumber","motherName","setMotherName","motherNumber","setMotherNumber","guardianName","setGuardianName","guardianNumber","setGuardianNumber","dob","setDob","date","setDate","address","setAddress","city","setCity","state","setState","nationality","setNationality","pinCode","setPinCode","voiceInput","setVoiceInput","inputRef","userInputs","setUserInputs","familyIncome","setFamilyIncome","location","selectedFormId","console","log","handleVoiceInput","event","transcript","results","handleVoiceError","error","readOutText","text","utterance","SpeechSynthesisUtterance","window","speechSynthesis","speak","startVoiceRecognition","SpeechRecognition","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","validateAndFormatName","input","test","isValid","formattedName","words","split","capitalizedWords","map","word","length","charAt","toUpperCase","slice","toLowerCase","join","isValidDateFormat","regex","isValidDate","year","month","day","dateObject","Date","getFullYear","getMonth","getDate","currentDate","lastDayOfMonth","handleUserInput","preventDefault","userInput","current","value","replace","currentQuestion","updatedMessages","trim","field","mandatoryMessage","prevMessages","isUser","nextQuestion","nextQuestionMessage","endMessage","invalidMessage","invalidMessageObj","parts","parseInt","updatedDob","sendUserInput","fields","userInputData","key","Object","entries","undefined","post","newInput","prevUserInputs","chatWindow","document","getElementById","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","message","index","options","option","type","checked","onChange","familyIncomeMessage","htmlFor","label","onSubmit","ref","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport axios from 'axios';\r\nimport { useLocation } from 'react-router-dom';\r\nimport questions from \"./questions\";\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [name, setName] = useState(null);\r\n  const [personalNumber, setPersonalNumber] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [fatherName, setFatherName] = useState('');\r\n  const [fatherNumber, setFatherNumber] = useState('');\r\n  const [motherName, setMotherName] = useState('');\r\n  const [motherNumber, setMotherNumber] = useState('');\r\n  const [guardianName, setGuardianName] = useState('');\r\n  const [guardianNumber, setGuardianNumber] = useState('');\r\n  const [dob, setDob] = useState('');\r\n  const [date, setDate] = useState('');\r\n  const [address, setAddress] = useState('');\r\n  const [city, setCity] = useState('');\r\n  const [state, setState] = useState('');\r\n  const [nationality, setNationality] = useState('');\r\n  const [pinCode, setPinCode] = useState('');\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const inputRef = useRef(null);\r\n  const [userInputs, setUserInputs] = useState([]);\r\n  const [familyIncome, setFamilyIncome] = useState('');\r\n\r\n\r\n  const location = useLocation();\r\n  let selectedFormId = null;\r\n  if (location !== null) {\r\n    selectedFormId = location.state.selectedFormId;\r\n    console.log(selectedFormId);\r\n  }\r\n\r\n  \r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const readOutText = (text) => {\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n  function validateAndFormatName(input) {\r\n    // Check if the name contains numbers or special characters\r\n    if (/\\d/.test(input) || /[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\/]/.test(input)) {\r\n      return { isValid: false, formattedName: null };\r\n    }\r\n\r\n    // Capitalize the first letter of every word\r\n    const words = input.split(' ');\r\n    const capitalizedWords = words.map((word) => {\r\n      if (word.length > 0) {\r\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n      }\r\n      return word;\r\n    });\r\n\r\n    const formattedName = capitalizedWords.join(' ');\r\n\r\n    return { isValid: true, formattedName };\r\n  }\r\n\r\n  function isValidDateFormat(input) {\r\n    // Regular expression to match \"YYYY-MM-DD\" format\r\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n\r\n    return regex.test(input);\r\n  }\r\n\r\n  function isValidDate(year, month, day) {\r\n    const dateObject = new Date(year, month - 1, day); // Month is 0-indexed\r\n    if (\r\n      dateObject.getFullYear() !== year ||\r\n      dateObject.getMonth() !== month - 1 ||\r\n      dateObject.getDate() !== day\r\n    ) {\r\n      return false; // Invalid date\r\n    }\r\n\r\n    // Check if the input date is not beyond the present day\r\n    const currentDate = new Date();\r\n    if (dateObject > currentDate) {\r\n      return false; // Input date is in the future\r\n    }\r\n\r\n    // Check if the day is within the valid range for the given month\r\n    const lastDayOfMonth = new Date(year, month, 0).getDate();\r\n    if (day < 1 || day > lastDayOfMonth) {\r\n      return false; // Invalid day for the given month\r\n    }\r\n\r\n    return true; // Date is valid\r\n  }\r\n\r\n  const handleUserInput = async (event) => {\r\n    event.preventDefault();\r\n    // console.log('Handle User Input');\r\n    // console.log('Data:', { name, address, dob });\r\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    // Remove trailing full stop if it exists\r\n    userInput = userInput.replace(/\\.$/, '');\r\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\r\n    let updatedMessages = [];\r\n\r\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\r\n\r\n    if (userInput === \"\") {\r\n      // If field is mandatory\r\n      if (currentQuestion.field === 'name' || currentQuestion.field === 'personalNumber') {\r\n        const mandatoryMessage = {\r\n          text: 'This field is required.',\r\n        };\r\n        setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\r\n        readOutText(mandatoryMessage.text);\r\n        return;\r\n      }\r\n      if (currentQuestion.field === 'familyIncome') {\r\n        if (familyIncome==='') {\r\n          const mandatoryMessage = {\r\n            text: 'Please select an option.',\r\n            isUser: false,\r\n          };\r\n          setMessages([...messages, mandatoryMessage]);\r\n          readOutText(mandatoryMessage.text);\r\n          return;\r\n        }\r\n        // userInput=familyIncome;\r\n        // console.log(familyIncome);\r\n        // const familyIncomeMessage = { text: 'yes', isUser: true };\r\n        // setMessages(prevMessages => [...prevMessages, familyIncomeMessage]);\r\n        // setMessages([...messages, familyIncomeMessage]);\r\n        // readOutText(familyIncomeMessage.text);\r\n        // console.log(messages)\r\n        // setVoiceInput('');\r\n        // setUserInputs((prevUserInputs) => [...prevUserInputs, { familyIncome }]);\r\n      }\r\n      // If user input is empty, just move to the next question\r\n      if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\r\n        const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\r\n        const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n        setMessages([...messages, nextQuestionMessage]);\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        readOutText(nextQuestion.text);\r\n      } else {\r\n        // Conversation ended, you can handle this however you want\r\n        const endMessage = {\r\n          text: 'Thank you for the conversation!\\n Enter your Name',\r\n          isUser: false,\r\n        };\r\n        setMessages([...updatedMessages, endMessage]);\r\n        setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n        readOutText(endMessage.text);\r\n      }\r\n      return; // Skip further processing\r\n    }\r\n\r\n    // Validation and formatting for name fields\r\n    if (currentQuestion.field === 'name' ||\r\n      currentQuestion.field === 'fatherName' ||\r\n      currentQuestion.field === 'motherName' ||\r\n      currentQuestion.field === 'guardianName' ||\r\n      currentQuestion.field === 'city' ||\r\n      currentQuestion.field === 'state' ||\r\n      currentQuestion.field === 'nationality') {\r\n      const { isValid, formattedName } = validateAndFormatName(userInput);\r\n      if (!isValid) {\r\n        const invalidMessage = \"Invalid Name. Please enter a valid name with no numbers and special characters.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n      userInput = formattedName; // Use the formatted name\r\n    }\r\n\r\n    // Validation for number\r\n    if (currentQuestion.field === 'personalNumber') {\r\n      if (userInput.length !== 10 || !/^\\d+$/.test(userInput)) {\r\n        const invalidMessage = \"Invalid Number. Please enter a 10-digit numeric number.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n    }\r\n\r\n    // Validation for email\r\n    if (currentQuestion.field === 'email') {\r\n      if (!/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/.test(userInput)) {\r\n        const invalidMessage = \"Invalid Email. Please enter a valid email address.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n    }\r\n\r\n    // Validation for pinCode\r\n    if (currentQuestion.field === 'pinCode') {\r\n      if (userInput.length !== 6 || !/^\\d+$/.test(userInput)) {\r\n        const invalidMessage = \"Invalid Pin Code. Please enter a 6-digit numeric number.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n    }\r\n\r\n    // Validation for dates\r\n    if (currentQuestion.field === 'date' || currentQuestion.field === 'dob') {\r\n      if (!isValidDateFormat(userInput)) {\r\n        const invalidMessage = \"Invalid Date Format. Please use YYYY-MM-DD format.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n      // Check if the date is a valid date\r\n      const parts = userInput.split('-');\r\n      const year = parseInt(parts[0], 10);\r\n      const month = parseInt(parts[1], 10);\r\n      const day = parseInt(parts[2], 10);\r\n\r\n      if (!isValidDate(year, month, day)) {\r\n        const invalidMessage = \"Invalid Date. Please enter a valid calendar date.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: true };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n    }\r\n\r\n    \r\n\r\n    // Capture the user's input for the current field\r\n    switch (currentQuestion.field) {\r\n      case 'name':\r\n        setName(userInput);\r\n        break;\r\n      case 'personalNumber':\r\n        setPersonalNumber(userInput);\r\n        break;\r\n      case 'email':\r\n        setEmail(userInput);\r\n        break;\r\n      case 'fatherName':\r\n        setFatherName(userInput);\r\n        break;\r\n      case 'fatherNumber':\r\n        setFatherNumber(userInput);\r\n        break;\r\n      case 'motherName':\r\n        setMotherName(userInput);\r\n        break;\r\n      case 'motherNumber':\r\n        setMotherNumber(userInput);\r\n        break;\r\n      case 'guardianName':\r\n        setGuardianName(userInput);\r\n        break;\r\n      case 'guardianNumber':\r\n        setGuardianNumber(userInput);\r\n        break;\r\n      case 'dob':\r\n        setDob(userInput);\r\n        break;\r\n      case 'date':\r\n        setDate(userInput);\r\n        break;\r\n      case 'address':\r\n        setAddress(userInput);\r\n        break;\r\n      case 'city':\r\n        setCity(userInput);\r\n        break;\r\n      case 'state':\r\n        setState(userInput);\r\n        break;\r\n      case 'nationality':\r\n        setNationality(userInput);\r\n        break;\r\n      case 'pinCode':\r\n        setPinCode(userInput);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // Add the user's input to the messages\r\n    updatedMessages = [\r\n      ...messages,\r\n      { text: userInput, isUser: true },\r\n    ];\r\n    setMessages(updatedMessages);\r\n    setVoiceInput('');\r\n\r\n    // Move to the next field or end the conversation\r\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\r\n      // Ask the next question\r\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n      setMessages([...updatedMessages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n\r\n      // Read out the next question\r\n      readOutText(nextQuestion.text);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!\\n Enter your Name',\r\n        isUser: false,\r\n      };\r\n      setMessages([...updatedMessages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n      readOutText(endMessage.text);\r\n    }\r\n  };\r\n\r\n  // Use useEffect to capture the updated dob value before sending it to the server\r\n  useEffect(() => {\r\n    if (dob) {\r\n      // Capture the updated dob value\r\n      const updatedDob = dob;\r\n\r\n      // Send the user input to the server\r\n      const sendUserInput = async () => {\r\n        // Define the fields and their corresponding values\r\n        const fields = {\r\n          name,\r\n          personalNumber,\r\n          email,\r\n          fatherName,\r\n          fatherNumber,\r\n          motherName,\r\n          motherNumber,\r\n          guardianName,\r\n          guardianNumber,\r\n          date,\r\n          address,\r\n          city,\r\n          state,\r\n          nationality,\r\n          pinCode,\r\n          dob: updatedDob,\r\n        };\r\n\r\n        // Prepare the user input data by filtering out empty fields\r\n        const userInputData = {};\r\n        for (const [key, value] of Object.entries(fields)) {\r\n          if (value !== null && value !== undefined && value !== '') {\r\n            userInputData[key] = value;\r\n          }\r\n        }\r\n        try {\r\n          await axios.post('http://localhost:3001/save', {\r\n            userInput: userInputData,\r\n          });\r\n          console.log('User input saved successfully');\r\n\r\n          // Add the user inputs to the userInputs array\r\n          const newInput = userInputData;\r\n          setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\r\n\r\n          // Clear the input fields\r\n          setName('');\r\n          setAddress('');\r\n          setDob('');\r\n        } catch (error) {\r\n          console.error('Failed to save user input:', error);\r\n        }\r\n      };\r\n\r\n      sendUserInput();\r\n    }\r\n  }, [dob]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n    readOutText(currentQuestion.text); // Read out the initial question\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {userInputs.length > 0 && (\r\n          <div className=\"message bot\">\r\n            <h4>Collected Inputs:</h4>\r\n            {userInputs.map((input, index) => (\r\n              <div key={index}>\r\n                {input.name && <span><strong>Name:</strong> {input.name}</span>}\r\n                <br />\r\n                {input.personalNumber && <span><strong>Personal Number:</strong> {input.personalNumber}</span>}\r\n                <br />\r\n                {input.email && <span><strong>Email:</strong> {input.email}</span>}\r\n                <br />\r\n                {input.fatherName && <span><strong>Father's Name:</strong> {input.fatherName}</span>}\r\n                <br />\r\n                {input.fatherNumber && <span><strong>Father's Number:</strong> {input.fatherNumber}</span>}\r\n                <br />\r\n                {input.motherName && <span><strong>Mother's Name:</strong> {input.motherName}</span>}\r\n                <br />\r\n                {input.motherNumber && <span><strong>Mother's Number:</strong> {input.motherNumber}</span>}\r\n                <br />\r\n                {input.guardianName && <span><strong>Guardian's Name:</strong> {input.guardianName}</span>}\r\n                <br />\r\n                {input.guardianNumber && <span><strong>Guardian's Number:</strong> {input.guardianNumber}</span>}\r\n                <br />\r\n                {input.dob && <span><strong>Date of Birth:</strong> {input.dob}</span>}\r\n                <br />\r\n                {input.date && <span><strong>Date:</strong> {input.date}</span>}\r\n                <br />\r\n                {input.address && <span><strong>Address:</strong> {input.address}</span>}\r\n                <br />\r\n                {input.city && <span><strong>City:</strong> {input.city}</span>}\r\n                <br />\r\n                {input.state && <span><strong>State:</strong> {input.state}</span>}\r\n                <br />\r\n                {input.nationality && <span><strong>Nationality:</strong> {input.nationality}</span>}\r\n                <br />\r\n                {input.pinCode && <span><strong>PIN Code:</strong> {input.pinCode}</span>}\r\n                <br />\r\n                <br />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        {questions[selectedFormId][currentQuestionIndex].options ? (\r\n          <div className=\"checkbox-options\">\r\n            {questions[selectedFormId][currentQuestionIndex].options.map((option) => (\r\n              <div key={option.value} className=\"checkbox-option\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={option.value}\r\n                  name={option.value}\r\n                  checked={familyIncome === option.value}\r\n                  onChange={() => {setFamilyIncome(option.value);\r\n                    const familyIncomeMessage = {\r\n                      text: option.value,\r\n                      isUser: true,\r\n                    };\r\n                    setMessages([...messages, familyIncomeMessage]);\r\n                    readOutText(familyIncomeMessage.text);\r\n                  }}\r\n                />\r\n                <label htmlFor={option.value}>{option.label}</label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          ref={inputRef}\r\n          value={voiceInput}\r\n          onChange={(e) => setVoiceInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}