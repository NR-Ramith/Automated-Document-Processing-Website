{"ast":null,"code":"let newTemplateId = 0;\nexport const getNewTemplateId = () => {\n  return newTemplateId;\n};\nexport const setNewTemplateId = newTId => {\n  newTemplateId = newTId;\n};\nlet templateId = 0;\nexport const getTemplateId = () => {\n  return templateId;\n};\nexport const setTemplateId = newTemplateId => {\n  templateId = newTemplateId;\n};\nlet DId = 0;\nexport const getDId = () => {\n  return DId;\n};\nexport const setDId = newDId => {\n  DId = newDId;\n};\nlet stateInformation = {};\nexport const getStateValue = key => {\n  return stateInformation[key];\n};\nexport const setStateValue = (key, value) => {\n  stateInformation[key] = value;\n};\nexport const reseyStateValue = (key, value) => {\n  stateInformation[key] = value;\n};\nlet fieldValues = {};\nexport const getFieldValue = field => {\n  return fieldValues[field];\n};\nexport const setFieldValue = (field, value) => {\n  fieldValues[field] = value;\n};\nexport const getAllFieldValues = () => {\n  return fieldValues;\n};\nexport const resetFieldValues = () => {\n  fieldValues = {};\n};\nlet filledMandatoryFieldsIndicator = {};\nexport const checkIfMandatoryField = field => {\n  if (field in filledMandatoryFieldsIndicator) return true;\n  return false;\n};\nexport const getFilledMandatoryFieldIndicator = field => {\n  return filledMandatoryFieldsIndicator[field];\n};\nexport const setFilledMandatoryFieldIndicator = (field, value) => {\n  filledMandatoryFieldsIndicator[field] = value;\n};\nexport const resetFilledMandatoryFieldIndicator = () => {\n  filledMandatoryFieldsIndicator = {};\n};\n\n// let mandatoryFields\n\n// export const isMandatoryField = (field) => {\n//   if (mandatoryFields[field])\n//   return 1;\n//   return 0;\n// };","map":{"version":3,"names":["newTemplateId","getNewTemplateId","setNewTemplateId","newTId","templateId","getTemplateId","setTemplateId","DId","getDId","setDId","newDId","stateInformation","getStateValue","key","setStateValue","value","reseyStateValue","fieldValues","getFieldValue","field","setFieldValue","getAllFieldValues","resetFieldValues","filledMandatoryFieldsIndicator","checkIfMandatoryField","getFilledMandatoryFieldIndicator","setFilledMandatoryFieldIndicator","resetFilledMandatoryFieldIndicator"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/react-app/src/components/values.js"],"sourcesContent":["let newTemplateId = 0;\r\n\r\nexport const getNewTemplateId = () => {\r\n  return newTemplateId;\r\n};\r\n\r\nexport const setNewTemplateId = (newTId) => {\r\n  newTemplateId = newTId;\r\n};\r\n\r\nlet templateId = 0;\r\n\r\nexport const getTemplateId = () => {\r\n  return templateId;\r\n};\r\n\r\nexport const setTemplateId = (newTemplateId) => {\r\n  templateId = newTemplateId;\r\n};\r\n\r\nlet DId = 0;\r\n\r\nexport const getDId = () => {\r\n  return DId;\r\n};\r\n\r\nexport const setDId = (newDId) => {\r\n  DId = newDId;\r\n};\r\n\r\nlet stateInformation = {};\r\n\r\nexport const getStateValue = (key) => {\r\n  return stateInformation[key];\r\n};\r\n\r\nexport const setStateValue = (key, value) => {\r\n  stateInformation[key] = value;\r\n};\r\n\r\nexport const reseyStateValue = (key, value) => {\r\n  stateInformation[key] = value;\r\n};\r\n\r\nlet fieldValues = {};\r\n\r\nexport const getFieldValue = (field) => {\r\n  return fieldValues[field];\r\n};\r\n\r\nexport const setFieldValue = (field, value) => {\r\n  fieldValues[field] = value;\r\n};\r\n\r\nexport const getAllFieldValues = () => {\r\n  return fieldValues;\r\n};\r\n\r\nexport const resetFieldValues = () => {\r\n  fieldValues={};\r\n};\r\n\r\nlet filledMandatoryFieldsIndicator = {};\r\n\r\nexport const checkIfMandatoryField = (field) => {\r\n  if (field in filledMandatoryFieldsIndicator)\r\n  return true;\r\n  return false;\r\n};\r\n\r\nexport const getFilledMandatoryFieldIndicator = (field) => {\r\n  return filledMandatoryFieldsIndicator[field];\r\n};\r\n\r\nexport const setFilledMandatoryFieldIndicator = (field, value) => {\r\n  filledMandatoryFieldsIndicator[field] = value;\r\n};\r\n\r\nexport const resetFilledMandatoryFieldIndicator = () => {\r\n  filledMandatoryFieldsIndicator={};\r\n};\r\n\r\n// let mandatoryFields\r\n\r\n// export const isMandatoryField = (field) => {\r\n//   if (mandatoryFields[field])\r\n//   return 1;\r\n//   return 0;\r\n// };"],"mappings":"AAAA,IAAIA,aAAa,GAAG,CAAC;AAErB,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpC,OAAOD,aAAa;AACtB,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAIC,MAAM,IAAK;EAC1CH,aAAa,GAAGG,MAAM;AACxB,CAAC;AAED,IAAIC,UAAU,GAAG,CAAC;AAElB,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACjC,OAAOD,UAAU;AACnB,CAAC;AAED,OAAO,MAAME,aAAa,GAAIN,aAAa,IAAK;EAC9CI,UAAU,GAAGJ,aAAa;AAC5B,CAAC;AAED,IAAIO,GAAG,GAAG,CAAC;AAEX,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAC1B,OAAOD,GAAG;AACZ,CAAC;AAED,OAAO,MAAME,MAAM,GAAIC,MAAM,IAAK;EAChCH,GAAG,GAAGG,MAAM;AACd,CAAC;AAED,IAAIC,gBAAgB,GAAG,CAAC,CAAC;AAEzB,OAAO,MAAMC,aAAa,GAAIC,GAAG,IAAK;EACpC,OAAOF,gBAAgB,CAACE,GAAG,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGA,CAACD,GAAG,EAAEE,KAAK,KAAK;EAC3CJ,gBAAgB,CAACE,GAAG,CAAC,GAAGE,KAAK;AAC/B,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAACH,GAAG,EAAEE,KAAK,KAAK;EAC7CJ,gBAAgB,CAACE,GAAG,CAAC,GAAGE,KAAK;AAC/B,CAAC;AAED,IAAIE,WAAW,GAAG,CAAC,CAAC;AAEpB,OAAO,MAAMC,aAAa,GAAIC,KAAK,IAAK;EACtC,OAAOF,WAAW,CAACE,KAAK,CAAC;AAC3B,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGA,CAACD,KAAK,EAAEJ,KAAK,KAAK;EAC7CE,WAAW,CAACE,KAAK,CAAC,GAAGJ,KAAK;AAC5B,CAAC;AAED,OAAO,MAAMM,iBAAiB,GAAGA,CAAA,KAAM;EACrC,OAAOJ,WAAW;AACpB,CAAC;AAED,OAAO,MAAMK,gBAAgB,GAAGA,CAAA,KAAM;EACpCL,WAAW,GAAC,CAAC,CAAC;AAChB,CAAC;AAED,IAAIM,8BAA8B,GAAG,CAAC,CAAC;AAEvC,OAAO,MAAMC,qBAAqB,GAAIL,KAAK,IAAK;EAC9C,IAAIA,KAAK,IAAII,8BAA8B,EAC3C,OAAO,IAAI;EACX,OAAO,KAAK;AACd,CAAC;AAED,OAAO,MAAME,gCAAgC,GAAIN,KAAK,IAAK;EACzD,OAAOI,8BAA8B,CAACJ,KAAK,CAAC;AAC9C,CAAC;AAED,OAAO,MAAMO,gCAAgC,GAAGA,CAACP,KAAK,EAAEJ,KAAK,KAAK;EAChEQ,8BAA8B,CAACJ,KAAK,CAAC,GAAGJ,KAAK;AAC/C,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAGA,CAAA,KAAM;EACtDJ,8BAA8B,GAAC,CAAC,CAAC;AACnC,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}