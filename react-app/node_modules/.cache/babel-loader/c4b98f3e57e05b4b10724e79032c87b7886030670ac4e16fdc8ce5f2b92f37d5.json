{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\Menu.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Menu.css';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport UploadForm from './UploadForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Menu = () => {\n  _s();\n  const [processedImageBlob, setProcessedImageBlob] = useState(null);\n  const [processedImageURL, setProcessedImageURL] = useState(null);\n  const [isLoading, setIsLoading] = useState(false); // New loading state\n  const navigate = useNavigate();\n  const location = useLocation();\n  const fileInputRef = useRef(null);\n  let selectedFormId = null;\n  if (location !== null) {\n    selectedFormId = location.state.selectedFormId;\n  }\n  const handleImageUpload = async imageData => {\n    setIsLoading(true); // Set loading state to true when processing starts\n\n    try {\n      const response = await fetch('http://localhost:5000/processImage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageData\n        }) // Assuming imageData is a base64-encoded image\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      console.log(response);\n      const blob = await response.blob();\n\n      // Check if the Blob has a valid type (e.g., image/jpeg, image/png)\n      if (blob.type.startsWith('image/')) {\n        // Create a Blob URL for the image\n        setProcessedImageBlob(blob);\n        const imageUrl = URL.createObjectURL(blob);\n        setProcessedImageURL(imageUrl);\n      } else {\n        console.error('Invalid Blob type:', blob.type);\n        // Handle the case where the Blob is not a valid image\n      }\n    } catch (error) {\n      console.error('Error fetching image:', error);\n      // Handle the fetch error here\n    } finally {\n      setIsLoading(false); // Set loading state to false when processing is complete\n    }\n  };\n\n  const handleButtonClick = () => {\n    navigate('/chatbot', {\n      state: {\n        selectedFormId: selectedFormId\n      }\n    });\n  };\n  const handleImageSubmit = async () => {\n    if (processedImageBlob) {\n      setIsLoading(true);\n      try {\n        const formData = new FormData();\n        formData.append('image', processedImageBlob);\n        const response = await fetch('http://localhost:5000/uploadImage', {\n          method: 'POST',\n          body: formData\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        console.log('Image uploaded successfully');\n\n        // Optionally, you can reset the processedImageBlob and URL after upload\n        setProcessedImageBlob(null);\n        setProcessedImageURL(null);\n      } catch (error) {\n        console.error('Error uploading image:', error);\n        // Handle the fetch error here\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"menu-title\",\n        children: \"Image Processing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UploadForm, {\n        onImageUpload: handleImageUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this) : processedImageURL ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processed-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Processed Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"processed-image\",\n          src: processedImageURL,\n          alt: \"Processed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleImageSubmit,\n          className: \"submit-button\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-application\",\n      children: \"Don't have the filled application form?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      className: \"chatbot-button\",\n      children: \"Try ChatBot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(Menu, \"07KmiJ00FgQUqkcCkOEePyTJScM=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Menu;\nexport default Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","useNavigate","UploadForm","jsxDEV","_jsxDEV","Menu","_s","processedImageBlob","setProcessedImageBlob","processedImageURL","setProcessedImageURL","isLoading","setIsLoading","navigate","location","fileInputRef","useRef","selectedFormId","state","handleImageUpload","imageData","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","console","log","blob","type","startsWith","imageUrl","URL","createObjectURL","error","handleButtonClick","handleImageSubmit","formData","FormData","append","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onImageUpload","src","alt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/Menu.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Menu.css';\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\r\nimport UploadForm from './UploadForm';\r\n\r\nconst Menu = () => {\r\n    const [processedImageBlob, setProcessedImageBlob] = useState(null);\r\n    const [processedImageURL, setProcessedImageURL] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false); // New loading state\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const fileInputRef = useRef(null);\r\n    let selectedFormId = null;\r\n\r\n    if (location !== null) {\r\n        selectedFormId = location.state.selectedFormId;\r\n    }\r\n\r\n    const handleImageUpload = async (imageData) => {\r\n        setIsLoading(true); // Set loading state to true when processing starts\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/processImage', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ imageData }), // Assuming imageData is a base64-encoded image\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            console.log(response);\r\n\r\n            const blob = await response.blob();\r\n\r\n            // Check if the Blob has a valid type (e.g., image/jpeg, image/png)\r\n            if (blob.type.startsWith('image/')) {\r\n                // Create a Blob URL for the image\r\n                setProcessedImageBlob(blob);\r\n                const imageUrl = URL.createObjectURL(blob);\r\n                setProcessedImageURL(imageUrl);\r\n            } else {\r\n                console.error('Invalid Blob type:', blob.type);\r\n                // Handle the case where the Blob is not a valid image\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching image:', error);\r\n            // Handle the fetch error here\r\n        } finally {\r\n            setIsLoading(false); // Set loading state to false when processing is complete\r\n        }\r\n    };\r\n\r\n    const handleButtonClick = () => {\r\n        navigate('/chatbot', { state: { selectedFormId: selectedFormId } });\r\n    };\r\n\r\n    const handleImageSubmit = async () => {\r\n        if (processedImageBlob) {\r\n            setIsLoading(true);\r\n        \r\n            try {\r\n              const formData = new FormData();\r\n              formData.append('image', processedImageBlob);\r\n        \r\n              const response = await fetch('http://localhost:5000/uploadImage', {\r\n                method: 'POST',\r\n                body: formData,\r\n              });\r\n        \r\n              if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n              }\r\n        \r\n              console.log('Image uploaded successfully');\r\n        \r\n              // Optionally, you can reset the processedImageBlob and URL after upload\r\n              setProcessedImageBlob(null);\r\n              setProcessedImageURL(null);\r\n            } catch (error) {\r\n              console.error('Error uploading image:', error);\r\n              // Handle the fetch error here\r\n            } finally {\r\n              setIsLoading(false);\r\n            }\r\n          }\r\n    };\r\n\r\n    return (\r\n        <div className=\"menu-container\">\r\n            <div className=\"menu-content\">\r\n                <h1 className=\"menu-title\">Image Processing</h1>\r\n                <UploadForm onImageUpload={handleImageUpload} />\r\n                {isLoading ? (\r\n                    <div className=\"loading-spinner-container\">\r\n                        <div className=\"loading-spinner\"></div>\r\n                    </div>\r\n                ) : processedImageURL ? (\r\n                    <div className=\"processed-image-container\">\r\n                        <h2>Processed Image</h2>\r\n                        <img className=\"processed-image\" src={processedImageURL} alt=\"Processed\" />\r\n                        <button onClick={handleImageSubmit} className=\"submit-button\">Submit</button>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n            <p className=\"no-application\">Don't have the filled application form?</p>\r\n            <button onClick={handleButtonClick} className=\"chatbot-button\">Try ChatBot</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}