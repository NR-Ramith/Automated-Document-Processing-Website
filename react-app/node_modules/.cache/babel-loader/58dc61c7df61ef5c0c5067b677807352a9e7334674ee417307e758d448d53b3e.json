{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\react-app\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength, isValidEmailFormat, toTitle } from './validate';\nimport { getFieldValue, getStateValue, setFieldValue, setFilledMandatoryFieldIndicator } from './values';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [voiceInput, setVoiceInput] = useState('');\n  const inputRef = useRef(null);\n  const [userInputs, setUserInputs] = useState([]);\n  const [inputs, setInputs] = useState([]);\n  const [lastQuestionValue, setLastQuestionValue] = useState('');\n  const [questions, setQuestions] = useState([]);\n  let currentQuestion = {};\n  const navigate = useNavigate();\n  const location = useLocation();\n  let selectedFormId = null;\n  let doneFlag = 0;\n  useEffect(() => {\n    // Fetch questions when the component mounts or when selectedFormId changes\n    if (location.state && location.state.selectedFormId) {\n      const formId = location.state.selectedFormId;\n      selectedFormId = formId;\n      setQuestions(getStateValue('questions'));\n      let tempQuestions = getStateValue('questions');\n      let i = 0;\n      for (i = 0; i < tempQuestions.length; i++) {\n        if (!getFieldValue(tempQuestions[i]['field'])) {\n          currentQuestion = tempQuestions[i];\n          setCurrentQuestionIndex(i);\n          setMessages([...messages, {\n            text: currentQuestion.text,\n            isUser: false\n          }]);\n          readOutText(currentQuestion.text);\n          return;\n        }\n      }\n      // If all the questions are filled\n      if (i === tempQuestions.length) {\n        const endMessage = {\n          text: 'Everything is filled. Thank you for the conversation!',\n          isUser: false\n        };\n        // setMessages([...messages, endMessage]);\n        setMessages(messages => [...messages, endMessage]);\n        doneFlag = 1;\n        // setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n        readOutText(endMessage.text);\n      }\n    }\n  }, [location.state]);\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const readOutText = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  const goBack = () => {\n    navigate('/menu');\n  };\n  const increment = () => {\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\n  };\n  const askNextQuestion = () => {\n    while (currentQuestionIndex + 1 < questions.length) {\n      console.log(currentQuestionIndex);\n      const nextQuestion = questions[currentQuestionIndex + 1];\n      // Check if the question is already filled\n      if (getFieldValue(nextQuestion.field) == null) {\n        // If the question is filled, assign it as the next question and read it out\n        const nextQuestionMessage = {\n          text: nextQuestion.text,\n          isUser: false\n        };\n        setMessages(messages => [...messages, nextQuestionMessage]);\n        readOutText(nextQuestion.text);\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n        return;\n      } else {\n        // setCurrentQuestionIndex(currentQuestionIndex + 1);\n      }\n    }\n    const endMessage = {\n      text: 'Thank you for the conversation!',\n      isUser: false\n    };\n    // setMessages([...messages, endMessage]);\n    setMessages(messages => [...messages, endMessage]);\n    doneFlag = 1;\n    // setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n    readOutText(endMessage.text);\n  };\n  const handleUserInput = async event => {\n    event.preventDefault();\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    // Remove trailing full stop if it exists\n    userInput = userInput.replace(/\\.$/, '');\n    const currentQuestion = questions[currentQuestionIndex];\n    let updatedMessages = [];\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\n    console.log('inside');\n    if (userInput === \"\") {\n      // If field is mandatory\n      if (currentQuestion.mandatory) {\n        const mandatoryMessage = {\n          text: 'This field is required.'\n        };\n        setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\n        readOutText(mandatoryMessage.text);\n        return;\n      }\n\n      // If user input is empty, just move to the next question\n      if (currentQuestionIndex === questions.length - 1) setLastQuestionValue('Empty');\n      askNextQuestion();\n      return; // Skip further processing\n    } else {\n      if (currentQuestion.options) return;\n    }\n    let validationFailed = false;\n    let invalidMessage;\n    if (currentQuestion.callValidations) {\n      for (let i = 0; i < currentQuestion.callValidations.length; i++) {\n        const validationCheck = currentQuestion.callValidations[i];\n        if (validationCheck === 'onlyAlphabets') {\n          if (!hasOnlyAlphabets(userInput)) {\n            invalidMessage = \"Field must contain only alphabets.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'onlyDigits') {\n          if (!hasOnlyDigits(userInput)) {\n            invalidMessage = \"Field must contain only digits.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'maxLength') {\n          if (!hasFieldLength(userInput, currentQuestion.fieldLength, false)) {\n            invalidMessage = \"Field exceeds the max length.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'fixedLength') {\n          if (!hasFieldLength(userInput, currentQuestion.fieldLength, true)) {\n            invalidMessage = \"Field is not of the required length.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'validEmail') {\n          if (!isValidEmailFormat(userInput)) {\n            invalidMessage = \"Field is not of proper Email id format.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'makeTitle') {\n          userInput = toTitle(userInput);\n        } else if (validationCheck === 'dateFormat') {\n          if (!isValidDateFormat(userInput)) {\n            invalidMessage = \"Field is not of proper date format.\";\n            validationFailed = true;\n            break;\n          }\n        } else if (validationCheck === 'validDate') {\n          if (!isValidDate(userInput)) {\n            invalidMessage = \"Field is not a proper calendar date or date lies in the future.\";\n            validationFailed = true;\n            break;\n          }\n        }\n      }\n    }\n    if (validationFailed) {\n      const invalidMessageObj = {\n        text: invalidMessage,\n        isUser: false\n      };\n      setMessages([...messages, invalidMessageObj]);\n      readOutText(invalidMessage);\n      return; // Exit the handleUserInput function if validation failed\n    }\n\n    if (userInput) {\n      console.log(userInput);\n      setFieldValue(currentQuestion.field, userInput);\n      if (currentQuestion.mandatory) setFilledMandatoryFieldIndicator(currentQuestion.field, 1);\n      setInputs([...inputs, {\n        fieldName: currentQuestion.field,\n        val: userInput\n      }]);\n      if (currentQuestionIndex === questions.length - 1) setLastQuestionValue(userInput);\n\n      // Add the user's input to the messages\n      updatedMessages = [...messages, {\n        text: userInput,\n        isUser: true\n      }];\n      setMessages(updatedMessages);\n      setVoiceInput('');\n    }\n\n    // Move to the next field or end the conversation\n    askNextQuestion();\n  };\n\n  // Use useEffect to capture the updated last value before sending it to the server\n  useEffect(() => {\n    if (lastQuestionValue || lastQuestionValue === 'Empty') {\n      // Send the user input to the server\n      // const sendUserInput = async () => {\n      //   const userInputData = {};\n      //   for (let i = 0; i < inputs.length; i++) {\n      //     userInputData[inputs[i].fieldName] = inputs[i].val;\n      //   }\n\n      //   try {\n      //     await axios.post('http://localhost:3001/save', {\n      //       userInput: userInputData, selectedFormId\n      //     });\n      //     console.log('User input saved successfully');\n\n      //     // Add the user inputs to the userInputs array\n      //     const newInput = userInputData;\n      //     setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\n\n      //     // Clear the input fields\n      //     setLastQuestionValue('');\n      //     setInputs([]);\n\n      //   } catch (error) {\n      //     console.error('Failed to save user input:', error);\n      //   }\n      // };\n\n      const sendUserInput = async () => {\n        const userInputData = {};\n        for (let i = 0; i < inputs.length; i++) {\n          userInputData[inputs[i].fieldName] = inputs[i].val;\n        }\n        try {\n          doneFlag = 1;\n          // await axios.post('http://localhost:3001/save', {\n          //   userInput: userInputData, selectedFormId\n          // });\n          // console.log('User input saved successfully');\n\n          // Add the user inputs to the userInputs array\n          const newInput = userInputData;\n          setUserInputs(prevUserInputs => [...prevUserInputs, newInput]);\n\n          // Clear the input fields\n          setLastQuestionValue('');\n          setInputs([]);\n        } catch (error) {\n          console.error('Failed to save user input:', error);\n        }\n      };\n      sendUserInput();\n    }\n  }, [lastQuestionValue]);\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goBack,\n      className: \"back-button\",\n      children: \"< Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"ChatBot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-window\",\n        className: \"chat-window\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.isUser ? 'user' : 'bot'}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this)), userInputs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Collected Inputs:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this), userInputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: Object.entries(input).map(([fieldName, fieldValue]) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [fieldName, \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 331,\n                  columnNumber: 25\n                }, this), \" \", fieldValue]\n              }, fieldName, true, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 21\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), questions[currentQuestionIndex] && questions[currentQuestionIndex].options ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-options\",\n          children: questions[currentQuestionIndex].options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkbox-option\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: option.value,\n              name: option.value\n              // checked={checkboxValue === option.value}\n              ,\n              checked: false,\n              onChange: () => {\n                // setCheckboxValue(option.value);\n                setFieldValue(questions[currentQuestionIndex].field, option.value);\n                if (questions[currentQuestionIndex].mandatory) setFilledMandatoryFieldIndicator(questions[currentQuestionIndex].field, 1);\n                setInputs([...inputs, {\n                  fieldName: questions[currentQuestionIndex].field,\n                  val: option.value\n                }]);\n                const checkboxMessage = {\n                  text: option.value,\n                  isUser: true\n                };\n                setMessages([...messages, checkboxMessage]);\n                if (currentQuestionIndex === questions.length - 1) setLastQuestionValue('Empty');\n                askNextQuestion();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: option.value,\n              children: option.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 19\n            }, this)]\n          }, option.value, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleUserInput,\n        className: \"input-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: inputRef,\n          value: voiceInput,\n          onChange: e => setVoiceInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-recognition\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startVoiceRecognition,\n          children: \"Start Voice Recognition\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopVoiceRecognition,\n          children: \"Stop Voice Recognition\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), doneFlag ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goBack,\n      className: \"submit-button\",\n      children: \"Back to Menu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 19\n    }, this) : null]\n  }, void 0, true);\n};\n_s(ChatBot, \"LGjZ1GbZz2hBOCj8yGCxJVkw5es=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","useNavigate","isValidDateFormat","isValidDate","hasOnlyAlphabets","hasOnlyDigits","hasFieldLength","isValidEmailFormat","toTitle","getFieldValue","getStateValue","setFieldValue","setFilledMandatoryFieldIndicator","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBot","_s","messages","setMessages","currentQuestionIndex","setCurrentQuestionIndex","voiceInput","setVoiceInput","inputRef","userInputs","setUserInputs","inputs","setInputs","lastQuestionValue","setLastQuestionValue","questions","setQuestions","currentQuestion","navigate","location","selectedFormId","doneFlag","state","formId","tempQuestions","i","length","text","isUser","readOutText","endMessage","handleVoiceInput","event","transcript","results","handleVoiceError","console","log","error","utterance","SpeechSynthesisUtterance","window","speechSynthesis","speak","startVoiceRecognition","SpeechRecognition","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","goBack","increment","askNextQuestion","nextQuestion","field","nextQuestionMessage","handleUserInput","preventDefault","userInput","current","value","replace","updatedMessages","trim","mandatory","mandatoryMessage","prevMessages","options","validationFailed","invalidMessage","callValidations","validationCheck","fieldLength","invalidMessageObj","fieldName","val","sendUserInput","userInputData","newInput","prevUserInputs","chatWindow","document","getElementById","scrollTop","scrollHeight","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","id","map","message","index","input","Object","entries","fieldValue","option","type","name","checked","onChange","checkboxMessage","htmlFor","label","onSubmit","ref","e","target","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/react-app/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength, isValidEmailFormat, toTitle } from './validate';\r\nimport { getFieldValue, getStateValue, setFieldValue, setFilledMandatoryFieldIndicator } from './values';\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const inputRef = useRef(null);\r\n  const [userInputs, setUserInputs] = useState([]);\r\n  const [inputs, setInputs] = useState([]);\r\n  const [lastQuestionValue, setLastQuestionValue] = useState('');\r\n  const [questions, setQuestions] = useState([]);\r\n  let currentQuestion = {};\r\n\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  let selectedFormId = null;\r\n  let doneFlag = 0;\r\n\r\n  useEffect(() => {\r\n    // Fetch questions when the component mounts or when selectedFormId changes\r\n    if (location.state && location.state.selectedFormId) {\r\n      const formId = location.state.selectedFormId;\r\n      selectedFormId = formId;\r\n\r\n      setQuestions(getStateValue('questions'));\r\n      let tempQuestions = getStateValue('questions');\r\n      let i = 0;\r\n      for (i = 0; i < tempQuestions.length; i++) {\r\n        if (!getFieldValue(tempQuestions[i]['field'])) {\r\n          currentQuestion = tempQuestions[i];\r\n          setCurrentQuestionIndex(i);\r\n          setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n          readOutText(currentQuestion.text);\r\n          return;\r\n        }\r\n      }\r\n      // If all the questions are filled\r\n      if (i === tempQuestions.length) {\r\n        const endMessage = {\r\n          text: 'Everything is filled. Thank you for the conversation!',\r\n          isUser: false,\r\n        };\r\n        // setMessages([...messages, endMessage]);\r\n        setMessages((messages) => [...messages, endMessage]);\r\n        doneFlag = 1;\r\n        // setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n        readOutText(endMessage.text);\r\n      }\r\n\r\n    }\r\n  }, [location.state]);\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const readOutText = (text) => {\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n  const goBack = () => {\r\n    navigate('/menu');\r\n  };\r\n\r\n  const increment = () => {\r\n    setCurrentQuestionIndex(currentQuestionIndex+1);\r\n  };\r\n\r\n  const askNextQuestion = () => {\r\n    while (currentQuestionIndex + 1 < questions.length) {\r\n      console.log(currentQuestionIndex)\r\n      const nextQuestion = questions[currentQuestionIndex + 1];\r\n      // Check if the question is already filled\r\n      if (getFieldValue(nextQuestion.field)==null) {\r\n        // If the question is filled, assign it as the next question and read it out\r\n        const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n        setMessages((messages) => [...messages, nextQuestionMessage]);\r\n        readOutText(nextQuestion.text);\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        return;\r\n      } else {\r\n        // setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        \r\n      }\r\n    }\r\n    const endMessage = {\r\n      text: 'Thank you for the conversation!',\r\n      isUser: false,\r\n    };\r\n    // setMessages([...messages, endMessage]);\r\n    setMessages((messages) => [...messages, endMessage]);\r\n    doneFlag = 1;\r\n    // setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n    readOutText(endMessage.text);\r\n  };\r\n\r\n\r\n  const handleUserInput = async (event) => {\r\n    event.preventDefault();\r\n\r\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    // Remove trailing full stop if it exists\r\n    userInput = userInput.replace(/\\.$/, '');\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    let updatedMessages = [];\r\n\r\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\r\n    console.log('inside')\r\n    if (userInput === \"\") {\r\n      // If field is mandatory\r\n      if (currentQuestion.mandatory) {\r\n        const mandatoryMessage = {\r\n          text: 'This field is required.',\r\n        };\r\n        setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\r\n        readOutText(mandatoryMessage.text);\r\n        return;\r\n      }\r\n\r\n      // If user input is empty, just move to the next question\r\n      if (currentQuestionIndex === questions.length - 1)\r\n        setLastQuestionValue('Empty');\r\n      askNextQuestion();\r\n      return; // Skip further processing\r\n    } else {\r\n      if (currentQuestion.options)\r\n        return;\r\n    }\r\n\r\n    let validationFailed = false;\r\n    let invalidMessage;\r\n\r\n    if (currentQuestion.callValidations) {\r\n      for (let i = 0; i < currentQuestion.callValidations.length; i++) {\r\n        const validationCheck = currentQuestion.callValidations[i];\r\n        if (validationCheck === 'onlyAlphabets') {\r\n          if (!hasOnlyAlphabets(userInput)) {\r\n            invalidMessage = \"Field must contain only alphabets.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'onlyDigits') {\r\n          if (!hasOnlyDigits(userInput)) {\r\n            invalidMessage = \"Field must contain only digits.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'maxLength') {\r\n          if (!hasFieldLength(userInput, currentQuestion.fieldLength, false)) {\r\n            invalidMessage = \"Field exceeds the max length.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'fixedLength') {\r\n          if (!hasFieldLength(userInput, currentQuestion.fieldLength, true)) {\r\n            invalidMessage = \"Field is not of the required length.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'validEmail') {\r\n          if (!isValidEmailFormat(userInput)) {\r\n            invalidMessage = \"Field is not of proper Email id format.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'makeTitle') {\r\n          userInput = toTitle(userInput);\r\n        } else if (validationCheck === 'dateFormat') {\r\n          if (!isValidDateFormat(userInput)) {\r\n            invalidMessage = \"Field is not of proper date format.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'validDate') {\r\n          if (!isValidDate(userInput)) {\r\n            invalidMessage = \"Field is not a proper calendar date or date lies in the future.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validationFailed) {\r\n      const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n      setMessages([...messages, invalidMessageObj]);\r\n      readOutText(invalidMessage);\r\n      return; // Exit the handleUserInput function if validation failed\r\n    }\r\n    if (userInput) {\r\n      console.log(userInput)\r\n      setFieldValue(currentQuestion.field, userInput);\r\n      if (currentQuestion.mandatory)\r\n        setFilledMandatoryFieldIndicator(currentQuestion.field, 1);\r\n      setInputs([...inputs, { fieldName: currentQuestion.field, val: userInput }]);\r\n      if (currentQuestionIndex === questions.length - 1)\r\n        setLastQuestionValue(userInput);\r\n\r\n      // Add the user's input to the messages\r\n      updatedMessages = [\r\n        ...messages,\r\n        { text: userInput, isUser: true },\r\n      ];\r\n      setMessages(updatedMessages);\r\n      setVoiceInput('');\r\n    }\r\n\r\n    // Move to the next field or end the conversation\r\n    askNextQuestion();\r\n  };\r\n\r\n\r\n  // Use useEffect to capture the updated last value before sending it to the server\r\n  useEffect(() => {\r\n    if (lastQuestionValue || lastQuestionValue === 'Empty') {\r\n      // Send the user input to the server\r\n      // const sendUserInput = async () => {\r\n      //   const userInputData = {};\r\n      //   for (let i = 0; i < inputs.length; i++) {\r\n      //     userInputData[inputs[i].fieldName] = inputs[i].val;\r\n      //   }\r\n\r\n      //   try {\r\n      //     await axios.post('http://localhost:3001/save', {\r\n      //       userInput: userInputData, selectedFormId\r\n      //     });\r\n      //     console.log('User input saved successfully');\r\n\r\n      //     // Add the user inputs to the userInputs array\r\n      //     const newInput = userInputData;\r\n      //     setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\r\n\r\n      //     // Clear the input fields\r\n      //     setLastQuestionValue('');\r\n      //     setInputs([]);\r\n\r\n      //   } catch (error) {\r\n      //     console.error('Failed to save user input:', error);\r\n      //   }\r\n      // };\r\n\r\n      const sendUserInput = async () => {\r\n        const userInputData = {};\r\n        for (let i = 0; i < inputs.length; i++) {\r\n          userInputData[inputs[i].fieldName] = inputs[i].val;\r\n        }\r\n\r\n        try {\r\n          doneFlag = 1;\r\n          // await axios.post('http://localhost:3001/save', {\r\n          //   userInput: userInputData, selectedFormId\r\n          // });\r\n          // console.log('User input saved successfully');\r\n\r\n          // Add the user inputs to the userInputs array\r\n          const newInput = userInputData;\r\n          setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\r\n\r\n          // Clear the input fields\r\n          setLastQuestionValue('');\r\n          setInputs([]);\r\n\r\n        } catch (error) {\r\n          console.error('Failed to save user input:', error);\r\n        }\r\n      };\r\n\r\n      sendUserInput();\r\n    }\r\n  }, [lastQuestionValue]);\r\n\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  return (\r\n    <>\r\n      <button onClick={goBack} className=\"back-button\">&lt; Back</button>\r\n      <div className=\"chatbot-container\">\r\n        <div className=\"chatbot-header\">\r\n          <h2>ChatBot</h2>\r\n        </div>\r\n        <div id=\"chat-window\" className=\"chat-window\">\r\n          {messages.map((message, index) => (\r\n            <div\r\n              key={index}\r\n              className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n            >\r\n              {message.text}\r\n            </div>\r\n          ))}\r\n          {userInputs.length > 0 && (\r\n            <div className=\"message bot\">\r\n              <h4>Collected Inputs:</h4>\r\n              {userInputs.map((input, index) => (\r\n                <div key={index}>\r\n                  {Object.entries(input).map(([fieldName, fieldValue]) => (\r\n                    <div>\r\n                      <span key={fieldName}>\r\n                        <strong>{fieldName}:</strong> {fieldValue}\r\n                      </span>\r\n                      <br />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {questions[currentQuestionIndex] && questions[currentQuestionIndex].options ? (\r\n            <div className=\"checkbox-options\">\r\n              {questions[currentQuestionIndex].options.map((option) => (\r\n                <div key={option.value} className=\"checkbox-option\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id={option.value}\r\n                    name={option.value}\r\n                    // checked={checkboxValue === option.value}\r\n                    checked={false}\r\n                    onChange={() => {\r\n                      // setCheckboxValue(option.value);\r\n                      setFieldValue(questions[currentQuestionIndex].field, option.value);\r\n                      if (questions[currentQuestionIndex].mandatory)\r\n                        setFilledMandatoryFieldIndicator(questions[currentQuestionIndex].field, 1);\r\n                      setInputs([...inputs, { fieldName: questions[currentQuestionIndex].field, val: option.value }]);\r\n                      const checkboxMessage = {\r\n                        text: option.value,\r\n                        isUser: true,\r\n                      };\r\n                      setMessages([...messages, checkboxMessage]);\r\n                      if (currentQuestionIndex === questions.length - 1)\r\n                        setLastQuestionValue('Empty');\r\n                      askNextQuestion();\r\n                    }}\r\n                  />\r\n                  <label htmlFor={option.value}>{option.label}</label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        <form onSubmit={handleUserInput} className=\"input-form\">\r\n          <input\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={voiceInput}\r\n            onChange={(e) => setVoiceInput(e.target.value)}\r\n          />\r\n          <button type=\"submit\">Send</button>\r\n        </form>\r\n        <div className=\"voice-recognition\">\r\n          <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n          <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n        </div>\r\n      </div>\r\n      {doneFlag ? <button onClick={goBack} className=\"submit-button\">Back to Menu</button> : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatBot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}