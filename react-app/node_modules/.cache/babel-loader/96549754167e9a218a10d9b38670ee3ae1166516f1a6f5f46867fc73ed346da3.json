{"ast":null,"code":"// backend/server.js\nconst express = require('express');\nconst cors = require('cors');\nconst {\n  PythonShell\n} = require('python-shell');\nconst path = require('path');\nconst bodyParser = require('body-parser');\nconst fs = require('fs');\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json({\n  limit: '10mb'\n}));\napp.use(bodyParser.urlencoded({\n  extended: true,\n  limit: '10mb'\n}));\nconst processedImagePath = path.join(__dirname, 'processed_image.jpeg');\napp.post('/processImage', (req, res) => {\n  const {\n    imageData\n  } = req.body;\n\n  // Extract the base64 image data from the data URI\n  const base64Data = imageData.replace(/^data:image\\/jpeg;base64,/, '');\n\n  // Convert base64 data to a buffer\n  const imageBuffer = Buffer.from(base64Data, 'base64');\n\n  // Save the buffer as an image file\n  fs.writeFile(processedImagePath, imageBuffer, err => {\n    if (err) {\n      console.error(err);\n      return res.status(500).json({\n        error: 'Error saving image.'\n      });\n    }\n    const options = {\n      scriptPath: path.join(__dirname),\n      args: [processedImagePath, processedImagePath] // Pass the temporary image path as an argument\n    };\n\n    // Run the Python script to process the image\n    PythonShell.run('process_image.py', options, pythonErr => {\n      if (pythonErr) {\n        console.error(pythonErr);\n        return res.status(500).json({\n          error: 'Image processing failed.'\n        });\n      }\n      res.json({\n        imagePath: processedImagePath\n      });\n    });\n  });\n});\nconst port = 5000;\napp.listen(port, () => {\n  console.log(`Server started on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","cors","PythonShell","path","bodyParser","fs","app","use","json","limit","urlencoded","extended","processedImagePath","join","__dirname","post","req","res","imageData","body","base64Data","replace","imageBuffer","Buffer","from","writeFile","err","console","error","status","options","scriptPath","args","run","pythonErr","imagePath","port","listen","log"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/UploadForm.js"],"sourcesContent":["// backend/server.js\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst { PythonShell } = require('python-shell');\r\nconst path = require('path');\r\nconst bodyParser = require('body-parser');\r\nconst fs = require('fs');\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(bodyParser.json({ limit: '10mb' }));\r\napp.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));\r\n\r\nconst processedImagePath = path.join(__dirname, 'processed_image.jpeg');\r\n\r\napp.post('/processImage', (req, res) => {\r\n  const { imageData } = req.body;\r\n\r\n  // Extract the base64 image data from the data URI\r\n  const base64Data = imageData.replace(/^data:image\\/jpeg;base64,/, '');\r\n\r\n  // Convert base64 data to a buffer\r\n  const imageBuffer = Buffer.from(base64Data, 'base64');\r\n\r\n  // Save the buffer as an image file\r\n  fs.writeFile(processedImagePath, imageBuffer, (err) => {\r\n    if (err) {\r\n      console.error(err);\r\n      return res.status(500).json({ error: 'Error saving image.' });\r\n    }\r\n\r\n    const options = {\r\n      scriptPath: path.join(__dirname),\r\n      args: [processedImagePath, processedImagePath], // Pass the temporary image path as an argument\r\n    };\r\n\r\n    // Run the Python script to process the image\r\n    PythonShell.run('process_image.py', options, (pythonErr) => {\r\n      if (pythonErr) {\r\n        console.error(pythonErr);\r\n        return res.status(500).json({ error: 'Image processing failed.' });\r\n      }\r\n\r\n      res.json({ imagePath: processedImagePath });\r\n    });\r\n  });\r\n});\r\n\r\nconst port = 5000;\r\napp.listen(port, () => {\r\n  console.log(`Server started on http://localhost:${port}`);\r\n});\r\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEE;AAAY,CAAC,GAAGF,OAAO,CAAC,cAAc,CAAC;AAC/C,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,UAAU,GAAGJ,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMK,EAAE,GAAGL,OAAO,CAAC,IAAI,CAAC;AAExB,MAAMM,GAAG,GAAGP,OAAO,CAAC,CAAC;AACrBO,GAAG,CAACC,GAAG,CAACN,IAAI,CAAC,CAAC,CAAC;AACfK,GAAG,CAACC,GAAG,CAACH,UAAU,CAACI,IAAI,CAAC;EAAEC,KAAK,EAAE;AAAO,CAAC,CAAC,CAAC;AAC3CH,GAAG,CAACC,GAAG,CAACH,UAAU,CAACM,UAAU,CAAC;EAAEC,QAAQ,EAAE,IAAI;EAAEF,KAAK,EAAE;AAAO,CAAC,CAAC,CAAC;AAEjE,MAAMG,kBAAkB,GAAGT,IAAI,CAACU,IAAI,CAACC,SAAS,EAAE,sBAAsB,CAAC;AAEvER,GAAG,CAACS,IAAI,CAAC,eAAe,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEC;EAAU,CAAC,GAAGF,GAAG,CAACG,IAAI;;EAE9B;EACA,MAAMC,UAAU,GAAGF,SAAS,CAACG,OAAO,CAAC,2BAA2B,EAAE,EAAE,CAAC;;EAErE;EACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACJ,UAAU,EAAE,QAAQ,CAAC;;EAErD;EACAf,EAAE,CAACoB,SAAS,CAACb,kBAAkB,EAAEU,WAAW,EAAGI,GAAG,IAAK;IACrD,IAAIA,GAAG,EAAE;MACPC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB,OAAOT,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACrB,IAAI,CAAC;QAAEoB,KAAK,EAAE;MAAsB,CAAC,CAAC;IAC/D;IAEA,MAAME,OAAO,GAAG;MACdC,UAAU,EAAE5B,IAAI,CAACU,IAAI,CAACC,SAAS,CAAC;MAChCkB,IAAI,EAAE,CAACpB,kBAAkB,EAAEA,kBAAkB,CAAC,CAAE;IAClD,CAAC;;IAED;IACAV,WAAW,CAAC+B,GAAG,CAAC,kBAAkB,EAAEH,OAAO,EAAGI,SAAS,IAAK;MAC1D,IAAIA,SAAS,EAAE;QACbP,OAAO,CAACC,KAAK,CAACM,SAAS,CAAC;QACxB,OAAOjB,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACrB,IAAI,CAAC;UAAEoB,KAAK,EAAE;QAA2B,CAAC,CAAC;MACpE;MAEAX,GAAG,CAACT,IAAI,CAAC;QAAE2B,SAAS,EAAEvB;MAAmB,CAAC,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAMwB,IAAI,GAAG,IAAI;AACjB9B,GAAG,CAAC+B,MAAM,CAACD,IAAI,EAAE,MAAM;EACrBT,OAAO,CAACW,GAAG,CAAE,sCAAqCF,IAAK,EAAC,CAAC;AAC3D,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}