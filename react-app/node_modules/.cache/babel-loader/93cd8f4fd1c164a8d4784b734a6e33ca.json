{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\ChatBot.js\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport questions from \"./questions\";\nimport { isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength, isValidEmailFormat, toTitle } from './validate';\nvar ChatBot = function ChatBot() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestionIndex = _useState4[0],\n    setCurrentQuestionIndex = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    voiceInput = _useState6[0],\n    setVoiceInput = _useState6[1];\n  var inputRef = useRef(null);\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    userInputs = _useState8[0],\n    setUserInputs = _useState8[1];\n  var _useState9 = useState([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    inputs = _useState10[0],\n    setInputs = _useState10[1];\n  var _useState11 = useState(''),\n    _useState12 = _slicedToArray(_useState11, 2),\n    lastQuestionValue = _useState12[0],\n    setLastQuestionValue = _useState12[1];\n  var location = useLocation();\n  var selectedFormId = null;\n  if (location !== null) {\n    selectedFormId = location.state.selectedFormId;\n  }\n  var handleVoiceInput = function handleVoiceInput(event) {\n    var transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  var handleVoiceError = function handleVoiceError(event) {\n    console.log('Voice recognition error:', event.error);\n  };\n  var readOutText = function readOutText(text) {\n    var utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  var startVoiceRecognition = function startVoiceRecognition() {\n    var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    var recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  var stopVoiceRecognition = function stopVoiceRecognition() {\n    var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    var recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  var askNextQuestion = function askNextQuestion() {\n    // Check if there are more questions in the selected form\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\n      // Get the next question\n      var nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\n\n      // Create a message for the next question\n      var nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n\n      // Update the state with the new question and messages\n      setMessages(function (messages) {\n        return [].concat(_toConsumableArray(messages), [nextQuestionMessage]);\n      });\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n\n      // Read out the next question\n      readOutText(nextQuestion.text);\n    } else {\n      // Conversation ended, you can handle this however you want\n      var endMessage = {\n        text: 'Thank you for the conversation!\\n Enter your Name',\n        isUser: false\n      };\n      // setMessages([...messages, endMessage]);\n      setMessages(function (messages) {\n        return [].concat(_toConsumableArray(messages), [endMessage]);\n      });\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n      readOutText(endMessage.text);\n    }\n  };\n  var handleUserInput = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n      var userInput, currentQuestion, updatedMessages, mandatoryMessage, validationFailed, invalidMessage, i, validationCheck, invalidMessageObj;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n            // Remove trailing full stop if it exists\n            userInput = userInput.replace(/\\.$/, '');\n            currentQuestion = questions[selectedFormId][currentQuestionIndex];\n            updatedMessages = [];\n            userInput = userInput.trim(); // Remove leading and trailing whitespace\n            if (!(userInput === \"\")) {\n              _context.next = 17;\n              break;\n            }\n            if (!currentQuestion.mandatory) {\n              _context.next = 12;\n              break;\n            }\n            mandatoryMessage = {\n              text: 'This field is required.'\n            };\n            setMessages(function (prevMessages) {\n              return [].concat(_toConsumableArray(prevMessages), [mandatoryMessage]);\n            });\n            readOutText(mandatoryMessage.text);\n            return _context.abrupt(\"return\");\n          case 12:\n            // If user input is empty, just move to the next question\n            if (currentQuestion.last === true) setLastQuestionValue('Empty');\n            askNextQuestion();\n            return _context.abrupt(\"return\");\n          case 17:\n            if (!currentQuestion.options) {\n              _context.next = 19;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 19:\n            validationFailed = false;\n            if (!currentQuestion.callValidations) {\n              _context.next = 78;\n              break;\n            }\n            i = 0;\n          case 22:\n            if (!(i < currentQuestion.callValidations.length)) {\n              _context.next = 78;\n              break;\n            }\n            validationCheck = currentQuestion.callValidations[i];\n            if (!(validationCheck === 'onlyAlphabets')) {\n              _context.next = 31;\n              break;\n            }\n            if (hasOnlyAlphabets(userInput)) {\n              _context.next = 29;\n              break;\n            }\n            invalidMessage = \"Field must contain only alphabets.\";\n            validationFailed = true;\n            return _context.abrupt(\"break\", 78);\n          case 29:\n            _context.next = 75;\n            break;\n          case 31:\n            if (!(validationCheck === 'onlyDigits')) {\n              _context.next = 38;\n              break;\n            }\n            if (hasOnlyDigits(userInput)) {\n              _context.next = 36;\n              break;\n            }\n            invalidMessage = \"Field must contain only digits.\";\n            validationFailed = true;\n            return _context.abrupt(\"break\", 78);\n          case 36:\n            _context.next = 75;\n            break;\n          case 38:\n            if (!(validationCheck === 'maxLength')) {\n              _context.next = 45;\n              break;\n            }\n            if (hasFieldLength(userInput, currentQuestion.fieldLength, false)) {\n              _context.next = 43;\n              break;\n            }\n            invalidMessage = \"Field exceeds the max length.\";\n            validationFailed = true;\n            return _context.abrupt(\"break\", 78);\n          case 43:\n            _context.next = 75;\n            break;\n          case 45:\n            if (!(validationCheck === 'fixedLength')) {\n              _context.next = 52;\n              break;\n            }\n            if (hasFieldLength(userInput, currentQuestion.fieldLength, true)) {\n              _context.next = 50;\n              break;\n            }\n            invalidMessage = \"Field is not of the required length.\";\n            validationFailed = true;\n            return _context.abrupt(\"break\", 78);\n          case 50:\n            _context.next = 75;\n            break;\n          case 52:\n            if (!(validationCheck === 'validEmail')) {\n              _context.next = 59;\n              break;\n            }\n            if (isValidEmailFormat(userInput)) {\n              _context.next = 57;\n              break;\n            }\n            invalidMessage = \"Field is not of proper Email id format.\";\n            validationFailed = true;\n            return _context.abrupt(\"break\", 78);\n          case 57:\n            _context.next = 75;\n            break;\n          case 59:\n            if (!(validationCheck === 'makeTitle')) {\n              _context.next = 63;\n              break;\n            }\n            userInput = toTitle(userInput);\n            _context.next = 75;\n            break;\n          case 63:\n            if (!(validationCheck === 'dateFormat')) {\n              _context.next = 70;\n              break;\n            }\n            if (isValidDateFormat(userInput)) {\n              _context.next = 68;\n              break;\n            }\n            invalidMessage = \"Field is not of proper date format.\";\n            validationFailed = true;\n            return _context.abrupt(\"break\", 78);\n          case 68:\n            _context.next = 75;\n            break;\n          case 70:\n            if (!(validationCheck === 'validDate')) {\n              _context.next = 75;\n              break;\n            }\n            if (isValidDate(userInput)) {\n              _context.next = 75;\n              break;\n            }\n            invalidMessage = \"Field is not a proper calendar date or date lies in the future.\";\n            validationFailed = true;\n            return _context.abrupt(\"break\", 78);\n          case 75:\n            i++;\n            _context.next = 22;\n            break;\n          case 78:\n            if (!validationFailed) {\n              _context.next = 83;\n              break;\n            }\n            invalidMessageObj = {\n              text: invalidMessage,\n              isUser: false\n            };\n            setMessages([].concat(_toConsumableArray(messages), [invalidMessageObj]));\n            readOutText(invalidMessage);\n            return _context.abrupt(\"return\");\n          case 83:\n            if (userInput) {\n              setInputs([].concat(_toConsumableArray(inputs), [{\n                fieldName: currentQuestion.field,\n                val: userInput\n              }]));\n              if (currentQuestion.last === true) setLastQuestionValue(userInput);\n\n              // Add the user's input to the messages\n              updatedMessages = [].concat(_toConsumableArray(messages), [{\n                text: userInput,\n                isUser: true\n              }]);\n              setMessages(updatedMessages);\n              setVoiceInput('');\n            }\n\n            // Move to the next field or end the conversation\n            askNextQuestion();\n          case 85:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function handleUserInput(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // Use useEffect to capture the updated dob value before sending it to the server\n  useEffect(function () {\n    if (lastQuestionValue || lastQuestionValue === 'Empty') {\n      // Send the user input to the server\n      var sendUserInput = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var userInputData, i, newInput;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                userInputData = {};\n                for (i = 0; i < inputs.length; i++) {\n                  console.log(inputs[i]);\n                  userInputData[inputs[i].fieldName] = inputs[i].val;\n                }\n                _context2.prev = 2;\n                _context2.next = 5;\n                return axios.post('http://localhost:3001/save', {\n                  userInput: userInputData,\n                  selectedFormId: selectedFormId\n                });\n              case 5:\n                console.log('User input saved successfully');\n\n                // Add the user inputs to the userInputs array\n                newInput = userInputData;\n                console.log(newInput);\n                setUserInputs(function (prevUserInputs) {\n                  return [].concat(_toConsumableArray(prevUserInputs), [newInput]);\n                });\n\n                // Clear the input fields\n                setLastQuestionValue('');\n                setInputs([]);\n                _context2.next = 16;\n                break;\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](2);\n                console.error('Failed to save user input:', _context2.t0);\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, null, [[2, 13]]);\n        }));\n        return function sendUserInput() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      sendUserInput();\n    }\n  }, [lastQuestionValue]);\n  useEffect(function () {\n    // Scroll to the bottom of the chat window whenever messages change\n    var chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(function () {\n    // Ask the initial question when the component mounts\n    var currentQuestion = questions[selectedFormId][currentQuestionIndex];\n    setMessages([].concat(_toConsumableArray(messages), [{\n      text: currentQuestion.text,\n      isUser: false\n    }]));\n    readOutText(currentQuestion.text); // Read out the initial question\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatbot-header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, \"ChatBot\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chat-window\",\n    className: \"chat-window\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }\n  }, messages.map(function (message, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"message \".concat(message.isUser ? 'user' : 'bot'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }\n    }, message.text);\n  }), userInputs.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message bot\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }\n  }, \"Collected Inputs:\"), userInputs.map(function (input, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 15\n      }\n    }, Object.entries(input).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        fieldName = _ref4[0],\n        fieldValue = _ref4[1];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        key: fieldName,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 23\n        }\n      }, fieldName, \":\"), \" \", fieldValue), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }\n      }));\n    }));\n  })), questions[selectedFormId][currentQuestionIndex].options ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkbox-options\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 11\n    }\n  }, questions[selectedFormId][currentQuestionIndex].options.map(function (option) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: option.value,\n      className: \"checkbox-option\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: option.value,\n      name: option.value\n      // checked={checkboxValue === option.value}\n      ,\n      checked: false,\n      onChange: function onChange() {\n        // setCheckboxValue(option.value);\n        setInputs([].concat(_toConsumableArray(inputs), [{\n          fieldName: questions[selectedFormId][currentQuestionIndex].field,\n          val: option.value\n        }]));\n        var checkboxMessage = {\n          text: option.value,\n          isUser: true\n        };\n        setMessages([].concat(_toConsumableArray(messages), [checkboxMessage]));\n        if (questions[selectedFormId][currentQuestionIndex].last === true) setLastQuestionValue('Empty');\n        askNextQuestion();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: option.value,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }\n    }, option.label));\n  })) : null), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleUserInput,\n    className: \"input-form\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    ref: inputRef,\n    value: voiceInput,\n    onChange: function onChange(e) {\n      return setVoiceInput(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 9\n    }\n  }, \"Send\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"voice-recognition\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startVoiceRecognition,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }\n  }, \"Start Voice Recognition\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stopVoiceRecognition,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }\n  }, \"Stop Voice Recognition\")));\n};\nexport default ChatBot;","map":{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","React","useState","useEffect","useRef","axios","useLocation","questions","isValidDateFormat","isValidDate","hasOnlyAlphabets","hasOnlyDigits","hasFieldLength","isValidEmailFormat","toTitle","ChatBot","_useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","currentQuestionIndex","setCurrentQuestionIndex","_useState5","_useState6","voiceInput","setVoiceInput","inputRef","_useState7","_useState8","userInputs","setUserInputs","_useState9","_useState10","inputs","setInputs","_useState11","_useState12","lastQuestionValue","setLastQuestionValue","location","selectedFormId","state","handleVoiceInput","event","transcript","results","handleVoiceError","console","log","error","readOutText","text","utterance","SpeechSynthesisUtterance","window","speechSynthesis","speak","startVoiceRecognition","SpeechRecognition","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","askNextQuestion","nextQuestion","nextQuestionMessage","isUser","concat","_toConsumableArray","endMessage","handleUserInput","_ref","_asyncToGenerator","_callee","userInput","currentQuestion","updatedMessages","mandatoryMessage","validationFailed","invalidMessage","validationCheck","invalidMessageObj","_callee$","_context","preventDefault","current","replace","trim","mandatory","prevMessages","last","options","callValidations","fieldLength","fieldName","field","val","_x","apply","arguments","sendUserInput","_ref2","_callee2","userInputData","newInput","_callee2$","_context2","post","prevUserInputs","t0","chatWindow","document","getElementById","scrollTop","scrollHeight","createElement","className","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","id","map","message","index","key","input","entries","_ref3","_ref4","fieldValue","option","checked","onChange","checkboxMessage","htmlFor","label","onSubmit","ref","target","onClick"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport axios from 'axios';\r\nimport { useLocation } from 'react-router-dom';\r\nimport questions from \"./questions\";\r\nimport { isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength, isValidEmailFormat, toTitle } from './validate';\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const inputRef = useRef(null);\r\n  const [userInputs, setUserInputs] = useState([]);\r\n  const [inputs, setInputs] = useState([]);\r\n  const [lastQuestionValue, setLastQuestionValue] = useState('');\r\n\r\n  const location = useLocation();\r\n  let selectedFormId = null;\r\n  if (location !== null) {\r\n    selectedFormId = location.state.selectedFormId;\r\n  }\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const readOutText = (text) => {\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n\r\n  const askNextQuestion = () => {\r\n    // Check if there are more questions in the selected form\r\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\r\n      // Get the next question\r\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\r\n\r\n      // Create a message for the next question\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n\r\n      // Update the state with the new question and messages\r\n      setMessages((messages) => [...messages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n\r\n      // Read out the next question\r\n      readOutText(nextQuestion.text);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!\\n Enter your Name',\r\n        isUser: false,\r\n      };\r\n      // setMessages([...messages, endMessage]);\r\n      setMessages((messages) => [...messages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n      readOutText(endMessage.text);\r\n    }\r\n  };\r\n\r\n\r\n  const handleUserInput = async (event) => {\r\n    event.preventDefault();\r\n\r\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    // Remove trailing full stop if it exists\r\n    userInput = userInput.replace(/\\.$/, '');\r\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\r\n    let updatedMessages = [];\r\n\r\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\r\n\r\n    if (userInput === \"\") {\r\n      // If field is mandatory\r\n      if (currentQuestion.mandatory) {\r\n        const mandatoryMessage = {\r\n          text: 'This field is required.',\r\n        };\r\n        setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\r\n        readOutText(mandatoryMessage.text);\r\n        return;\r\n      }\r\n\r\n      // If user input is empty, just move to the next question\r\n      if (currentQuestion.last === true)\r\n        setLastQuestionValue('Empty');\r\n      askNextQuestion();\r\n      return; // Skip further processing\r\n    } else {\r\n      if (currentQuestion.options)\r\n        return;\r\n    }\r\n\r\n    let validationFailed = false;\r\n    let invalidMessage;\r\n\r\n    if (currentQuestion.callValidations) {\r\n      for (let i = 0; i < currentQuestion.callValidations.length; i++) {\r\n        const validationCheck = currentQuestion.callValidations[i];\r\n        if (validationCheck === 'onlyAlphabets') {\r\n          if (!hasOnlyAlphabets(userInput)) {\r\n            invalidMessage = \"Field must contain only alphabets.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'onlyDigits') {\r\n          if (!hasOnlyDigits(userInput)) {\r\n            invalidMessage = \"Field must contain only digits.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'maxLength') {\r\n          if (!hasFieldLength(userInput, currentQuestion.fieldLength, false)) {\r\n            invalidMessage = \"Field exceeds the max length.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'fixedLength') {\r\n          if (!hasFieldLength(userInput, currentQuestion.fieldLength, true)) {\r\n            invalidMessage = \"Field is not of the required length.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'validEmail') {\r\n          if (!isValidEmailFormat(userInput)) {\r\n            invalidMessage = \"Field is not of proper Email id format.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'makeTitle') {\r\n          userInput = toTitle(userInput);\r\n        } else if (validationCheck === 'dateFormat') {\r\n          if (!isValidDateFormat(userInput)) {\r\n            invalidMessage = \"Field is not of proper date format.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        } else if (validationCheck === 'validDate') {\r\n          if (!isValidDate(userInput)) {\r\n            invalidMessage = \"Field is not a proper calendar date or date lies in the future.\";\r\n            validationFailed = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validationFailed) {\r\n      const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n      setMessages([...messages, invalidMessageObj]);\r\n      readOutText(invalidMessage);\r\n      return; // Exit the handleUserInput function if validation failed\r\n    }\r\n    if (userInput) {\r\n      setInputs([...inputs, { fieldName: currentQuestion.field, val: userInput }]);\r\n      if (currentQuestion.last === true)\r\n        setLastQuestionValue(userInput);\r\n\r\n      // Add the user's input to the messages\r\n      updatedMessages = [\r\n        ...messages,\r\n        { text: userInput, isUser: true },\r\n      ];\r\n      setMessages(updatedMessages);\r\n      setVoiceInput('');\r\n    }\r\n\r\n    // Move to the next field or end the conversation\r\n    askNextQuestion();\r\n  };\r\n\r\n\r\n  // Use useEffect to capture the updated dob value before sending it to the server\r\n  useEffect(() => {\r\n    if (lastQuestionValue || lastQuestionValue === 'Empty') {\r\n      // Send the user input to the server\r\n      const sendUserInput = async () => {\r\n        const userInputData = {};\r\n        for (let i = 0; i < inputs.length; i++) {\r\n          console.log(inputs[i]);\r\n          userInputData[inputs[i].fieldName] = inputs[i].val;\r\n        }\r\n\r\n        try {\r\n          await axios.post('http://localhost:3001/save', {\r\n            userInput: userInputData, selectedFormId\r\n          });\r\n          console.log('User input saved successfully');\r\n\r\n          // Add the user inputs to the userInputs array\r\n          const newInput = userInputData;\r\n          console.log(newInput);\r\n          setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\r\n\r\n          // Clear the input fields\r\n          setLastQuestionValue('');\r\n          setInputs([]);\r\n\r\n        } catch (error) {\r\n          console.error('Failed to save user input:', error);\r\n        }\r\n      };\r\n\r\n      sendUserInput();\r\n    }\r\n  }, [lastQuestionValue]);\r\n\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n    readOutText(currentQuestion.text); // Read out the initial question\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {userInputs.length > 0 && (\r\n          <div className=\"message bot\">\r\n            <h4>Collected Inputs:</h4>\r\n            {userInputs.map((input, index) => (\r\n              <div key={index}>\r\n                {Object.entries(input).map(([fieldName, fieldValue]) => (\r\n                  <div>\r\n                    <span key={fieldName}>\r\n                      <strong>{fieldName}:</strong> {fieldValue}\r\n                    </span>\r\n                    <br />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        {questions[selectedFormId][currentQuestionIndex].options ? (\r\n          <div className=\"checkbox-options\">\r\n            {questions[selectedFormId][currentQuestionIndex].options.map((option) => (\r\n              <div key={option.value} className=\"checkbox-option\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={option.value}\r\n                  name={option.value}\r\n                  // checked={checkboxValue === option.value}\r\n                  checked={false}\r\n                  onChange={() => {\r\n                    // setCheckboxValue(option.value);\r\n                    setInputs([...inputs, { fieldName: questions[selectedFormId][currentQuestionIndex].field, val: option.value }]);\r\n                    const checkboxMessage = {\r\n                      text: option.value,\r\n                      isUser: true,\r\n                    };\r\n                    setMessages([...messages, checkboxMessage]);\r\n                    if (questions[selectedFormId][currentQuestionIndex].last === true)\r\n                      setLastQuestionValue('Empty');\r\n                    askNextQuestion();\r\n                  }}\r\n                />\r\n                <label htmlFor={option.value}>{option.label}</label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          ref={inputRef}\r\n          value={voiceInput}\r\n          onChange={(e) => setVoiceInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;"],"mappings":"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"},"metadata":{},"sourceType":"module"}