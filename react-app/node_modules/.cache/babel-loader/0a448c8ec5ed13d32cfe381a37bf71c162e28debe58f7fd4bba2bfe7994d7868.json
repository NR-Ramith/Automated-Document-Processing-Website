{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [name, setName] = useState('');\n  const [personalNumber, setPersonalNumber] = useState('');\n  const [fatherName, setFatherName] = useState('');\n  const [fatherNumber, setFatherNumber] = useState('');\n  const [motherName, setMotherName] = useState('');\n  const [motherNumber, setMotherNumber] = useState('');\n  const [guardianName, setGuardianName] = useState('');\n  const [guardianNumber, setGuardianNumber] = useState('');\n  const [dob, setDob] = useState('');\n  const [date, setDate] = useState('');\n  const [address, setAddress] = useState('');\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [nationality, setNationality] = useState('');\n  const [pinCode, setPinCode] = useState('');\n  const [voiceInput, setVoiceInput] = useState('');\n  const inputRef = useRef(null);\n  const [userInputs, setUserInputs] = useState([]);\n  const questions = [{\n    id: 1,\n    text: 'What is your name?',\n    field: 'name'\n  },\n  // { id: 2, text: 'What is your personal number?', field: 'personalNumber' },\n  // { id: 3, text: \"What is your father's name?\", field: 'fatherName' },\n  // { id: 4, text: \"What is your father's number?\", field: 'fatherNumber' },\n  // { id: 5, text: \"What is your mother's name?\", field: 'motherName' },\n  // { id: 6, text: \"What is your mother's number?\", field: 'motherNumber' },\n  // { id: 7, text: \"What is your guardian's name?\", field: 'guardianName' },\n  // { id: 8, text: \"What is your guardian's number?\", field: 'guardianNumber' },\n  {\n    id: 9,\n    text: 'What is your date of birth? Speak the date in this format - YYYY dash MM dash DD',\n    field: 'dob'\n  }, {\n    id: 10,\n    text: 'What is the current date? Speak the date in this format - YYYY dash MM dash DD',\n    field: 'date'\n  }\n  // { id: 11, text: 'What is your address?', field: 'address' },\n  // { id: 12, text: 'What is your city?', field: 'city' },\n  // { id: 13, text: 'What is your state?', field: 'state' },\n  // { id: 14, text: 'What is your nationality?', field: 'nationality' },\n  // { id: 15, text: 'What is your pin code?', field: 'pinCode' },\n  ];\n\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const readOutText = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  function validateAndFormatName(input) {\n    // Check if the name contains numbers or special characters\n    if (/\\d/.test(input) || /[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\/]/.test(input)) {\n      return {\n        isValid: false,\n        formattedName: null\n      };\n    }\n\n    // Capitalize the first letter of every word\n    const words = input.split(' ');\n    const capitalizedWords = words.map(word => {\n      if (word.length > 0) {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n      }\n      return word;\n    });\n    const formattedName = capitalizedWords.join(' ');\n    return {\n      isValid: true,\n      formattedName\n    };\n  }\n  function isValidDateFormat(input) {\n    // Regular expression to match \"YYYY-MM-DD\" format\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    return regex.test(input);\n  }\n  function isValidDate(year, month, day) {\n    const dateObject = new Date(year, month - 1, day); // Month is 0-indexed\n    if (dateObject.getFullYear() !== year || dateObject.getMonth() !== month - 1 || dateObject.getDate() !== day) {\n      return false; // Invalid date\n    }\n\n    // Check if the input date is not beyond the present day\n    const currentDate = new Date();\n    if (dateObject > currentDate) {\n      return false; // Input date is in the future\n    }\n\n    // Check if the day is within the valid range for the given month\n    const lastDayOfMonth = new Date(year, month, 0).getDate();\n    if (day < 1 || day > lastDayOfMonth) {\n      return false; // Invalid day for the given month\n    }\n\n    return true; // Date is valid\n  }\n\n  const handleUserInput = async event => {\n    event.preventDefault();\n    // console.log('Handle User Input');\n    // console.log('Data:', { name, address, dob });\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    // Remove trailing full stop if it exists\n    userInput = userInput.replace(/\\.$/, '');\n    const currentQuestion = questions[currentQuestionIndex];\n\n    // Validation and formatting for name fields\n    if (currentQuestion.field === 'name' || currentQuestion.field === 'fatherName' || currentQuestion.field === 'motherName' || currentQuestion.field === 'guardianName' || currentQuestion.field === 'nationality') {\n      const {\n        isValid,\n        formattedName\n      } = validateAndFormatName(userInput);\n      if (!isValid) {\n        const invalidMessage = \"Invalid Name. Please enter a valid name with no numbers and special characters.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n\n      userInput = formattedName; // Use the formatted name\n    }\n\n    // Validation for number\n    if (currentQuestion.field === 'personalNumber') {\n      if (userInput.length !== 10 || !/^\\d+$/.test(userInput)) {\n        const invalidMessage = \"Invalid Number. Please enter a 10-digit numeric number.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n    }\n\n    // Validation for pinCode\n    if (currentQuestion.field === 'pinCode') {\n      if (userInput.length !== 6 || !/^\\d+$/.test(userInput)) {\n        const invalidMessage = \"Invalid Pin Code. Please enter a 6-digit numeric number.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n    }\n\n    // Validation for dates\n    if (currentQuestion.field === 'date' || currentQuestion.field === 'dob') {\n      if (!isValidDateFormat(userInput)) {\n        const invalidMessage = \"Invalid Date Format. Please use YYYY-MM-DD format.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n      // Check if the date is a valid date\n      const parts = userInput.split('-');\n      const year = parseInt(parts[0], 10);\n      const month = parseInt(parts[1], 10);\n      const day = parseInt(parts[2], 10);\n      if (!isValidDate(year, month, day)) {\n        const invalidMessage = \"Invalid Date. Please enter a valid calendar date.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n    }\n\n    // Capture the user's input for the current field\n    switch (currentQuestion.field) {\n      case 'name':\n        setName(userInput);\n        break;\n      case 'personalNumber':\n        setPersonalNumber(userInput);\n        break;\n      case 'fatherName':\n        setFatherName(userInput);\n        break;\n      case 'fatherNumber':\n        setFatherNumber(userInput);\n        break;\n      case 'motherName':\n        setMotherName(userInput);\n        break;\n      case 'motherNumber':\n        setMotherNumber(userInput);\n        break;\n      case 'guardianName':\n        setGuardianName(userInput);\n        break;\n      case 'guardianNumber':\n        setGuardianNumber(userInput);\n        break;\n      case 'dob':\n        setDob(userInput);\n        break;\n      case 'date':\n        setDate(userInput);\n        break;\n      case 'address':\n        setAddress(userInput);\n        break;\n      case 'city':\n        setCity(userInput);\n        break;\n      case 'state':\n        setState(userInput);\n        break;\n      case 'nationality':\n        setNationality(userInput);\n        break;\n      case 'pinCode':\n        setPinCode(userInput);\n        break;\n      default:\n        break;\n    }\n\n    // Add the user's input to the messages\n    const updatedMessages = [...messages, {\n      text: userInput,\n      isUser: true\n    }];\n    setMessages(updatedMessages);\n    setVoiceInput('');\n\n    // Move to the next field or end the conversation\n    if (currentQuestionIndex + 1 < questions.length) {\n      // Ask the next question\n      const nextQuestion = questions[currentQuestionIndex + 1];\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n      setMessages([...updatedMessages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n\n      // Read out the next question\n      readOutText(nextQuestion.text);\n    } else {\n      // Conversation ended, you can handle this however you want\n      const endMessage = {\n        text: 'Thank you for the conversation!\\n Enter your Name',\n        isUser: false\n      };\n      setMessages([...updatedMessages, endMessage]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n      readOutText(endMessage.text);\n    }\n  };\n\n  // Use useEffect to capture the updated dob value before sending it to the server\n  useEffect(() => {\n    if (dob) {\n      // Capture the updated dob value\n      const updatedDob = dob;\n\n      // Send the user input to the server\n      const sendUserInput = async () => {\n        try {\n          await axios.post('http://localhost:3001/save', {\n            userInput: {\n              name,\n              address,\n              dob: updatedDob\n            }\n          });\n          console.log('User input saved successfully');\n\n          // Add the user inputs to the userInputs array\n          const newInput = {\n            name,\n            address,\n            dob: updatedDob\n          };\n          setUserInputs(prevUserInputs => [...prevUserInputs, newInput]);\n\n          // Clear the input fields\n          setName('');\n          setAddress('');\n          setDob('');\n        } catch (error) {\n          console.error('Failed to save user input:', error);\n        }\n      };\n      sendUserInput();\n    }\n  }, [dob]);\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n    readOutText(currentQuestion.text); // Read out the initial question\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    // Display collected inputs if userInputs array is not empty\n    if (userInputs.length > 0) {\n      const collectedInputsMessage = {\n        text: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Collected Inputs:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this), userInputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }, this), \" \", input.name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Address:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this), \" \", input.address, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date of Birth:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this), \" \", input.dob, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this),\n        isUser: false\n      };\n      setMessages([...messages, collectedInputsMessage]);\n    }\n  }, [userInputs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      className: \"chat-window\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isUser ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this)), coll]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        value: voiceInput,\n        onChange: e => setVoiceInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recognition\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startVoiceRecognition,\n        children: \"Start Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopVoiceRecognition,\n        children: \"Stop Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"eh4xZZM+vAlLmWeWt8qHczZ7K28=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","currentQuestionIndex","setCurrentQuestionIndex","name","setName","personalNumber","setPersonalNumber","fatherName","setFatherName","fatherNumber","setFatherNumber","motherName","setMotherName","motherNumber","setMotherNumber","guardianName","setGuardianName","guardianNumber","setGuardianNumber","dob","setDob","date","setDate","address","setAddress","city","setCity","state","setState","nationality","setNationality","pinCode","setPinCode","voiceInput","setVoiceInput","inputRef","userInputs","setUserInputs","questions","id","text","field","handleVoiceInput","event","transcript","results","handleVoiceError","console","log","error","readOutText","utterance","SpeechSynthesisUtterance","window","speechSynthesis","speak","startVoiceRecognition","SpeechRecognition","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","validateAndFormatName","input","test","isValid","formattedName","words","split","capitalizedWords","map","word","length","charAt","toUpperCase","slice","toLowerCase","join","isValidDateFormat","regex","isValidDate","year","month","day","dateObject","Date","getFullYear","getMonth","getDate","currentDate","lastDayOfMonth","handleUserInput","preventDefault","userInput","current","value","replace","currentQuestion","invalidMessage","invalidMessageObj","isUser","parts","parseInt","updatedMessages","nextQuestion","nextQuestionMessage","endMessage","updatedDob","sendUserInput","post","newInput","prevUserInputs","chatWindow","document","getElementById","scrollTop","scrollHeight","collectedInputsMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","message","coll","onSubmit","type","ref","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport axios from 'axios';\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [name, setName] = useState('');\r\n  const [personalNumber, setPersonalNumber] = useState('');\r\n  const [fatherName, setFatherName] = useState('');\r\n  const [fatherNumber, setFatherNumber] = useState('');\r\n  const [motherName, setMotherName] = useState('');\r\n  const [motherNumber, setMotherNumber] = useState('');\r\n  const [guardianName, setGuardianName] = useState('');\r\n  const [guardianNumber, setGuardianNumber] = useState('');\r\n  const [dob, setDob] = useState('');\r\n  const [date, setDate] = useState('');\r\n  const [address, setAddress] = useState('');\r\n  const [city, setCity] = useState('');\r\n  const [state, setState] = useState('');\r\n  const [nationality, setNationality] = useState('');\r\n  const [pinCode, setPinCode] = useState('');\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const inputRef = useRef(null);\r\n  const [userInputs, setUserInputs] = useState([]);\r\n\r\n  const questions = [\r\n    { id: 1, text: 'What is your name?', field: 'name' },\r\n    // { id: 2, text: 'What is your personal number?', field: 'personalNumber' },\r\n    // { id: 3, text: \"What is your father's name?\", field: 'fatherName' },\r\n    // { id: 4, text: \"What is your father's number?\", field: 'fatherNumber' },\r\n    // { id: 5, text: \"What is your mother's name?\", field: 'motherName' },\r\n    // { id: 6, text: \"What is your mother's number?\", field: 'motherNumber' },\r\n    // { id: 7, text: \"What is your guardian's name?\", field: 'guardianName' },\r\n    // { id: 8, text: \"What is your guardian's number?\", field: 'guardianNumber' },\r\n    { id: 9, text: 'What is your date of birth? Speak the date in this format - YYYY dash MM dash DD', field: 'dob' },\r\n    { id: 10, text: 'What is the current date? Speak the date in this format - YYYY dash MM dash DD', field: 'date' },\r\n    // { id: 11, text: 'What is your address?', field: 'address' },\r\n    // { id: 12, text: 'What is your city?', field: 'city' },\r\n    // { id: 13, text: 'What is your state?', field: 'state' },\r\n    // { id: 14, text: 'What is your nationality?', field: 'nationality' },\r\n    // { id: 15, text: 'What is your pin code?', field: 'pinCode' },\r\n  ];\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const readOutText = (text) => {\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n  function validateAndFormatName(input) {\r\n    // Check if the name contains numbers or special characters\r\n    if (/\\d/.test(input) || /[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\/]/.test(input)) {\r\n      return { isValid: false, formattedName: null };\r\n    }\r\n\r\n    // Capitalize the first letter of every word\r\n    const words = input.split(' ');\r\n    const capitalizedWords = words.map((word) => {\r\n      if (word.length > 0) {\r\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n      }\r\n      return word;\r\n    });\r\n\r\n    const formattedName = capitalizedWords.join(' ');\r\n\r\n    return { isValid: true, formattedName };\r\n  }\r\n\r\n  function isValidDateFormat(input) {\r\n    // Regular expression to match \"YYYY-MM-DD\" format\r\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n\r\n    return regex.test(input);\r\n  }\r\n\r\n  function isValidDate(year, month, day) {\r\n    const dateObject = new Date(year, month - 1, day); // Month is 0-indexed\r\n    if (\r\n      dateObject.getFullYear() !== year ||\r\n      dateObject.getMonth() !== month - 1 ||\r\n      dateObject.getDate() !== day\r\n    ) {\r\n      return false; // Invalid date\r\n    }\r\n\r\n    // Check if the input date is not beyond the present day\r\n    const currentDate = new Date();\r\n    if (dateObject > currentDate) {\r\n      return false; // Input date is in the future\r\n    }\r\n\r\n    // Check if the day is within the valid range for the given month\r\n    const lastDayOfMonth = new Date(year, month, 0).getDate();\r\n    if (day < 1 || day > lastDayOfMonth) {\r\n      return false; // Invalid day for the given month\r\n    }\r\n\r\n    return true; // Date is valid\r\n  }\r\n\r\n  const handleUserInput = async (event) => {\r\n    event.preventDefault();\r\n    // console.log('Handle User Input');\r\n    // console.log('Data:', { name, address, dob });\r\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    // Remove trailing full stop if it exists\r\n    userInput = userInput.replace(/\\.$/, '');\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n\r\n    // Validation and formatting for name fields\r\n    if (currentQuestion.field === 'name' ||\r\n      currentQuestion.field === 'fatherName' ||\r\n      currentQuestion.field === 'motherName' ||\r\n      currentQuestion.field === 'guardianName' ||\r\n      currentQuestion.field === 'nationality') {\r\n      const { isValid, formattedName } = validateAndFormatName(userInput);\r\n      if (!isValid) {\r\n        const invalidMessage = \"Invalid Name. Please enter a valid name with no numbers and special characters.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n      userInput = formattedName; // Use the formatted name\r\n    }\r\n\r\n    // Validation for number\r\n    if (currentQuestion.field === 'personalNumber') {\r\n      if (userInput.length !== 10 || !/^\\d+$/.test(userInput)) {\r\n        const invalidMessage = \"Invalid Number. Please enter a 10-digit numeric number.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n    }\r\n\r\n    // Validation for pinCode\r\n    if (currentQuestion.field === 'pinCode') {\r\n      if (userInput.length !== 6 || !/^\\d+$/.test(userInput)) {\r\n        const invalidMessage = \"Invalid Pin Code. Please enter a 6-digit numeric number.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n    }\r\n\r\n    // Validation for dates\r\n    if (currentQuestion.field === 'date' || currentQuestion.field === 'dob') {\r\n      if (!isValidDateFormat(userInput)) {\r\n        const invalidMessage = \"Invalid Date Format. Please use YYYY-MM-DD format.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n      // Check if the date is a valid date\r\n      const parts = userInput.split('-');\r\n      const year = parseInt(parts[0], 10);\r\n      const month = parseInt(parts[1], 10);\r\n      const day = parseInt(parts[2], 10);\r\n\r\n      if (!isValidDate(year, month, day)) {\r\n        const invalidMessage = \"Invalid Date. Please enter a valid calendar date.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n    }\r\n\r\n    // Capture the user's input for the current field\r\n    switch (currentQuestion.field) {\r\n      case 'name':\r\n        setName(userInput);\r\n        break;\r\n      case 'personalNumber':\r\n        setPersonalNumber(userInput);\r\n        break;\r\n      case 'fatherName':\r\n        setFatherName(userInput);\r\n        break;\r\n      case 'fatherNumber':\r\n        setFatherNumber(userInput);\r\n        break;\r\n      case 'motherName':\r\n        setMotherName(userInput);\r\n        break;\r\n      case 'motherNumber':\r\n        setMotherNumber(userInput);\r\n        break;\r\n      case 'guardianName':\r\n        setGuardianName(userInput);\r\n        break;\r\n      case 'guardianNumber':\r\n        setGuardianNumber(userInput);\r\n        break;\r\n      case 'dob':\r\n        setDob(userInput);\r\n        break;\r\n      case 'date':\r\n        setDate(userInput);\r\n        break;\r\n      case 'address':\r\n        setAddress(userInput);\r\n        break;\r\n      case 'city':\r\n        setCity(userInput);\r\n        break;\r\n      case 'state':\r\n        setState(userInput);\r\n        break;\r\n      case 'nationality':\r\n        setNationality(userInput);\r\n        break;\r\n      case 'pinCode':\r\n        setPinCode(userInput);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // Add the user's input to the messages\r\n    const updatedMessages = [\r\n      ...messages,\r\n      { text: userInput, isUser: true },\r\n    ];\r\n    setMessages(updatedMessages);\r\n    setVoiceInput('');\r\n\r\n    // Move to the next field or end the conversation\r\n    if (currentQuestionIndex + 1 < questions.length) {\r\n      // Ask the next question\r\n      const nextQuestion = questions[currentQuestionIndex + 1];\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n      setMessages([...updatedMessages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n\r\n      // Read out the next question\r\n      readOutText(nextQuestion.text);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!\\n Enter your Name',\r\n        isUser: false,\r\n      };\r\n      setMessages([...updatedMessages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n      readOutText(endMessage.text);\r\n    }\r\n  };\r\n\r\n  // Use useEffect to capture the updated dob value before sending it to the server\r\n  useEffect(() => {\r\n    if (dob) {\r\n      // Capture the updated dob value\r\n      const updatedDob = dob;\r\n\r\n      // Send the user input to the server\r\n      const sendUserInput = async () => {\r\n        try {\r\n          await axios.post('http://localhost:3001/save', {\r\n            userInput: {\r\n              name,\r\n              address,\r\n              dob: updatedDob,\r\n            },\r\n          });\r\n          console.log('User input saved successfully');\r\n\r\n          // Add the user inputs to the userInputs array\r\n          const newInput = { name, address, dob: updatedDob };\r\n          setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\r\n\r\n          // Clear the input fields\r\n          setName('');\r\n          setAddress('');\r\n          setDob('');\r\n        } catch (error) {\r\n          console.error('Failed to save user input:', error);\r\n        }\r\n      };\r\n\r\n      sendUserInput();\r\n    }\r\n  }, [dob]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n    readOutText(currentQuestion.text); // Read out the initial question\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    // Display collected inputs if userInputs array is not empty\r\n    if (userInputs.length > 0) {\r\n      const collectedInputsMessage = {\r\n        text: (\r\n          <div className=\"message bot\">\r\n            <h4>Collected Inputs:</h4>\r\n            {userInputs.map((input, index) => (\r\n              <div key={index}>\r\n                <strong>Name:</strong> {input.name}\r\n                <br />\r\n                <strong>Address:</strong> {input.address}\r\n                <br />\r\n                <strong>Date of Birth:</strong> {input.dob}\r\n                <br />\r\n                <br />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ),\r\n        isUser: false,\r\n      };\r\n      setMessages([...messages, collectedInputsMessage]);\r\n    }\r\n  }, [userInputs]);\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {coll}\r\n\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          ref={inputRef}\r\n          value={voiceInput}\r\n          onChange={(e) => setVoiceInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,aAAa;AACpB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACwB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC0B,cAAc,EAAEC,iBAAiB,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC4B,GAAG,EAAEC,MAAM,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAAC8B,IAAI,EAAEC,OAAO,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACgC,OAAO,EAAEC,UAAU,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkC,IAAI,EAAEC,OAAO,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACoC,KAAK,EAAEC,QAAQ,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACsC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACwC,OAAO,EAAEC,UAAU,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC0C,UAAU,EAAEC,aAAa,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM4C,QAAQ,GAAG1C,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAAC2C,UAAU,EAAEC,aAAa,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAM+C,SAAS,GAAG,CAChB;IAAEC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,oBAAoB;IAAEC,KAAK,EAAE;EAAO,CAAC;EACpD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,kFAAkF;IAAEC,KAAK,EAAE;EAAM,CAAC,EACjH;IAAEF,EAAE,EAAE,EAAE;IAAEC,IAAI,EAAE,gFAAgF;IAAEC,KAAK,EAAE;EAAO;EAChH;EACA;EACA;EACA;EACA;EAAA,CACD;;EAED,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACD,UAAU;IACjDV,aAAa,CAACU,UAAU,CAAC;EAC3B,CAAC;EAED,MAAME,gBAAgB,GAAIH,KAAK,IAAK;IAClCI,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEL,KAAK,CAACM,KAAK,CAAC;EACtD,CAAC;EAED,MAAMC,WAAW,GAAIV,IAAI,IAAK;IAC5B,MAAMW,SAAS,GAAG,IAAIC,wBAAwB,CAACZ,IAAI,CAAC;IACpDa,MAAM,CAACC,eAAe,CAACC,KAAK,CAACJ,SAAS,CAAC;EACzC,CAAC;EAED,MAAMK,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMC,iBAAiB,GACrBJ,MAAM,CAACI,iBAAiB,IAAIJ,MAAM,CAACK,uBAAuB;IAC5D,MAAMC,WAAW,GAAG,IAAIF,iBAAiB,CAAC,CAAC;IAC3CE,WAAW,CAACC,cAAc,GAAG,KAAK;IAClCD,WAAW,CAACE,IAAI,GAAG,OAAO;IAC1BF,WAAW,CAACG,gBAAgB,CAAC,QAAQ,EAAEpB,gBAAgB,CAAC;IACxDiB,WAAW,CAACG,gBAAgB,CAAC,OAAO,EAAEhB,gBAAgB,CAAC;IACvDa,WAAW,CAACI,KAAK,CAAC,CAAC;EACrB,CAAC;EAED,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IACjC,MAAMP,iBAAiB,GACrBJ,MAAM,CAACI,iBAAiB,IAAIJ,MAAM,CAACK,uBAAuB;IAC5D,MAAMC,WAAW,GAAG,IAAIF,iBAAiB,CAAC,CAAC;IAC3CE,WAAW,CAACM,IAAI,CAAC,CAAC;EACpB,CAAC;EAED,SAASC,qBAAqBA,CAACC,KAAK,EAAE;IACpC;IACA,IAAI,IAAI,CAACC,IAAI,CAACD,KAAK,CAAC,IAAI,iCAAiC,CAACC,IAAI,CAACD,KAAK,CAAC,EAAE;MACrE,OAAO;QAAEE,OAAO,EAAE,KAAK;QAAEC,aAAa,EAAE;MAAK,CAAC;IAChD;;IAEA;IACA,MAAMC,KAAK,GAAGJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC;IAC9B,MAAMC,gBAAgB,GAAGF,KAAK,CAACG,GAAG,CAAEC,IAAI,IAAK;MAC3C,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACnB,OAAOD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGH,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnE;MACA,OAAOL,IAAI;IACb,CAAC,CAAC;IAEF,MAAML,aAAa,GAAGG,gBAAgB,CAACQ,IAAI,CAAC,GAAG,CAAC;IAEhD,OAAO;MAAEZ,OAAO,EAAE,IAAI;MAAEC;IAAc,CAAC;EACzC;EAEA,SAASY,iBAAiBA,CAACf,KAAK,EAAE;IAChC;IACA,MAAMgB,KAAK,GAAG,qBAAqB;IAEnC,OAAOA,KAAK,CAACf,IAAI,CAACD,KAAK,CAAC;EAC1B;EAEA,SAASiB,WAAWA,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAE;IACrC,MAAMC,UAAU,GAAG,IAAIC,IAAI,CAACJ,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,CAAC,CAAC,CAAC;IACnD,IACEC,UAAU,CAACE,WAAW,CAAC,CAAC,KAAKL,IAAI,IACjCG,UAAU,CAACG,QAAQ,CAAC,CAAC,KAAKL,KAAK,GAAG,CAAC,IACnCE,UAAU,CAACI,OAAO,CAAC,CAAC,KAAKL,GAAG,EAC5B;MACA,OAAO,KAAK,CAAC,CAAC;IAChB;;IAEA;IACA,MAAMM,WAAW,GAAG,IAAIJ,IAAI,CAAC,CAAC;IAC9B,IAAID,UAAU,GAAGK,WAAW,EAAE;MAC5B,OAAO,KAAK,CAAC,CAAC;IAChB;;IAEA;IACA,MAAMC,cAAc,GAAG,IAAIL,IAAI,CAACJ,IAAI,EAAEC,KAAK,EAAE,CAAC,CAAC,CAACM,OAAO,CAAC,CAAC;IACzD,IAAIL,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAGO,cAAc,EAAE;MACnC,OAAO,KAAK,CAAC,CAAC;IAChB;;IAEA,OAAO,IAAI,CAAC,CAAC;EACf;;EAEA,MAAMC,eAAe,GAAG,MAAOpD,KAAK,IAAK;IACvCA,KAAK,CAACqD,cAAc,CAAC,CAAC;IACtB;IACA;IACA,IAAIC,SAAS,GAAGhE,UAAU,IAAIE,QAAQ,CAAC+D,OAAO,CAACC,KAAK,CAAC,CAAC;IACtD;IACAF,SAAS,GAAGA,SAAS,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IACxC,MAAMC,eAAe,GAAG/D,SAAS,CAACrC,oBAAoB,CAAC;;IAEvD;IACA,IAAIoG,eAAe,CAAC5D,KAAK,KAAK,MAAM,IAClC4D,eAAe,CAAC5D,KAAK,KAAK,YAAY,IACtC4D,eAAe,CAAC5D,KAAK,KAAK,YAAY,IACtC4D,eAAe,CAAC5D,KAAK,KAAK,cAAc,IACxC4D,eAAe,CAAC5D,KAAK,KAAK,aAAa,EAAE;MACzC,MAAM;QAAE4B,OAAO;QAAEC;MAAc,CAAC,GAAGJ,qBAAqB,CAAC+B,SAAS,CAAC;MACnE,IAAI,CAAC5B,OAAO,EAAE;QACZ,MAAMiC,cAAc,GAAG,iFAAiF;QACxG,MAAMC,iBAAiB,GAAG;UAAE/D,IAAI,EAAE8D,cAAc;UAAEE,MAAM,EAAE;QAAM,CAAC;QAEjExG,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEwG,iBAAiB,CAAC,CAAC;QAC7CrD,WAAW,CAACoD,cAAc,CAAC;QAC3B,OAAO,CAAC;MACV;;MACAL,SAAS,GAAG3B,aAAa,CAAC,CAAC;IAC7B;;IAEA;IACA,IAAI+B,eAAe,CAAC5D,KAAK,KAAK,gBAAgB,EAAE;MAC9C,IAAIwD,SAAS,CAACrB,MAAM,KAAK,EAAE,IAAI,CAAC,OAAO,CAACR,IAAI,CAAC6B,SAAS,CAAC,EAAE;QACvD,MAAMK,cAAc,GAAG,yDAAyD;QAChF,MAAMC,iBAAiB,GAAG;UAAE/D,IAAI,EAAE8D,cAAc;UAAEE,MAAM,EAAE;QAAM,CAAC;QAEjExG,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEwG,iBAAiB,CAAC,CAAC;QAC7CrD,WAAW,CAACoD,cAAc,CAAC;QAC3B,OAAO,CAAC;MACV;IACF;;IAEA;IACA,IAAID,eAAe,CAAC5D,KAAK,KAAK,SAAS,EAAE;MACvC,IAAIwD,SAAS,CAACrB,MAAM,KAAK,CAAC,IAAI,CAAC,OAAO,CAACR,IAAI,CAAC6B,SAAS,CAAC,EAAE;QACtD,MAAMK,cAAc,GAAG,0DAA0D;QACjF,MAAMC,iBAAiB,GAAG;UAAE/D,IAAI,EAAE8D,cAAc;UAAEE,MAAM,EAAE;QAAM,CAAC;QAEjExG,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEwG,iBAAiB,CAAC,CAAC;QAC7CrD,WAAW,CAACoD,cAAc,CAAC;QAC3B,OAAO,CAAC;MACV;IACF;;IAEA;IACA,IAAID,eAAe,CAAC5D,KAAK,KAAK,MAAM,IAAI4D,eAAe,CAAC5D,KAAK,KAAK,KAAK,EAAE;MACvE,IAAI,CAACyC,iBAAiB,CAACe,SAAS,CAAC,EAAE;QACjC,MAAMK,cAAc,GAAG,oDAAoD;QAC3E,MAAMC,iBAAiB,GAAG;UAAE/D,IAAI,EAAE8D,cAAc;UAAEE,MAAM,EAAE;QAAM,CAAC;QAEjExG,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEwG,iBAAiB,CAAC,CAAC;QAC7CrD,WAAW,CAACoD,cAAc,CAAC;QAC3B,OAAO,CAAC;MACV;MACA;MACA,MAAMG,KAAK,GAAGR,SAAS,CAACzB,KAAK,CAAC,GAAG,CAAC;MAClC,MAAMa,IAAI,GAAGqB,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;MACnC,MAAMnB,KAAK,GAAGoB,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;MACpC,MAAMlB,GAAG,GAAGmB,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;MAElC,IAAI,CAACrB,WAAW,CAACC,IAAI,EAAEC,KAAK,EAAEC,GAAG,CAAC,EAAE;QAClC,MAAMe,cAAc,GAAG,mDAAmD;QAC1E,MAAMC,iBAAiB,GAAG;UAAE/D,IAAI,EAAE8D,cAAc;UAAEE,MAAM,EAAE;QAAM,CAAC;QAEjExG,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEwG,iBAAiB,CAAC,CAAC;QAC7CrD,WAAW,CAACoD,cAAc,CAAC;QAC3B,OAAO,CAAC;MACV;IACF;;IAEA;IACA,QAAQD,eAAe,CAAC5D,KAAK;MAC3B,KAAK,MAAM;QACTrC,OAAO,CAAC6F,SAAS,CAAC;QAClB;MACF,KAAK,gBAAgB;QACnB3F,iBAAiB,CAAC2F,SAAS,CAAC;QAC5B;MACF,KAAK,YAAY;QACfzF,aAAa,CAACyF,SAAS,CAAC;QACxB;MACF,KAAK,cAAc;QACjBvF,eAAe,CAACuF,SAAS,CAAC;QAC1B;MACF,KAAK,YAAY;QACfrF,aAAa,CAACqF,SAAS,CAAC;QACxB;MACF,KAAK,cAAc;QACjBnF,eAAe,CAACmF,SAAS,CAAC;QAC1B;MACF,KAAK,cAAc;QACjBjF,eAAe,CAACiF,SAAS,CAAC;QAC1B;MACF,KAAK,gBAAgB;QACnB/E,iBAAiB,CAAC+E,SAAS,CAAC;QAC5B;MACF,KAAK,KAAK;QACR7E,MAAM,CAAC6E,SAAS,CAAC;QACjB;MACF,KAAK,MAAM;QACT3E,OAAO,CAAC2E,SAAS,CAAC;QAClB;MACF,KAAK,SAAS;QACZzE,UAAU,CAACyE,SAAS,CAAC;QACrB;MACF,KAAK,MAAM;QACTvE,OAAO,CAACuE,SAAS,CAAC;QAClB;MACF,KAAK,OAAO;QACVrE,QAAQ,CAACqE,SAAS,CAAC;QACnB;MACF,KAAK,aAAa;QAChBnE,cAAc,CAACmE,SAAS,CAAC;QACzB;MACF,KAAK,SAAS;QACZjE,UAAU,CAACiE,SAAS,CAAC;QACrB;MACF;QACE;IACJ;;IAEA;IACA,MAAMU,eAAe,GAAG,CACtB,GAAG5G,QAAQ,EACX;MAAEyC,IAAI,EAAEyD,SAAS;MAAEO,MAAM,EAAE;IAAK,CAAC,CAClC;IACDxG,WAAW,CAAC2G,eAAe,CAAC;IAC5BzE,aAAa,CAAC,EAAE,CAAC;;IAEjB;IACA,IAAIjC,oBAAoB,GAAG,CAAC,GAAGqC,SAAS,CAACsC,MAAM,EAAE;MAC/C;MACA,MAAMgC,YAAY,GAAGtE,SAAS,CAACrC,oBAAoB,GAAG,CAAC,CAAC;MACxD,MAAM4G,mBAAmB,GAAG;QAAErE,IAAI,EAAEoE,YAAY,CAACpE,IAAI;QAAEgE,MAAM,EAAE;MAAM,CAAC;MACtExG,WAAW,CAAC,CAAC,GAAG2G,eAAe,EAAEE,mBAAmB,CAAC,CAAC;MACtD3G,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;;MAEjD;MACAiD,WAAW,CAAC0D,YAAY,CAACpE,IAAI,CAAC;IAChC,CAAC,MAAM;MACL;MACA,MAAMsE,UAAU,GAAG;QACjBtE,IAAI,EAAE,mDAAmD;QACzDgE,MAAM,EAAE;MACV,CAAC;MACDxG,WAAW,CAAC,CAAC,GAAG2G,eAAe,EAAEG,UAAU,CAAC,CAAC;MAC7C5G,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5BgD,WAAW,CAAC4D,UAAU,CAACtE,IAAI,CAAC;IAC9B;EACF,CAAC;;EAED;EACAhD,SAAS,CAAC,MAAM;IACd,IAAI2B,GAAG,EAAE;MACP;MACA,MAAM4F,UAAU,GAAG5F,GAAG;;MAEtB;MACA,MAAM6F,aAAa,GAAG,MAAAA,CAAA,KAAY;QAChC,IAAI;UACF,MAAMtH,KAAK,CAACuH,IAAI,CAAC,4BAA4B,EAAE;YAC7ChB,SAAS,EAAE;cACT9F,IAAI;cACJoB,OAAO;cACPJ,GAAG,EAAE4F;YACP;UACF,CAAC,CAAC;UACFhE,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;;UAE5C;UACA,MAAMkE,QAAQ,GAAG;YAAE/G,IAAI;YAAEoB,OAAO;YAAEJ,GAAG,EAAE4F;UAAW,CAAC;UACnD1E,aAAa,CAAE8E,cAAc,IAAK,CAAC,GAAGA,cAAc,EAAED,QAAQ,CAAC,CAAC;;UAEhE;UACA9G,OAAO,CAAC,EAAE,CAAC;UACXoB,UAAU,CAAC,EAAE,CAAC;UACdJ,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC,CAAC,OAAO6B,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QACpD;MACF,CAAC;MAED+D,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAAC7F,GAAG,CAAC,CAAC;EAIT3B,SAAS,CAAC,MAAM;IACd;IACA,MAAM4H,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;IACzDF,UAAU,CAACG,SAAS,GAAGH,UAAU,CAACI,YAAY;EAChD,CAAC,EAAE,CAACzH,QAAQ,CAAC,CAAC;EAEdP,SAAS,CAAC,MAAM;IACd;IACA,MAAM6G,eAAe,GAAG/D,SAAS,CAACrC,oBAAoB,CAAC;IACvDD,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;MAAEyC,IAAI,EAAE6D,eAAe,CAAC7D,IAAI;MAAEgE,MAAM,EAAE;IAAM,CAAC,CAAC,CAAC;IACzEtD,WAAW,CAACmD,eAAe,CAAC7D,IAAI,CAAC,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERhD,SAAS,CAAC,MAAM;IACd;IACA,IAAI4C,UAAU,CAACwC,MAAM,GAAG,CAAC,EAAE;MACzB,MAAM6C,sBAAsB,GAAG;QAC7BjF,IAAI,eACF5C,OAAA;UAAK8H,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1B/H,OAAA;YAAA+H,QAAA,EAAI;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACzB3F,UAAU,CAACsC,GAAG,CAAC,CAACP,KAAK,EAAE6D,KAAK,kBAC3BpI,OAAA;YAAA+H,QAAA,gBACE/H,OAAA;cAAA+H,QAAA,EAAQ;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAC5D,KAAK,CAAChE,IAAI,eAClCP,OAAA;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACNnI,OAAA;cAAA+H,QAAA,EAAQ;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAC5D,KAAK,CAAC5C,OAAO,eACxC3B,OAAA;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACNnI,OAAA;cAAA+H,QAAA,EAAQ;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAC5D,KAAK,CAAChD,GAAG,eAC1CvB,OAAA;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACNnI,OAAA;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GAPEC,KAAK;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQV,CACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CACN;QACDvB,MAAM,EAAE;MACV,CAAC;MACDxG,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE0H,sBAAsB,CAAC,CAAC;IACpD;EACF,CAAC,EAAE,CAACrF,UAAU,CAAC,CAAC;EAEhB,oBACExC,OAAA;IAAK8H,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChC/H,OAAA;MAAK8H,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC7B/H,OAAA;QAAA+H,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,eACNnI,OAAA;MAAK2C,EAAE,EAAC,aAAa;MAACmF,SAAS,EAAC,aAAa;MAAAC,QAAA,GAC1C5H,QAAQ,CAAC2E,GAAG,CAAC,CAACuD,OAAO,EAAED,KAAK,kBAC3BpI,OAAA;QAEE8H,SAAS,EAAG,WAAUO,OAAO,CAACzB,MAAM,GAAG,MAAM,GAAG,KAAM,EAAE;QAAAmB,QAAA,EAEvDM,OAAO,CAACzF;MAAI,GAHRwF,KAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIP,CACN,CAAC,EACDG,IAAI;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEF,CAAC,eACNnI,OAAA;MAAMuI,QAAQ,EAAEpC,eAAgB;MAAC2B,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACrD/H,OAAA;QACEwI,IAAI,EAAC,MAAM;QACXC,GAAG,EAAElG,QAAS;QACdgE,KAAK,EAAElE,UAAW;QAClBqG,QAAQ,EAAGC,CAAC,IAAKrG,aAAa,CAACqG,CAAC,CAACC,MAAM,CAACrC,KAAK;MAAE;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC,eACFnI,OAAA;QAAQwI,IAAI,EAAC,QAAQ;QAAAT,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eACPnI,OAAA;MAAK8H,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChC/H,OAAA;QAAQ6I,OAAO,EAAEjF,qBAAsB;QAAAmE,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxEnI,OAAA;QAAQ6I,OAAO,EAAEzE,oBAAqB;QAAA2D,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjI,EAAA,CAtYID,OAAO;AAAA6I,EAAA,GAAP7I,OAAO;AAwYb,eAAeA,OAAO;AAAC,IAAA6I,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}