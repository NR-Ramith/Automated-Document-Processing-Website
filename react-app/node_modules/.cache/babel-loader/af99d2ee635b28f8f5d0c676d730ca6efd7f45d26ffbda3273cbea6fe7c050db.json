{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport questions from \"./questions\";\nimport { validateAndFormatName, isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength, isValidEmailFormat, toTitle } from './validate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [name, setName] = useState(null);\n  const [personalNumber, setPersonalNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [fatherName, setFatherName] = useState('');\n  const [fatherNumber, setFatherNumber] = useState('');\n  const [motherName, setMotherName] = useState('');\n  const [motherNumber, setMotherNumber] = useState('');\n  const [guardianName, setGuardianName] = useState('');\n  const [guardianNumber, setGuardianNumber] = useState('');\n  const [dob, setDob] = useState('');\n  const [date, setDate] = useState('');\n  const [address, setAddress] = useState('');\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [nationality, setNationality] = useState('');\n  const [pinCode, setPinCode] = useState('');\n  const [voiceInput, setVoiceInput] = useState('');\n  const inputRef = useRef(null);\n  const [userInputs, setUserInputs] = useState([]);\n  const [familyIncome, setFamilyIncome] = useState('');\n  const [inputs, setInputs] = useState([]);\n  const [lastQuestionValue, setLastQuestionValue] = useState('');\n  const functionMap = {\n    'name': setName\n    // 'personalNumber': setPersonalNumber,\n    // Add more functions here for other fields\n  };\n\n  const location = useLocation();\n  let selectedFormId = null;\n  if (location !== null) {\n    selectedFormId = location.state.selectedFormId;\n    console.log(selectedFormId);\n  }\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const readOutText = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  const askNextQuestion = () => {\n    // Check if there are more questions in the selected form\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\n      // Get the next question\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\n\n      // Create a message for the next question\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n\n      // Update the state with the new question and messages\n      setMessages([...messages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n\n      // Read out the next question\n      readOutText(nextQuestion.text);\n    } else {\n      // Conversation ended, you can handle this however you want\n      const endMessage = {\n        text: 'Thank you for the conversation!\\n Enter your Name',\n        isUser: false\n      };\n      setMessages([...messages, endMessage]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n      readOutText(endMessage.text);\n    }\n  };\n  const handleUserInput = async event => {\n    event.preventDefault();\n    // console.log('Handle User Input');\n    // console.log('Data:', { name, address, dob });\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    // Remove trailing full stop if it exists\n    userInput = userInput.replace(/\\.$/, '');\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\n    let updatedMessages = [];\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\n\n    if (userInput === \"\") {\n      // If field is mandatory\n      if (currentQuestion.field === 'name' || currentQuestion.field === 'personalNumber') {\n        const mandatoryMessage = {\n          text: 'This field is required.'\n        };\n        setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\n        readOutText(mandatoryMessage.text);\n        return;\n      }\n      if (currentQuestion.field === 'familyIncome') {\n        if (familyIncome === '') {\n          const mandatoryMessage = {\n            text: 'Please select an option.',\n            isUser: false\n          };\n          setMessages([...messages, mandatoryMessage]);\n          readOutText(mandatoryMessage.text);\n          return;\n        }\n        // userInput=familyIncome;\n        // console.log(familyIncome);\n        // const familyIncomeMessage = { text: 'yes', isUser: true };\n        // setMessages(prevMessages => [...prevMessages, familyIncomeMessage]);\n        // setMessages([...messages, familyIncomeMessage]);\n        // readOutText(familyIncomeMessage.text);\n        // console.log(messages)\n        // setVoiceInput('');\n        // setUserInputs((prevUserInputs) => [...prevUserInputs, { familyIncome }]);\n      }\n      // If user input is empty, just move to the next question\n      askNextQuestion();\n      return; // Skip further processing\n    }\n\n    let validationFailed = false;\n    let invalidMessage;\n    for (let i = 0; i < currentQuestion.callValidations.length; i++) {\n      const validationCheck = currentQuestion.callValidations[i];\n      if (validationCheck === 'onlyAlphabets') {\n        if (!hasOnlyAlphabets(userInput)) {\n          invalidMessage = \"Field must contain only alphabets.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'onlyDigits') {\n        if (!hasOnlyDigits(userInput)) {\n          invalidMessage = \"Field must contain only digits.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'maxLength') {\n        if (!hasFieldLength(userInput, currentQuestion.fieldLength, false)) {\n          invalidMessage = \"Field exceeds the max length.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'fixedLength') {\n        if (!hasFieldLength(userInput, currentQuestion.fieldLength, true)) {\n          invalidMessage = \"Field is not of the required length.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'validEmail') {\n        if (!isValidEmailFormat(userInput)) {\n          invalidMessage = \"Field is not of proper Email id format.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'makeTitle') {\n        userInput = toTitle(userInput);\n      } else if (validationCheck === 'dateFormat') {\n        if (!isValidDateFormat(userInput)) {\n          invalidMessage = \"Field is not of proper date format.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'validDate') {\n        if (!isValidDate(userInput)) {\n          invalidMessage = \"Field is not a proper calendar date or date lies in the future.\";\n          validationFailed = true;\n          break;\n        }\n      }\n    }\n    if (validationFailed) {\n      const invalidMessageObj = {\n        text: invalidMessage,\n        isUser: false\n      };\n      setMessages([...messages, invalidMessageObj]);\n      readOutText(invalidMessage);\n      return; // Exit the handleUserInput function if validation failed\n    } else {\n      setInputs([...inputs, {\n        fieldName: currentQuestion.field,\n        val: userInput\n      }]);\n      if (currentQuestion.last === true) setLastQuestionValue(userInput);\n      // console.log(inputs)\n      // if (functionMap[currentQuestion.storeIn]) {\n      //   functionMap[currentQuestion.storeIn](userInput);\n      // }\n    }\n\n    // currentQuestion.callValidations.forEach(function (validationCheck) {\n    //   if (validationCheck === 'onlyAlphabets') {\n    //     if (!hasOnlyAlphabets(userInput)) {\n    //       const invalidMessage = \"Field must contain only alphabets.\";\n    //       const invalidMessageObj = { text: invalidMessage, isUser: false };\n    //       setMessages([...messages, invalidMessageObj]);\n    //       readOutText(invalidMessage);\n    //       return;\n    //     }\n    //   }\n    // });\n\n    // Validation and formatting for name fields\n    // if (currentQuestion.field === 'name' ||\n    //   currentQuestion.field === 'fatherName' ||\n    //   currentQuestion.field === 'motherName' ||\n    //   currentQuestion.field === 'guardianName' ||\n    //   currentQuestion.field === 'city' ||\n    //   currentQuestion.field === 'state' ||\n    //   currentQuestion.field === 'nationality') {\n    //   const { isValid, formattedName } = validateAndFormatName(userInput);\n    //   if (!isValid) {\n    //     const invalidMessage = \"Invalid Name. Please enter a valid name with no numbers and special characters.\";\n    //     const invalidMessageObj = { text: invalidMessage, isUser: false };\n\n    //     setMessages([...messages, invalidMessageObj]);\n    //     readOutText(invalidMessage);\n    //     return; // Stop further processing\n    //   }\n    //   userInput = formattedName; // Use the formatted name\n    // }\n\n    // Validation for number\n    // if (currentQuestion.field === 'personalNumber') {\n    //   if (userInput.length !== 10 || !/^\\d+$/.test(userInput)) {\n    //     const invalidMessage = \"Invalid Number. Please enter a 10-digit numeric number.\";\n    //     const invalidMessageObj = { text: invalidMessage, isUser: false };\n\n    //     setMessages([...messages, invalidMessageObj]);\n    //     readOutText(invalidMessage);\n    //     return; // Stop further processing\n    //   }\n    // }\n\n    // Validation for email\n    // if (currentQuestion.field === 'email') {\n    //   if (!/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/.test(userInput)) {\n    //     const invalidMessage = \"Invalid Email. Please enter a valid email address.\";\n    //     const invalidMessageObj = { text: invalidMessage, isUser: false };\n\n    //     setMessages([...messages, invalidMessageObj]);\n    //     readOutText(invalidMessage);\n    //     return; // Stop further processing\n    //   }\n    // }\n\n    // Validation for pinCode\n    // if (currentQuestion.field === 'pinCode') {\n    //   if (userInput.length !== 6 || !/^\\d+$/.test(userInput)) {\n    //     const invalidMessage = \"Invalid Pin Code. Please enter a 6-digit numeric number.\";\n    //     const invalidMessageObj = { text: invalidMessage, isUser: false };\n\n    //     setMessages([...messages, invalidMessageObj]);\n    //     readOutText(invalidMessage);\n    //     return; // Stop further processing\n    //   }\n    // }\n\n    // Validation for dates\n    // if (currentQuestion.field === 'date' || currentQuestion.field === 'dob') {\n    //   if (!isValidDateFormat(userInput)) {\n    //     const invalidMessage = \"Invalid Date Format. Please use YYYY-MM-DD format.\";\n    //     const invalidMessageObj = { text: invalidMessage, isUser: false };\n\n    //     setMessages([...messages, invalidMessageObj]);\n    //     readOutText(invalidMessage);\n    //     return; // Stop further processing\n    //   }\n    //   // Check if the date is a valid date\n    //   const parts = userInput.split('-');\n    //   const year = parseInt(parts[0], 10);\n    //   const month = parseInt(parts[1], 10);\n    //   const day = parseInt(parts[2], 10);\n\n    //   if (!isValidDate(year, month, day)) {\n    //     const invalidMessage = \"Invalid Date. Please enter a valid calendar date.\";\n    //     const invalidMessageObj = { text: invalidMessage, isUser: true };\n\n    //     setMessages([...messages, invalidMessageObj]);\n    //     readOutText(invalidMessage);\n    //     return; // Stop further processing\n    //   }\n    // }\n\n    // Capture the user's input for the current field\n    // switch (currentQuestion.field) {\n    //   case 'name':\n    //     // setName(userInput);\n    //     break;\n    //   case 'personalNumber':\n    //     console.log(inputs)\n    //     setPersonalNumber(userInput);\n    //     break;\n    //   case 'email':\n    //     setEmail(userInput);\n    //     break;\n    //   case 'fatherName':\n    //     setFatherName(userInput);\n    //     break;\n    //   case 'fatherNumber':\n    //     setFatherNumber(userInput);\n    //     break;\n    //   case 'motherName':\n    //     setMotherName(userInput);\n    //     break;\n    //   case 'motherNumber':\n    //     setMotherNumber(userInput);\n    //     break;\n    //   case 'guardianName':\n    //     setGuardianName(userInput);\n    //     break;\n    //   case 'guardianNumber':\n    //     setGuardianNumber(userInput);\n    //     break;\n    //   case 'dob':\n    //     setDob(userInput);\n    //     break;\n    //   case 'date':\n    //     setDate(userInput);\n    //     break;\n    //   case 'address':\n    //     setAddress(userInput);\n    //     break;\n    //   case 'city':\n    //     setCity(userInput);\n    //     break;\n    //   case 'state':\n    //     setState(userInput);\n    //     break;\n    //   case 'nationality':\n    //     setNationality(userInput);\n    //     break;\n    //   case 'pinCode':\n    //     setPinCode(userInput);\n    //     break;\n    //   default:\n    //     break;\n    // }\n\n    // Add the user's input to the messages\n    updatedMessages = [...messages, {\n      text: userInput,\n      isUser: true\n    }];\n    setMessages(updatedMessages);\n    setVoiceInput('');\n\n    // Move to the next field or end the conversation\n    // askNextQuestion();\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\n      // Ask the next question\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n      setMessages([...updatedMessages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n\n      // Read out the next question\n      readOutText(nextQuestion.text);\n    } else {\n      // Conversation ended, you can handle this however you want\n      const endMessage = {\n        text: 'Thank you for the conversation!\\n Enter your Name',\n        isUser: false\n      };\n      setMessages([...updatedMessages, endMessage]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n      readOutText(endMessage.text);\n    }\n  };\n\n  // Use useEffect to capture the updated dob value before sending it to the server\n  useEffect(() => {\n    if (lastQuestionValue) {\n      // Capture the updated dob value\n      const updatedDob = dob;\n\n      // Send the user input to the server\n      const sendUserInput = async () => {\n        const userInputData = {};\n        for (let i = 0; i < inputs.length; i++) {\n          userInputData.inputs[i].fieldName = inputs[i].val;\n        }\n        userInputData.currentQuestion.field = lastQuestionValue;\n        // Define the fields and their corresponding values\n        // const fields = {\n        //   name,\n        //   personalNumber,\n        //   email,\n        //   fatherName,\n        //   fatherNumber,\n        //   motherName,\n        //   motherNumber,\n        //   guardianName,\n        //   guardianNumber,\n        //   date,\n        //   address,\n        //   city,\n        //   state,\n        //   nationality,\n        //   pinCode,\n        //   dob: updatedDob,\n        // };\n\n        // Prepare the user input data by filtering out empty fields\n        // const userInputData = {};\n        // for (const [key, value] of Object.entries(fields)) {\n        //   if (value !== null && value !== undefined && value !== '') {\n        //     userInputData[key] = value;\n        //   }\n        // }\n        try {\n          await axios.post('http://localhost:3001/save', {\n            userInput: userInputData\n          });\n          console.log('User input saved successfully');\n\n          // Add the user inputs to the userInputs array\n          const newInput = userInputData;\n          console.log(newInput);\n          setUserInputs(prevUserInputs => [...prevUserInputs, newInput]);\n\n          // Clear the input fields\n          setLastQuestionValue('');\n          setInputs([]);\n          // setName('');\n          // setAddress('');\n          // setDob('');\n        } catch (error) {\n          console.error('Failed to save user input:', error);\n        }\n      };\n      sendUserInput();\n    }\n  }, [lastQuestionValue]);\n\n  // Use useEffect to capture the updated dob value before sending it to the server\n  // useEffect(() => {\n  //   if (dob) {\n  //     // Capture the updated dob value\n  //     const updatedDob = dob;\n\n  //     // Send the user input to the server\n  //     const sendUserInput = async () => {\n  //       // Define the fields and their corresponding values\n  //       const fields = {\n  //         name,\n  //         personalNumber,\n  //         email,\n  //         fatherName,\n  //         fatherNumber,\n  //         motherName,\n  //         motherNumber,\n  //         guardianName,\n  //         guardianNumber,\n  //         date,\n  //         address,\n  //         city,\n  //         state,\n  //         nationality,\n  //         pinCode,\n  //         dob: updatedDob,\n  //       };\n\n  //       // Prepare the user input data by filtering out empty fields\n  //       const userInputData = {};\n  //       for (const [key, value] of Object.entries(fields)) {\n  //         if (value !== null && value !== undefined && value !== '') {\n  //           userInputData[key] = value;\n  //         }\n  //       }\n  //       try {\n  //         await axios.post('http://localhost:3001/save', {\n  //           userInput: userInputData,\n  //         });\n  //         console.log('User input saved successfully');\n\n  //         // Add the user inputs to the userInputs array\n  //         const newInput = userInputData;\n  //         setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\n\n  //         // Clear the input fields\n  //         setName('');\n  //         setAddress('');\n  //         setDob('');\n  //       } catch (error) {\n  //         console.error('Failed to save user input:', error);\n  //       }\n  //     };\n\n  //     sendUserInput();\n  //   }\n  // }, [dob]);\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n    readOutText(currentQuestion.text); // Read out the initial question\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      className: \"chat-window\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isUser ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 11\n      }, this)), userInputs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Collected Inputs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this), userInputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [input.name && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 38\n            }, this), \" \", input.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 17\n          }, this), input.personalNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Personal Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 48\n            }, this), \" \", input.personalNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 17\n          }, this), input.email && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Email:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 39\n            }, this), \" \", input.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 17\n          }, this), input.fatherName && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Father's Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 44\n            }, this), \" \", input.fatherName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 38\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 17\n          }, this), input.fatherNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Father's Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 46\n            }, this), \" \", input.fatherNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 17\n          }, this), input.motherName && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Mother's Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 44\n            }, this), \" \", input.motherName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 38\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 17\n          }, this), input.motherNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Mother's Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 46\n            }, this), \" \", input.motherNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 17\n          }, this), input.guardianName && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Guardian's Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 46\n            }, this), \" \", input.guardianName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 17\n          }, this), input.guardianNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Guardian's Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 48\n            }, this), \" \", input.guardianNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 17\n          }, this), input.dob && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date of Birth:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 37\n            }, this), \" \", input.dob]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 17\n          }, this), input.date && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 38\n            }, this), \" \", input.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 17\n          }, this), input.address && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Address:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 41\n            }, this), \" \", input.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 17\n          }, this), input.city && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"City:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 38\n            }, this), \" \", input.city]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 17\n          }, this), input.state && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"State:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 39\n            }, this), \" \", input.state]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 17\n          }, this), input.nationality && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Nationality:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 45\n            }, this), \" \", input.nationality]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 17\n          }, this), input.pinCode && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"PIN Code:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 41\n            }, this), \" \", input.pinCode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 11\n      }, this), questions[selectedFormId][currentQuestionIndex].options ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-options\",\n        children: questions[selectedFormId][currentQuestionIndex].options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-option\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: option.value,\n            name: option.value,\n            checked: familyIncome === option.value,\n            onChange: () => {\n              setFamilyIncome(option.value);\n              const familyIncomeMessage = {\n                text: option.value,\n                isUser: true\n              };\n              setMessages([...messages, familyIncomeMessage]);\n              readOutText(familyIncomeMessage.text);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: option.value,\n            children: option.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 17\n          }, this)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        value: voiceInput,\n        onChange: e => setVoiceInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recognition\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startVoiceRecognition,\n        children: \"Start Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopVoiceRecognition,\n        children: \"Stop Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 550,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"8GV6aNA+UmMrY3ZZnEV/EE2dLsc=\", false, function () {\n  return [useLocation];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useLocation","questions","validateAndFormatName","isValidDateFormat","isValidDate","hasOnlyAlphabets","hasOnlyDigits","hasFieldLength","isValidEmailFormat","toTitle","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","currentQuestionIndex","setCurrentQuestionIndex","name","setName","personalNumber","setPersonalNumber","email","setEmail","fatherName","setFatherName","fatherNumber","setFatherNumber","motherName","setMotherName","motherNumber","setMotherNumber","guardianName","setGuardianName","guardianNumber","setGuardianNumber","dob","setDob","date","setDate","address","setAddress","city","setCity","state","setState","nationality","setNationality","pinCode","setPinCode","voiceInput","setVoiceInput","inputRef","userInputs","setUserInputs","familyIncome","setFamilyIncome","inputs","setInputs","lastQuestionValue","setLastQuestionValue","functionMap","location","selectedFormId","console","log","handleVoiceInput","event","transcript","results","handleVoiceError","error","readOutText","text","utterance","SpeechSynthesisUtterance","window","speechSynthesis","speak","startVoiceRecognition","SpeechRecognition","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","askNextQuestion","length","nextQuestion","nextQuestionMessage","isUser","endMessage","handleUserInput","preventDefault","userInput","current","value","replace","currentQuestion","updatedMessages","trim","field","mandatoryMessage","prevMessages","validationFailed","invalidMessage","i","callValidations","validationCheck","fieldLength","invalidMessageObj","fieldName","val","last","updatedDob","sendUserInput","userInputData","post","newInput","prevUserInputs","chatWindow","document","getElementById","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","message","index","input","options","option","type","checked","onChange","familyIncomeMessage","htmlFor","label","onSubmit","ref","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport axios from 'axios';\r\nimport { useLocation } from 'react-router-dom';\r\nimport questions from \"./questions\";\r\nimport { validateAndFormatName, isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength, isValidEmailFormat, toTitle } from './validate';\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [name, setName] = useState(null);\r\n  const [personalNumber, setPersonalNumber] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [fatherName, setFatherName] = useState('');\r\n  const [fatherNumber, setFatherNumber] = useState('');\r\n  const [motherName, setMotherName] = useState('');\r\n  const [motherNumber, setMotherNumber] = useState('');\r\n  const [guardianName, setGuardianName] = useState('');\r\n  const [guardianNumber, setGuardianNumber] = useState('');\r\n  const [dob, setDob] = useState('');\r\n  const [date, setDate] = useState('');\r\n  const [address, setAddress] = useState('');\r\n  const [city, setCity] = useState('');\r\n  const [state, setState] = useState('');\r\n  const [nationality, setNationality] = useState('');\r\n  const [pinCode, setPinCode] = useState('');\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const inputRef = useRef(null);\r\n  const [userInputs, setUserInputs] = useState([]);\r\n  const [familyIncome, setFamilyIncome] = useState('');\r\n  const [inputs, setInputs] = useState([]);\r\n\r\n  const [lastQuestionValue, setLastQuestionValue] = useState('');\r\n\r\n  const functionMap = {\r\n    'name': setName,\r\n    // 'personalNumber': setPersonalNumber,\r\n    // Add more functions here for other fields\r\n  };\r\n\r\n\r\n  const location = useLocation();\r\n  let selectedFormId = null;\r\n  if (location !== null) {\r\n    selectedFormId = location.state.selectedFormId;\r\n    console.log(selectedFormId);\r\n  }\r\n\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const readOutText = (text) => {\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n\r\n  const askNextQuestion = () => {\r\n    // Check if there are more questions in the selected form\r\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\r\n      // Get the next question\r\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\r\n\r\n      // Create a message for the next question\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n\r\n      // Update the state with the new question and messages\r\n      setMessages([...messages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n\r\n      // Read out the next question\r\n      readOutText(nextQuestion.text);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!\\n Enter your Name',\r\n        isUser: false,\r\n      };\r\n      setMessages([...messages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n      readOutText(endMessage.text);\r\n    }\r\n  };\r\n\r\n\r\n  const handleUserInput = async (event) => {\r\n    event.preventDefault();\r\n    // console.log('Handle User Input');\r\n    // console.log('Data:', { name, address, dob });\r\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    // Remove trailing full stop if it exists\r\n    userInput = userInput.replace(/\\.$/, '');\r\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\r\n    let updatedMessages = [];\r\n\r\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\r\n\r\n    if (userInput === \"\") {\r\n      // If field is mandatory\r\n      if (currentQuestion.field === 'name' || currentQuestion.field === 'personalNumber') {\r\n        const mandatoryMessage = {\r\n          text: 'This field is required.',\r\n        };\r\n        setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\r\n        readOutText(mandatoryMessage.text);\r\n        return;\r\n      }\r\n      if (currentQuestion.field === 'familyIncome') {\r\n        if (familyIncome === '') {\r\n          const mandatoryMessage = {\r\n            text: 'Please select an option.',\r\n            isUser: false,\r\n          };\r\n          setMessages([...messages, mandatoryMessage]);\r\n          readOutText(mandatoryMessage.text);\r\n          return;\r\n        }\r\n        // userInput=familyIncome;\r\n        // console.log(familyIncome);\r\n        // const familyIncomeMessage = { text: 'yes', isUser: true };\r\n        // setMessages(prevMessages => [...prevMessages, familyIncomeMessage]);\r\n        // setMessages([...messages, familyIncomeMessage]);\r\n        // readOutText(familyIncomeMessage.text);\r\n        // console.log(messages)\r\n        // setVoiceInput('');\r\n        // setUserInputs((prevUserInputs) => [...prevUserInputs, { familyIncome }]);\r\n      }\r\n      // If user input is empty, just move to the next question\r\n      askNextQuestion();\r\n      return; // Skip further processing\r\n    }\r\n\r\n    let validationFailed = false;\r\n    let invalidMessage;\r\n\r\n    for (let i = 0; i < currentQuestion.callValidations.length; i++) {\r\n      const validationCheck = currentQuestion.callValidations[i];\r\n      if (validationCheck === 'onlyAlphabets') {\r\n        if (!hasOnlyAlphabets(userInput)) {\r\n          invalidMessage = \"Field must contain only alphabets.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'onlyDigits') {\r\n        if (!hasOnlyDigits(userInput)) {\r\n          invalidMessage = \"Field must contain only digits.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'maxLength') {\r\n        if (!hasFieldLength(userInput, currentQuestion.fieldLength, false)) {\r\n          invalidMessage = \"Field exceeds the max length.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'fixedLength') {\r\n        if (!hasFieldLength(userInput, currentQuestion.fieldLength, true)) {\r\n          invalidMessage = \"Field is not of the required length.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'validEmail') {\r\n        if (!isValidEmailFormat(userInput)) {\r\n          invalidMessage = \"Field is not of proper Email id format.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'makeTitle') {\r\n        userInput = toTitle(userInput);\r\n      } else if (validationCheck === 'dateFormat') {\r\n        if (!isValidDateFormat(userInput)) {\r\n          invalidMessage = \"Field is not of proper date format.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'validDate') {\r\n        if (!isValidDate(userInput)) {\r\n          invalidMessage = \"Field is not a proper calendar date or date lies in the future.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validationFailed) {\r\n      const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n      setMessages([...messages, invalidMessageObj]);\r\n      readOutText(invalidMessage);\r\n      return; // Exit the handleUserInput function if validation failed\r\n    } else{\r\n      setInputs([...inputs,{fieldName: currentQuestion.field, val: userInput}]);\r\n      if(currentQuestion.last===true)\r\n      setLastQuestionValue(userInput);\r\n      // console.log(inputs)\r\n      // if (functionMap[currentQuestion.storeIn]) {\r\n      //   functionMap[currentQuestion.storeIn](userInput);\r\n      // }\r\n    }\r\n\r\n\r\n    // currentQuestion.callValidations.forEach(function (validationCheck) {\r\n    //   if (validationCheck === 'onlyAlphabets') {\r\n    //     if (!hasOnlyAlphabets(userInput)) {\r\n    //       const invalidMessage = \"Field must contain only alphabets.\";\r\n    //       const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n    //       setMessages([...messages, invalidMessageObj]);\r\n    //       readOutText(invalidMessage);\r\n    //       return;\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n\r\n    // Validation and formatting for name fields\r\n    // if (currentQuestion.field === 'name' ||\r\n    //   currentQuestion.field === 'fatherName' ||\r\n    //   currentQuestion.field === 'motherName' ||\r\n    //   currentQuestion.field === 'guardianName' ||\r\n    //   currentQuestion.field === 'city' ||\r\n    //   currentQuestion.field === 'state' ||\r\n    //   currentQuestion.field === 'nationality') {\r\n    //   const { isValid, formattedName } = validateAndFormatName(userInput);\r\n    //   if (!isValid) {\r\n    //     const invalidMessage = \"Invalid Name. Please enter a valid name with no numbers and special characters.\";\r\n    //     const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n    //     setMessages([...messages, invalidMessageObj]);\r\n    //     readOutText(invalidMessage);\r\n    //     return; // Stop further processing\r\n    //   }\r\n    //   userInput = formattedName; // Use the formatted name\r\n    // }\r\n\r\n    // Validation for number\r\n    // if (currentQuestion.field === 'personalNumber') {\r\n    //   if (userInput.length !== 10 || !/^\\d+$/.test(userInput)) {\r\n    //     const invalidMessage = \"Invalid Number. Please enter a 10-digit numeric number.\";\r\n    //     const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n    //     setMessages([...messages, invalidMessageObj]);\r\n    //     readOutText(invalidMessage);\r\n    //     return; // Stop further processing\r\n    //   }\r\n    // }\r\n\r\n    // Validation for email\r\n    // if (currentQuestion.field === 'email') {\r\n    //   if (!/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/.test(userInput)) {\r\n    //     const invalidMessage = \"Invalid Email. Please enter a valid email address.\";\r\n    //     const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n    //     setMessages([...messages, invalidMessageObj]);\r\n    //     readOutText(invalidMessage);\r\n    //     return; // Stop further processing\r\n    //   }\r\n    // }\r\n\r\n    // Validation for pinCode\r\n    // if (currentQuestion.field === 'pinCode') {\r\n    //   if (userInput.length !== 6 || !/^\\d+$/.test(userInput)) {\r\n    //     const invalidMessage = \"Invalid Pin Code. Please enter a 6-digit numeric number.\";\r\n    //     const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n    //     setMessages([...messages, invalidMessageObj]);\r\n    //     readOutText(invalidMessage);\r\n    //     return; // Stop further processing\r\n    //   }\r\n    // }\r\n\r\n    // Validation for dates\r\n    // if (currentQuestion.field === 'date' || currentQuestion.field === 'dob') {\r\n    //   if (!isValidDateFormat(userInput)) {\r\n    //     const invalidMessage = \"Invalid Date Format. Please use YYYY-MM-DD format.\";\r\n    //     const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n    //     setMessages([...messages, invalidMessageObj]);\r\n    //     readOutText(invalidMessage);\r\n    //     return; // Stop further processing\r\n    //   }\r\n    //   // Check if the date is a valid date\r\n    //   const parts = userInput.split('-');\r\n    //   const year = parseInt(parts[0], 10);\r\n    //   const month = parseInt(parts[1], 10);\r\n    //   const day = parseInt(parts[2], 10);\r\n\r\n    //   if (!isValidDate(year, month, day)) {\r\n    //     const invalidMessage = \"Invalid Date. Please enter a valid calendar date.\";\r\n    //     const invalidMessageObj = { text: invalidMessage, isUser: true };\r\n\r\n    //     setMessages([...messages, invalidMessageObj]);\r\n    //     readOutText(invalidMessage);\r\n    //     return; // Stop further processing\r\n    //   }\r\n    // }\r\n\r\n    \r\n\r\n    // Capture the user's input for the current field\r\n    // switch (currentQuestion.field) {\r\n    //   case 'name':\r\n    //     // setName(userInput);\r\n    //     break;\r\n    //   case 'personalNumber':\r\n    //     console.log(inputs)\r\n    //     setPersonalNumber(userInput);\r\n    //     break;\r\n    //   case 'email':\r\n    //     setEmail(userInput);\r\n    //     break;\r\n    //   case 'fatherName':\r\n    //     setFatherName(userInput);\r\n    //     break;\r\n    //   case 'fatherNumber':\r\n    //     setFatherNumber(userInput);\r\n    //     break;\r\n    //   case 'motherName':\r\n    //     setMotherName(userInput);\r\n    //     break;\r\n    //   case 'motherNumber':\r\n    //     setMotherNumber(userInput);\r\n    //     break;\r\n    //   case 'guardianName':\r\n    //     setGuardianName(userInput);\r\n    //     break;\r\n    //   case 'guardianNumber':\r\n    //     setGuardianNumber(userInput);\r\n    //     break;\r\n    //   case 'dob':\r\n    //     setDob(userInput);\r\n    //     break;\r\n    //   case 'date':\r\n    //     setDate(userInput);\r\n    //     break;\r\n    //   case 'address':\r\n    //     setAddress(userInput);\r\n    //     break;\r\n    //   case 'city':\r\n    //     setCity(userInput);\r\n    //     break;\r\n    //   case 'state':\r\n    //     setState(userInput);\r\n    //     break;\r\n    //   case 'nationality':\r\n    //     setNationality(userInput);\r\n    //     break;\r\n    //   case 'pinCode':\r\n    //     setPinCode(userInput);\r\n    //     break;\r\n    //   default:\r\n    //     break;\r\n    // }\r\n\r\n    // Add the user's input to the messages\r\n    updatedMessages = [\r\n      ...messages,\r\n      { text: userInput, isUser: true },\r\n    ];\r\n    setMessages(updatedMessages);\r\n    setVoiceInput('');\r\n\r\n    // Move to the next field or end the conversation\r\n    // askNextQuestion();\r\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\r\n      // Ask the next question\r\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n      setMessages([...updatedMessages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n\r\n      // Read out the next question\r\n      readOutText(nextQuestion.text);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!\\n Enter your Name',\r\n        isUser: false,\r\n      };\r\n      setMessages([...updatedMessages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n      readOutText(endMessage.text);\r\n    }\r\n  };\r\n\r\n\r\n  // Use useEffect to capture the updated dob value before sending it to the server\r\n  useEffect(() => {\r\n    if (lastQuestionValue) {\r\n      // Capture the updated dob value\r\n      const updatedDob = dob;\r\n\r\n      // Send the user input to the server\r\n      const sendUserInput = async () => {\r\n        const userInputData={};\r\n        for(let i=0;i<inputs.length;i++){\r\n          userInputData.inputs[i].fieldName=inputs[i].val;\r\n        }\r\n        userInputData.currentQuestion.field=lastQuestionValue;\r\n        // Define the fields and their corresponding values\r\n        // const fields = {\r\n        //   name,\r\n        //   personalNumber,\r\n        //   email,\r\n        //   fatherName,\r\n        //   fatherNumber,\r\n        //   motherName,\r\n        //   motherNumber,\r\n        //   guardianName,\r\n        //   guardianNumber,\r\n        //   date,\r\n        //   address,\r\n        //   city,\r\n        //   state,\r\n        //   nationality,\r\n        //   pinCode,\r\n        //   dob: updatedDob,\r\n        // };\r\n\r\n        // Prepare the user input data by filtering out empty fields\r\n        // const userInputData = {};\r\n        // for (const [key, value] of Object.entries(fields)) {\r\n        //   if (value !== null && value !== undefined && value !== '') {\r\n        //     userInputData[key] = value;\r\n        //   }\r\n        // }\r\n        try {\r\n          await axios.post('http://localhost:3001/save', {\r\n            userInput: userInputData,\r\n          });\r\n          console.log('User input saved successfully');\r\n\r\n          // Add the user inputs to the userInputs array\r\n          const newInput = userInputData;\r\n          console.log(newInput);\r\n          setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\r\n\r\n          // Clear the input fields\r\n          setLastQuestionValue('');\r\n          setInputs([]);\r\n          // setName('');\r\n          // setAddress('');\r\n          // setDob('');\r\n        } catch (error) {\r\n          console.error('Failed to save user input:', error);\r\n        }\r\n      };\r\n\r\n      sendUserInput();\r\n    }\r\n  }, [lastQuestionValue]);\r\n\r\n  // Use useEffect to capture the updated dob value before sending it to the server\r\n  // useEffect(() => {\r\n  //   if (dob) {\r\n  //     // Capture the updated dob value\r\n  //     const updatedDob = dob;\r\n\r\n  //     // Send the user input to the server\r\n  //     const sendUserInput = async () => {\r\n  //       // Define the fields and their corresponding values\r\n  //       const fields = {\r\n  //         name,\r\n  //         personalNumber,\r\n  //         email,\r\n  //         fatherName,\r\n  //         fatherNumber,\r\n  //         motherName,\r\n  //         motherNumber,\r\n  //         guardianName,\r\n  //         guardianNumber,\r\n  //         date,\r\n  //         address,\r\n  //         city,\r\n  //         state,\r\n  //         nationality,\r\n  //         pinCode,\r\n  //         dob: updatedDob,\r\n  //       };\r\n\r\n  //       // Prepare the user input data by filtering out empty fields\r\n  //       const userInputData = {};\r\n  //       for (const [key, value] of Object.entries(fields)) {\r\n  //         if (value !== null && value !== undefined && value !== '') {\r\n  //           userInputData[key] = value;\r\n  //         }\r\n  //       }\r\n  //       try {\r\n  //         await axios.post('http://localhost:3001/save', {\r\n  //           userInput: userInputData,\r\n  //         });\r\n  //         console.log('User input saved successfully');\r\n\r\n  //         // Add the user inputs to the userInputs array\r\n  //         const newInput = userInputData;\r\n  //         setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\r\n\r\n  //         // Clear the input fields\r\n  //         setName('');\r\n  //         setAddress('');\r\n  //         setDob('');\r\n  //       } catch (error) {\r\n  //         console.error('Failed to save user input:', error);\r\n  //       }\r\n  //     };\r\n\r\n  //     sendUserInput();\r\n  //   }\r\n  // }, [dob]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n    readOutText(currentQuestion.text); // Read out the initial question\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {userInputs.length > 0 && (\r\n          <div className=\"message bot\">\r\n            <h4>Collected Inputs:</h4>\r\n            {userInputs.map((input, index) => (\r\n              <div key={index}>\r\n                {input.name && <span><strong>Name:</strong> {input.name}</span>}\r\n                <br />\r\n                {input.personalNumber && <span><strong>Personal Number:</strong> {input.personalNumber}</span>}\r\n                <br />\r\n                {input.email && <span><strong>Email:</strong> {input.email}</span>}\r\n                <br />\r\n                {input.fatherName && <span><strong>Father's Name:</strong> {input.fatherName}</span>}\r\n                <br />\r\n                {input.fatherNumber && <span><strong>Father's Number:</strong> {input.fatherNumber}</span>}\r\n                <br />\r\n                {input.motherName && <span><strong>Mother's Name:</strong> {input.motherName}</span>}\r\n                <br />\r\n                {input.motherNumber && <span><strong>Mother's Number:</strong> {input.motherNumber}</span>}\r\n                <br />\r\n                {input.guardianName && <span><strong>Guardian's Name:</strong> {input.guardianName}</span>}\r\n                <br />\r\n                {input.guardianNumber && <span><strong>Guardian's Number:</strong> {input.guardianNumber}</span>}\r\n                <br />\r\n                {input.dob && <span><strong>Date of Birth:</strong> {input.dob}</span>}\r\n                <br />\r\n                {input.date && <span><strong>Date:</strong> {input.date}</span>}\r\n                <br />\r\n                {input.address && <span><strong>Address:</strong> {input.address}</span>}\r\n                <br />\r\n                {input.city && <span><strong>City:</strong> {input.city}</span>}\r\n                <br />\r\n                {input.state && <span><strong>State:</strong> {input.state}</span>}\r\n                <br />\r\n                {input.nationality && <span><strong>Nationality:</strong> {input.nationality}</span>}\r\n                <br />\r\n                {input.pinCode && <span><strong>PIN Code:</strong> {input.pinCode}</span>}\r\n                <br />\r\n                <br />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        {questions[selectedFormId][currentQuestionIndex].options ? (\r\n          <div className=\"checkbox-options\">\r\n            {questions[selectedFormId][currentQuestionIndex].options.map((option) => (\r\n              <div key={option.value} className=\"checkbox-option\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={option.value}\r\n                  name={option.value}\r\n                  checked={familyIncome === option.value}\r\n                  onChange={() => {\r\n                    setFamilyIncome(option.value);\r\n                    const familyIncomeMessage = {\r\n                      text: option.value,\r\n                      isUser: true,\r\n                    };\r\n                    setMessages([...messages, familyIncomeMessage]);\r\n                    readOutText(familyIncomeMessage.text);\r\n                  }}\r\n                />\r\n                <label htmlFor={option.value}>{option.label}</label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          ref={inputRef}\r\n          value={voiceInput}\r\n          onChange={(e) => setVoiceInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;"],"mappings":"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ACjCW,cAAc,GAAG,qCAAqC;UACtDD,gBAAgB,GAAG,IAAI;UACvB;QACF;MACF,CAAC,MAAM,IAAII,eAAe,KAAK,WAAW,EAAE;QAC1C,IAAI,CAAC3G,WAAW,CAAC6F,SAAS,CAAC,EAAE;UAC3BW,cAAc,GAAG,iEAAiE;UAClFD,gBAAgB,GAAG,IAAI;UACvB;QACF;MACF;IACF;IAEA,IAAIA,gBAAgB,EAAE;MACpB,MAAMM,iBAAiB,GAAG;QAAExC,IAAI,EAAEmC,cAAc;QAAEf,MAAM,EAAE;MAAM,CAAC;MACjE9E,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEmG,iBAAiB,CAAC,CAAC;MAC7CzC,WAAW,CAACoC,cAAc,CAAC;MAC3B,OAAO,CAAC;IACV,CAAC,MAAK;MACJlD,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAC;QAACyD,SAAS,EAAEb,eAAe,CAACG,KAAK;QAAEW,GAAG,EAAElB;MAAS,CAAC,CAAC,CAAC;MACzE,IAAGI,eAAe,CAACe,IAAI,KAAG,IAAI,EAC9BxD,oBAAoB,CAACqC,SAAS,CAAC;MAC/B;MACA;MACA;MACA;IACF;;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAIA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;I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"},"metadata":{},"sourceType":"module","externalDependencies":[]}