{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport questions from \"./questions\";\nimport { validateAndFormatName, isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength } from './validate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [name, setName] = useState(null);\n  const [personalNumber, setPersonalNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [fatherName, setFatherName] = useState('');\n  const [fatherNumber, setFatherNumber] = useState('');\n  const [motherName, setMotherName] = useState('');\n  const [motherNumber, setMotherNumber] = useState('');\n  const [guardianName, setGuardianName] = useState('');\n  const [guardianNumber, setGuardianNumber] = useState('');\n  const [dob, setDob] = useState('');\n  const [date, setDate] = useState('');\n  const [address, setAddress] = useState('');\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [nationality, setNationality] = useState('');\n  const [pinCode, setPinCode] = useState('');\n  const [voiceInput, setVoiceInput] = useState('');\n  const inputRef = useRef(null);\n  const [userInputs, setUserInputs] = useState([]);\n  const [familyIncome, setFamilyIncome] = useState('');\n  const location = useLocation();\n  let selectedFormId = null;\n  if (location !== null) {\n    selectedFormId = location.state.selectedFormId;\n    console.log(selectedFormId);\n  }\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const readOutText = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  const askNextQuestion = () => {\n    // Check if there are more questions in the selected form\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\n      // Get the next question\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\n\n      // Create a message for the next question\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n\n      // Update the state with the new question and messages\n      setMessages([...messages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n\n      // Read out the next question\n      readOutText(nextQuestion.text);\n    } else {\n      // Conversation ended, you can handle this however you want\n      const endMessage = {\n        text: 'Thank you for the conversation!\\n Enter your Name',\n        isUser: false\n      };\n      setMessages([...messages, endMessage]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n      readOutText(endMessage.text);\n    }\n  };\n  const handleUserInput = async event => {\n    event.preventDefault();\n    // console.log('Handle User Input');\n    // console.log('Data:', { name, address, dob });\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    // Remove trailing full stop if it exists\n    userInput = userInput.replace(/\\.$/, '');\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\n    let updatedMessages = [];\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\n\n    if (userInput === \"\") {\n      // If field is mandatory\n      if (currentQuestion.field === 'name' || currentQuestion.field === 'personalNumber') {\n        const mandatoryMessage = {\n          text: 'This field is required.'\n        };\n        setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\n        readOutText(mandatoryMessage.text);\n        return;\n      }\n      if (currentQuestion.field === 'familyIncome') {\n        if (familyIncome === '') {\n          const mandatoryMessage = {\n            text: 'Please select an option.',\n            isUser: false\n          };\n          setMessages([...messages, mandatoryMessage]);\n          readOutText(mandatoryMessage.text);\n          return;\n        }\n        // userInput=familyIncome;\n        // console.log(familyIncome);\n        // const familyIncomeMessage = { text: 'yes', isUser: true };\n        // setMessages(prevMessages => [...prevMessages, familyIncomeMessage]);\n        // setMessages([...messages, familyIncomeMessage]);\n        // readOutText(familyIncomeMessage.text);\n        // console.log(messages)\n        // setVoiceInput('');\n        // setUserInputs((prevUserInputs) => [...prevUserInputs, { familyIncome }]);\n      }\n      // If user input is empty, just move to the next question\n      askNextQuestion();\n      return; // Skip further processing\n    }\n\n    let validationFailed = false;\n    let invalidMessage;\n    for (let i = 0; i < currentQuestion.callValidations.length; i++) {\n      const validationCheck = currentQuestion.callValidations[i];\n      if (validationCheck === 'onlyAlphabets') {\n        if (!hasOnlyAlphabets(userInput)) {\n          invalidMessage = \"Field must contain only alphabets.\";\n          validationFailed = true;\n          return;\n        }\n      } else if (validationCheck === 'onlyDigits') {\n        if (!hasOnlyDigits(userInput)) {\n          invalidMessage = \"Field must contain only digits.\";\n          validationFailed = true;\n          return;\n        }\n      }\n    }\n    console.log();\n    if (validationFailed) {\n      console.log('h');\n      const invalidMessageObj = {\n        text: invalidMessage,\n        isUser: false\n      };\n      setMessages([...messages, invalidMessageObj]);\n      readOutText(invalidMessage);\n      return; // Exit the handleUserInput function if validation failed\n    }\n\n    // currentQuestion.callValidations.forEach(function (validationCheck) {\n    //   if (validationCheck === 'onlyAlphabets') {\n    //     if (!hasOnlyAlphabets(userInput)) {\n    //       const invalidMessage = \"Field must contain only alphabets.\";\n    //       const invalidMessageObj = { text: invalidMessage, isUser: false };\n    //       setMessages([...messages, invalidMessageObj]);\n    //       readOutText(invalidMessage);\n    //       return;\n    //     }\n    //   }\n    // });\n\n    // Validation and formatting for name fields\n    if (currentQuestion.field === 'name' || currentQuestion.field === 'fatherName' || currentQuestion.field === 'motherName' || currentQuestion.field === 'guardianName' || currentQuestion.field === 'city' || currentQuestion.field === 'state' || currentQuestion.field === 'nationality') {\n      const {\n        isValid,\n        formattedName\n      } = validateAndFormatName(userInput);\n      if (!isValid) {\n        const invalidMessage = \"Invalid Name. Please enter a valid name with no numbers and special characters.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n\n      userInput = formattedName; // Use the formatted name\n    }\n\n    // Validation for number\n    if (currentQuestion.field === 'personalNumber') {\n      if (userInput.length !== 10 || !/^\\d+$/.test(userInput)) {\n        const invalidMessage = \"Invalid Number. Please enter a 10-digit numeric number.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n    }\n\n    // Validation for email\n    if (currentQuestion.field === 'email') {\n      if (!/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/.test(userInput)) {\n        const invalidMessage = \"Invalid Email. Please enter a valid email address.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n    }\n\n    // Validation for pinCode\n    if (currentQuestion.field === 'pinCode') {\n      if (userInput.length !== 6 || !/^\\d+$/.test(userInput)) {\n        const invalidMessage = \"Invalid Pin Code. Please enter a 6-digit numeric number.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n    }\n\n    // Validation for dates\n    if (currentQuestion.field === 'date' || currentQuestion.field === 'dob') {\n      if (!isValidDateFormat(userInput)) {\n        const invalidMessage = \"Invalid Date Format. Please use YYYY-MM-DD format.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: false\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n      // Check if the date is a valid date\n      const parts = userInput.split('-');\n      const year = parseInt(parts[0], 10);\n      const month = parseInt(parts[1], 10);\n      const day = parseInt(parts[2], 10);\n      if (!isValidDate(year, month, day)) {\n        const invalidMessage = \"Invalid Date. Please enter a valid calendar date.\";\n        const invalidMessageObj = {\n          text: invalidMessage,\n          isUser: true\n        };\n        setMessages([...messages, invalidMessageObj]);\n        readOutText(invalidMessage);\n        return; // Stop further processing\n      }\n    }\n\n    // Capture the user's input for the current field\n    switch (currentQuestion.field) {\n      case 'name':\n        setName(userInput);\n        break;\n      case 'personalNumber':\n        setPersonalNumber(userInput);\n        break;\n      case 'email':\n        setEmail(userInput);\n        break;\n      case 'fatherName':\n        setFatherName(userInput);\n        break;\n      case 'fatherNumber':\n        setFatherNumber(userInput);\n        break;\n      case 'motherName':\n        setMotherName(userInput);\n        break;\n      case 'motherNumber':\n        setMotherNumber(userInput);\n        break;\n      case 'guardianName':\n        setGuardianName(userInput);\n        break;\n      case 'guardianNumber':\n        setGuardianNumber(userInput);\n        break;\n      case 'dob':\n        setDob(userInput);\n        break;\n      case 'date':\n        setDate(userInput);\n        break;\n      case 'address':\n        setAddress(userInput);\n        break;\n      case 'city':\n        setCity(userInput);\n        break;\n      case 'state':\n        setState(userInput);\n        break;\n      case 'nationality':\n        setNationality(userInput);\n        break;\n      case 'pinCode':\n        setPinCode(userInput);\n        break;\n      default:\n        break;\n    }\n\n    // Add the user's input to the messages\n    updatedMessages = [...messages, {\n      text: userInput,\n      isUser: true\n    }];\n    setMessages(updatedMessages);\n    setVoiceInput('');\n\n    // Move to the next field or end the conversation\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\n      // Ask the next question\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n      setMessages([...updatedMessages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n\n      // Read out the next question\n      readOutText(nextQuestion.text);\n    } else {\n      // Conversation ended, you can handle this however you want\n      const endMessage = {\n        text: 'Thank you for the conversation!\\n Enter your Name',\n        isUser: false\n      };\n      setMessages([...updatedMessages, endMessage]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n      readOutText(endMessage.text);\n    }\n  };\n\n  // Use useEffect to capture the updated dob value before sending it to the server\n  useEffect(() => {\n    if (dob) {\n      // Capture the updated dob value\n      const updatedDob = dob;\n\n      // Send the user input to the server\n      const sendUserInput = async () => {\n        // Define the fields and their corresponding values\n        const fields = {\n          name,\n          personalNumber,\n          email,\n          fatherName,\n          fatherNumber,\n          motherName,\n          motherNumber,\n          guardianName,\n          guardianNumber,\n          date,\n          address,\n          city,\n          state,\n          nationality,\n          pinCode,\n          dob: updatedDob\n        };\n\n        // Prepare the user input data by filtering out empty fields\n        const userInputData = {};\n        for (const [key, value] of Object.entries(fields)) {\n          if (value !== null && value !== undefined && value !== '') {\n            userInputData[key] = value;\n          }\n        }\n        try {\n          await axios.post('http://localhost:3001/save', {\n            userInput: userInputData\n          });\n          console.log('User input saved successfully');\n\n          // Add the user inputs to the userInputs array\n          const newInput = userInputData;\n          setUserInputs(prevUserInputs => [...prevUserInputs, newInput]);\n\n          // Clear the input fields\n          setName('');\n          setAddress('');\n          setDob('');\n        } catch (error) {\n          console.error('Failed to save user input:', error);\n        }\n      };\n      sendUserInput();\n    }\n  }, [dob]);\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n    readOutText(currentQuestion.text); // Read out the initial question\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      className: \"chat-window\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isUser ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this)), userInputs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Collected Inputs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this), userInputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [input.name && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 38\n            }, this), \" \", input.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 17\n          }, this), input.personalNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Personal Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 48\n            }, this), \" \", input.personalNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 17\n          }, this), input.email && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Email:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 39\n            }, this), \" \", input.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 17\n          }, this), input.fatherName && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Father's Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 44\n            }, this), \" \", input.fatherName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 38\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 17\n          }, this), input.fatherNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Father's Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 46\n            }, this), \" \", input.fatherNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 17\n          }, this), input.motherName && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Mother's Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 44\n            }, this), \" \", input.motherName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 38\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 17\n          }, this), input.motherNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Mother's Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 46\n            }, this), \" \", input.motherNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 17\n          }, this), input.guardianName && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Guardian's Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 46\n            }, this), \" \", input.guardianName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 40\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 17\n          }, this), input.guardianNumber && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Guardian's Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 48\n            }, this), \" \", input.guardianNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 17\n          }, this), input.dob && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date of Birth:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 37\n            }, this), \" \", input.dob]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 17\n          }, this), input.date && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 38\n            }, this), \" \", input.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 17\n          }, this), input.address && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Address:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 41\n            }, this), \" \", input.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 17\n          }, this), input.city && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"City:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 38\n            }, this), \" \", input.city]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 17\n          }, this), input.state && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"State:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 39\n            }, this), \" \", input.state]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 17\n          }, this), input.nationality && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Nationality:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 45\n            }, this), \" \", input.nationality]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 17\n          }, this), input.pinCode && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"PIN Code:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 41\n            }, this), \" \", input.pinCode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 35\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }, this), questions[selectedFormId][currentQuestionIndex].options ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-options\",\n        children: questions[selectedFormId][currentQuestionIndex].options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-option\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: option.value,\n            name: option.value,\n            checked: familyIncome === option.value,\n            onChange: () => {\n              setFamilyIncome(option.value);\n              const familyIncomeMessage = {\n                text: option.value,\n                isUser: true\n              };\n              setMessages([...messages, familyIncomeMessage]);\n              readOutText(familyIncomeMessage.text);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: option.value,\n            children: option.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 17\n          }, this)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        value: voiceInput,\n        onChange: e => setVoiceInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recognition\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startVoiceRecognition,\n        children: \"Start Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopVoiceRecognition,\n        children: \"Stop Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 434,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"9YKJPgbX6gj6xQ2ji2MhHI7tMyE=\", false, function () {\n  return [useLocation];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useLocation","questions","validateAndFormatName","isValidDateFormat","isValidDate","hasOnlyAlphabets","hasOnlyDigits","hasFieldLength","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","currentQuestionIndex","setCurrentQuestionIndex","name","setName","personalNumber","setPersonalNumber","email","setEmail","fatherName","setFatherName","fatherNumber","setFatherNumber","motherName","setMotherName","motherNumber","setMotherNumber","guardianName","setGuardianName","guardianNumber","setGuardianNumber","dob","setDob","date","setDate","address","setAddress","city","setCity","state","setState","nationality","setNationality","pinCode","setPinCode","voiceInput","setVoiceInput","inputRef","userInputs","setUserInputs","familyIncome","setFamilyIncome","location","selectedFormId","console","log","handleVoiceInput","event","transcript","results","handleVoiceError","error","readOutText","text","utterance","SpeechSynthesisUtterance","window","speechSynthesis","speak","startVoiceRecognition","SpeechRecognition","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","askNextQuestion","length","nextQuestion","nextQuestionMessage","isUser","endMessage","handleUserInput","preventDefault","userInput","current","value","replace","currentQuestion","updatedMessages","trim","field","mandatoryMessage","prevMessages","validationFailed","invalidMessage","i","callValidations","validationCheck","invalidMessageObj","isValid","formattedName","test","parts","split","year","parseInt","month","day","updatedDob","sendUserInput","fields","userInputData","key","Object","entries","undefined","post","newInput","prevUserInputs","chatWindow","document","getElementById","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","message","index","input","options","option","type","checked","onChange","familyIncomeMessage","htmlFor","label","onSubmit","ref","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport axios from 'axios';\r\nimport { useLocation } from 'react-router-dom';\r\nimport questions from \"./questions\";\r\nimport { validateAndFormatName, isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength } from './validate';\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [name, setName] = useState(null);\r\n  const [personalNumber, setPersonalNumber] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [fatherName, setFatherName] = useState('');\r\n  const [fatherNumber, setFatherNumber] = useState('');\r\n  const [motherName, setMotherName] = useState('');\r\n  const [motherNumber, setMotherNumber] = useState('');\r\n  const [guardianName, setGuardianName] = useState('');\r\n  const [guardianNumber, setGuardianNumber] = useState('');\r\n  const [dob, setDob] = useState('');\r\n  const [date, setDate] = useState('');\r\n  const [address, setAddress] = useState('');\r\n  const [city, setCity] = useState('');\r\n  const [state, setState] = useState('');\r\n  const [nationality, setNationality] = useState('');\r\n  const [pinCode, setPinCode] = useState('');\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const inputRef = useRef(null);\r\n  const [userInputs, setUserInputs] = useState([]);\r\n  const [familyIncome, setFamilyIncome] = useState('');\r\n\r\n\r\n  const location = useLocation();\r\n  let selectedFormId = null;\r\n  if (location !== null) {\r\n    selectedFormId = location.state.selectedFormId;\r\n    console.log(selectedFormId);\r\n  }\r\n\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const readOutText = (text) => {\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n\r\n  const askNextQuestion = () => {\r\n    // Check if there are more questions in the selected form\r\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\r\n      // Get the next question\r\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\r\n\r\n      // Create a message for the next question\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n\r\n      // Update the state with the new question and messages\r\n      setMessages([...messages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n\r\n      // Read out the next question\r\n      readOutText(nextQuestion.text);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!\\n Enter your Name',\r\n        isUser: false,\r\n      };\r\n      setMessages([...messages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n      readOutText(endMessage.text);\r\n    }\r\n  };\r\n\r\n\r\n  const handleUserInput = async (event) => {\r\n    event.preventDefault();\r\n    // console.log('Handle User Input');\r\n    // console.log('Data:', { name, address, dob });\r\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    // Remove trailing full stop if it exists\r\n    userInput = userInput.replace(/\\.$/, '');\r\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\r\n    let updatedMessages = [];\r\n\r\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\r\n\r\n    if (userInput === \"\") {\r\n      // If field is mandatory\r\n      if (currentQuestion.field === 'name' || currentQuestion.field === 'personalNumber') {\r\n        const mandatoryMessage = {\r\n          text: 'This field is required.',\r\n        };\r\n        setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\r\n        readOutText(mandatoryMessage.text);\r\n        return;\r\n      }\r\n      if (currentQuestion.field === 'familyIncome') {\r\n        if (familyIncome === '') {\r\n          const mandatoryMessage = {\r\n            text: 'Please select an option.',\r\n            isUser: false,\r\n          };\r\n          setMessages([...messages, mandatoryMessage]);\r\n          readOutText(mandatoryMessage.text);\r\n          return;\r\n        }\r\n        // userInput=familyIncome;\r\n        // console.log(familyIncome);\r\n        // const familyIncomeMessage = { text: 'yes', isUser: true };\r\n        // setMessages(prevMessages => [...prevMessages, familyIncomeMessage]);\r\n        // setMessages([...messages, familyIncomeMessage]);\r\n        // readOutText(familyIncomeMessage.text);\r\n        // console.log(messages)\r\n        // setVoiceInput('');\r\n        // setUserInputs((prevUserInputs) => [...prevUserInputs, { familyIncome }]);\r\n      }\r\n      // If user input is empty, just move to the next question\r\n      askNextQuestion();\r\n      return; // Skip further processing\r\n    }\r\n\r\n    let validationFailed = false;\r\n    let invalidMessage;\r\n\r\n    for (let i = 0; i < currentQuestion.callValidations.length; i++) {\r\n      const validationCheck = currentQuestion.callValidations[i];\r\n      if (validationCheck === 'onlyAlphabets') {\r\n        if (!hasOnlyAlphabets(userInput)) {\r\n          invalidMessage = \"Field must contain only alphabets.\";\r\n          validationFailed=true;\r\n          return;\r\n        }\r\n      }else if (validationCheck === 'onlyDigits') {\r\n        if (!hasOnlyDigits(userInput)) {\r\n          invalidMessage = \"Field must contain only digits.\";\r\n          validationFailed=true;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    console.log()\r\n\r\n    if (validationFailed) {\r\n      console.log('h')\r\n      const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n          setMessages([...messages, invalidMessageObj]);\r\n          readOutText(invalidMessage);\r\n      return; // Exit the handleUserInput function if validation failed\r\n    }\r\n\r\n\r\n    // currentQuestion.callValidations.forEach(function (validationCheck) {\r\n    //   if (validationCheck === 'onlyAlphabets') {\r\n    //     if (!hasOnlyAlphabets(userInput)) {\r\n    //       const invalidMessage = \"Field must contain only alphabets.\";\r\n    //       const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n    //       setMessages([...messages, invalidMessageObj]);\r\n    //       readOutText(invalidMessage);\r\n    //       return;\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n\r\n    // Validation and formatting for name fields\r\n    if (currentQuestion.field === 'name' ||\r\n      currentQuestion.field === 'fatherName' ||\r\n      currentQuestion.field === 'motherName' ||\r\n      currentQuestion.field === 'guardianName' ||\r\n      currentQuestion.field === 'city' ||\r\n      currentQuestion.field === 'state' ||\r\n      currentQuestion.field === 'nationality') {\r\n      const { isValid, formattedName } = validateAndFormatName(userInput);\r\n      if (!isValid) {\r\n        const invalidMessage = \"Invalid Name. Please enter a valid name with no numbers and special characters.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n      userInput = formattedName; // Use the formatted name\r\n    }\r\n\r\n    // Validation for number\r\n    if (currentQuestion.field === 'personalNumber') {\r\n      if (userInput.length !== 10 || !/^\\d+$/.test(userInput)) {\r\n        const invalidMessage = \"Invalid Number. Please enter a 10-digit numeric number.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n    }\r\n\r\n    // Validation for email\r\n    if (currentQuestion.field === 'email') {\r\n      if (!/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/.test(userInput)) {\r\n        const invalidMessage = \"Invalid Email. Please enter a valid email address.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n    }\r\n\r\n    // Validation for pinCode\r\n    if (currentQuestion.field === 'pinCode') {\r\n      if (userInput.length !== 6 || !/^\\d+$/.test(userInput)) {\r\n        const invalidMessage = \"Invalid Pin Code. Please enter a 6-digit numeric number.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n    }\r\n\r\n    // Validation for dates\r\n    if (currentQuestion.field === 'date' || currentQuestion.field === 'dob') {\r\n      if (!isValidDateFormat(userInput)) {\r\n        const invalidMessage = \"Invalid Date Format. Please use YYYY-MM-DD format.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n      // Check if the date is a valid date\r\n      const parts = userInput.split('-');\r\n      const year = parseInt(parts[0], 10);\r\n      const month = parseInt(parts[1], 10);\r\n      const day = parseInt(parts[2], 10);\r\n\r\n      if (!isValidDate(year, month, day)) {\r\n        const invalidMessage = \"Invalid Date. Please enter a valid calendar date.\";\r\n        const invalidMessageObj = { text: invalidMessage, isUser: true };\r\n\r\n        setMessages([...messages, invalidMessageObj]);\r\n        readOutText(invalidMessage);\r\n        return; // Stop further processing\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // Capture the user's input for the current field\r\n    switch (currentQuestion.field) {\r\n      case 'name':\r\n        setName(userInput);\r\n        break;\r\n      case 'personalNumber':\r\n        setPersonalNumber(userInput);\r\n        break;\r\n      case 'email':\r\n        setEmail(userInput);\r\n        break;\r\n      case 'fatherName':\r\n        setFatherName(userInput);\r\n        break;\r\n      case 'fatherNumber':\r\n        setFatherNumber(userInput);\r\n        break;\r\n      case 'motherName':\r\n        setMotherName(userInput);\r\n        break;\r\n      case 'motherNumber':\r\n        setMotherNumber(userInput);\r\n        break;\r\n      case 'guardianName':\r\n        setGuardianName(userInput);\r\n        break;\r\n      case 'guardianNumber':\r\n        setGuardianNumber(userInput);\r\n        break;\r\n      case 'dob':\r\n        setDob(userInput);\r\n        break;\r\n      case 'date':\r\n        setDate(userInput);\r\n        break;\r\n      case 'address':\r\n        setAddress(userInput);\r\n        break;\r\n      case 'city':\r\n        setCity(userInput);\r\n        break;\r\n      case 'state':\r\n        setState(userInput);\r\n        break;\r\n      case 'nationality':\r\n        setNationality(userInput);\r\n        break;\r\n      case 'pinCode':\r\n        setPinCode(userInput);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // Add the user's input to the messages\r\n    updatedMessages = [\r\n      ...messages,\r\n      { text: userInput, isUser: true },\r\n    ];\r\n    setMessages(updatedMessages);\r\n    setVoiceInput('');\r\n\r\n    // Move to the next field or end the conversation\r\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\r\n      // Ask the next question\r\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n      setMessages([...updatedMessages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n\r\n      // Read out the next question\r\n      readOutText(nextQuestion.text);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!\\n Enter your Name',\r\n        isUser: false,\r\n      };\r\n      setMessages([...updatedMessages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n      readOutText(endMessage.text);\r\n    }\r\n  };\r\n\r\n  // Use useEffect to capture the updated dob value before sending it to the server\r\n  useEffect(() => {\r\n    if (dob) {\r\n      // Capture the updated dob value\r\n      const updatedDob = dob;\r\n\r\n      // Send the user input to the server\r\n      const sendUserInput = async () => {\r\n        // Define the fields and their corresponding values\r\n        const fields = {\r\n          name,\r\n          personalNumber,\r\n          email,\r\n          fatherName,\r\n          fatherNumber,\r\n          motherName,\r\n          motherNumber,\r\n          guardianName,\r\n          guardianNumber,\r\n          date,\r\n          address,\r\n          city,\r\n          state,\r\n          nationality,\r\n          pinCode,\r\n          dob: updatedDob,\r\n        };\r\n\r\n        // Prepare the user input data by filtering out empty fields\r\n        const userInputData = {};\r\n        for (const [key, value] of Object.entries(fields)) {\r\n          if (value !== null && value !== undefined && value !== '') {\r\n            userInputData[key] = value;\r\n          }\r\n        }\r\n        try {\r\n          await axios.post('http://localhost:3001/save', {\r\n            userInput: userInputData,\r\n          });\r\n          console.log('User input saved successfully');\r\n\r\n          // Add the user inputs to the userInputs array\r\n          const newInput = userInputData;\r\n          setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\r\n\r\n          // Clear the input fields\r\n          setName('');\r\n          setAddress('');\r\n          setDob('');\r\n        } catch (error) {\r\n          console.error('Failed to save user input:', error);\r\n        }\r\n      };\r\n\r\n      sendUserInput();\r\n    }\r\n  }, [dob]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n    readOutText(currentQuestion.text); // Read out the initial question\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {userInputs.length > 0 && (\r\n          <div className=\"message bot\">\r\n            <h4>Collected Inputs:</h4>\r\n            {userInputs.map((input, index) => (\r\n              <div key={index}>\r\n                {input.name && <span><strong>Name:</strong> {input.name}</span>}\r\n                <br />\r\n                {input.personalNumber && <span><strong>Personal Number:</strong> {input.personalNumber}</span>}\r\n                <br />\r\n                {input.email && <span><strong>Email:</strong> {input.email}</span>}\r\n                <br />\r\n                {input.fatherName && <span><strong>Father's Name:</strong> {input.fatherName}</span>}\r\n                <br />\r\n                {input.fatherNumber && <span><strong>Father's Number:</strong> {input.fatherNumber}</span>}\r\n                <br />\r\n                {input.motherName && <span><strong>Mother's Name:</strong> {input.motherName}</span>}\r\n                <br />\r\n                {input.motherNumber && <span><strong>Mother's Number:</strong> {input.motherNumber}</span>}\r\n                <br />\r\n                {input.guardianName && <span><strong>Guardian's Name:</strong> {input.guardianName}</span>}\r\n                <br />\r\n                {input.guardianNumber && <span><strong>Guardian's Number:</strong> {input.guardianNumber}</span>}\r\n                <br />\r\n                {input.dob && <span><strong>Date of Birth:</strong> {input.dob}</span>}\r\n                <br />\r\n                {input.date && <span><strong>Date:</strong> {input.date}</span>}\r\n                <br />\r\n                {input.address && <span><strong>Address:</strong> {input.address}</span>}\r\n                <br />\r\n                {input.city && <span><strong>City:</strong> {input.city}</span>}\r\n                <br />\r\n                {input.state && <span><strong>State:</strong> {input.state}</span>}\r\n                <br />\r\n                {input.nationality && <span><strong>Nationality:</strong> {input.nationality}</span>}\r\n                <br />\r\n                {input.pinCode && <span><strong>PIN Code:</strong> {input.pinCode}</span>}\r\n                <br />\r\n                <br />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        {questions[selectedFormId][currentQuestionIndex].options ? (\r\n          <div className=\"checkbox-options\">\r\n            {questions[selectedFormId][currentQuestionIndex].options.map((option) => (\r\n              <div key={option.value} className=\"checkbox-option\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={option.value}\r\n                  name={option.value}\r\n                  checked={familyIncome === option.value}\r\n                  onChange={() => {\r\n                    setFamilyIncome(option.value);\r\n                    const familyIncomeMessage = {\r\n                      text: option.value,\r\n                      isUser: true,\r\n                    };\r\n                    setMessages([...messages, familyIncomeMessage]);\r\n                    readOutText(familyIncomeMessage.text);\r\n                  }}\r\n                />\r\n                <label htmlFor={option.value}>{option.label}</label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          ref={inputRef}\r\n          value={voiceInput}\r\n          onChange={(e) => setVoiceInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}