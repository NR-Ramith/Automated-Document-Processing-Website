{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\react-app\\\\src\\\\components\\\\FormFieldFetcher.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormFieldFetcher = () => {\n  _s();\n  const [formFields, setFormFields] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchFormFields = async () => {\n      try {\n        const response = await fetch('https://docs.google.com/forms/d/e/1FAIpQLSdX7VTdsVsNeFu3GPxNcRAP6dziAaeXzZyYjHaXLgIDf_kuPQ/viewform?usp=sf_link');\n        if (!response.ok) {\n          throw new Error(`Failed to fetch form. Status: ${response.status}`);\n        }\n        const html = await response.text();\n        console.log(html);\n\n        // Parse HTML and find form fields using DOM API\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, 'text/html');\n        const formFields = doc.querySelectorAll('form input, form select, form textarea');\n\n        // Extract field names or other attributes\n        const fieldNames = Array.from(formFields).map(element => element.name || element.id);\n        setFormFields(fieldNames);\n      } catch (error) {\n        console.error('Error fetching form:', error);\n        setError(error.message || 'An error occurred while fetching the form.');\n      }\n    };\n    fetchFormFields();\n  }, []); // Run once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Form Fields\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: formFields.map((fieldName, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: fieldName\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(FormFieldFetcher, \"viCDOTfDgXJ/3wYCfJpA/xK3Od0=\");\n_c = FormFieldFetcher;\nexport default FormFieldFetcher;\nvar _c;\n$RefreshReg$(_c, \"FormFieldFetcher\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","FormFieldFetcher","_s","formFields","setFormFields","error","setError","fetchFormFields","response","fetch","ok","Error","status","html","text","console","log","parser","DOMParser","doc","parseFromString","querySelectorAll","fieldNames","Array","from","map","element","name","id","message","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fieldName","index","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/react-app/src/components/FormFieldFetcher.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst FormFieldFetcher = () => {\r\n  const [formFields, setFormFields] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchFormFields = async () => {\r\n      try {\r\n        const response = await fetch('https://docs.google.com/forms/d/e/1FAIpQLSdX7VTdsVsNeFu3GPxNcRAP6dziAaeXzZyYjHaXLgIDf_kuPQ/viewform?usp=sf_link');\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch form. Status: ${response.status}`);\r\n        }\r\n\r\n        const html = await response.text();\r\n        console.log(html);\r\n\r\n        // Parse HTML and find form fields using DOM API\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(html, 'text/html');\r\n        const formFields = doc.querySelectorAll('form input, form select, form textarea');\r\n\r\n        // Extract field names or other attributes\r\n        const fieldNames = Array.from(formFields).map(element => element.name || element.id);\r\n\r\n        setFormFields(fieldNames);\r\n      } catch (error) {\r\n        console.error('Error fetching form:', error);\r\n        setError(error.message || 'An error occurred while fetching the form.');\r\n      }\r\n    };\r\n\r\n    fetchFormFields();\r\n  }, []); // Run once on component mount\r\n\r\n  return (\r\n    <div>\r\n      <h2>Form Fields</h2>\r\n      {error ? (\r\n        <p style={{ color: 'red' }}>{error}</p>\r\n      ) : (\r\n        <ul>\r\n          {formFields.map((fieldName, index) => (\r\n            <li key={index}>{fieldName}</li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormFieldFetcher;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iHAAiH,CAAC;QAE/I,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,iCAAgCH,QAAQ,CAACI,MAAO,EAAC,CAAC;QACrE;QAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;;QAEjB;QACA,MAAMI,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;QAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACP,IAAI,EAAE,WAAW,CAAC;QACrD,MAAMV,UAAU,GAAGgB,GAAG,CAACE,gBAAgB,CAAC,wCAAwC,CAAC;;QAEjF;QACA,MAAMC,UAAU,GAAGC,KAAK,CAACC,IAAI,CAACrB,UAAU,CAAC,CAACsB,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,IAAID,OAAO,CAACE,EAAE,CAAC;QAEpFxB,aAAa,CAACkB,UAAU,CAAC;MAC3B,CAAC,CAAC,OAAOjB,KAAK,EAAE;QACdU,OAAO,CAACV,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CC,QAAQ,CAACD,KAAK,CAACwB,OAAO,IAAI,4CAA4C,CAAC;MACzE;IACF,CAAC;IAEDtB,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEP,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnB7B,KAAK,gBACJL,OAAA;MAAGmC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAN,QAAA,EAAEzB;IAAK;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAEvClC,OAAA;MAAA8B,QAAA,EACG3B,UAAU,CAACsB,GAAG,CAAC,CAACY,SAAS,EAAEC,KAAK,kBAC/BtC,OAAA;QAAA8B,QAAA,EAAiBO;MAAS,GAAjBC,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAChC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChC,EAAA,CAhDID,gBAAgB;AAAAsC,EAAA,GAAhBtC,gBAAgB;AAkDtB,eAAeA,gBAAgB;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}