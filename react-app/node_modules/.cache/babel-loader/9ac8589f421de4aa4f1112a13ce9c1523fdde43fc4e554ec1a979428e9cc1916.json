{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\Photo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { saveAs } from 'file-saver';\nimport UploadForm from './UploadForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Photo() {\n  _s();\n  const [processedImage, setProcessedImage] = useState(null);\n  const handleImageUpload = async imageData => {\n    try {\n      const response = await axios.post('http://localhost:5000/processImage', {\n        imageData\n      });\n      // Convert binary image data to a Blob\n      const blob = new Blob([new Uint8Array(response.data)], {\n        type: 'image/jpeg'\n      });\n\n      // Save the Blob as a file\n      saveAs(blob, 'passport.jpeg');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    console.log('Processed image changed:', processedImage);\n  }, [processedImage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image Processing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UploadForm, {\n      onImageUpload: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), processedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Processed Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: processedImage,\n        alt: \"Processed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(Photo, \"pHlMN/vdNVIxKseDkiZZltjiGXs=\");\n_c = Photo;\nexport default Photo;\nvar _c;\n$RefreshReg$(_c, \"Photo\");","map":{"version":3,"names":["React","useState","useEffect","axios","saveAs","UploadForm","jsxDEV","_jsxDEV","Photo","_s","processedImage","setProcessedImage","handleImageUpload","imageData","response","post","blob","Blob","Uint8Array","data","type","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onImageUpload","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/Photo.js"],"sourcesContent":["import React, { useState , useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { saveAs } from 'file-saver';\r\nimport UploadForm from './UploadForm';\r\n\r\nfunction Photo() {\r\n  const [processedImage, setProcessedImage] = useState(null);\r\n\r\n  const handleImageUpload = async (imageData) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/processImage', {\r\n        imageData,\r\n      });\r\n      // Convert binary image data to a Blob\r\n      const blob = new Blob([new Uint8Array(response.data)], { type: 'image/jpeg' });\r\n\r\n      // Save the Blob as a file\r\n      saveAs(blob, 'passport.jpeg');\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('Processed image changed:', processedImage);\r\n  }, [processedImage]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Image Processing</h1>\r\n      <UploadForm onImageUpload={handleImageUpload} />\r\n      {processedImage && (\r\n        <div>\r\n          <h2>Processed Image</h2>\r\n          <img src={processedImage} alt=\"Processed\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Photo;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAGC,SAAS,QAAQ,OAAO;AACnD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,YAAY;AACnC,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMW,iBAAiB,GAAG,MAAOC,SAAS,IAAK;IAC7C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,oCAAoC,EAAE;QACtEF;MACF,CAAC,CAAC;MACF;MACA,MAAMG,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,IAAIC,UAAU,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAC,EAAE;QAAEC,IAAI,EAAE;MAAa,CAAC,CAAC;;MAE9E;MACAhB,MAAM,CAACY,IAAI,EAAE,eAAe,CAAC;IAC/B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACdoB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEb,cAAc,CAAC;EACzD,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpB,oBACEH,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBrB,OAAA,CAACF,UAAU;MAACwB,aAAa,EAAEjB;IAAkB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC/ClB,cAAc,iBACbH,OAAA;MAAAiB,QAAA,gBACEjB,OAAA;QAAAiB,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBrB,OAAA;QAAKuB,GAAG,EAAEpB,cAAe;QAACqB,GAAG,EAAC;MAAW;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnB,EAAA,CAlCQD,KAAK;AAAAwB,EAAA,GAALxB,KAAK;AAoCd,eAAeA,KAAK;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}