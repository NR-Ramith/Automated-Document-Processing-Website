{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\react-app\\\\src\\\\components\\\\ViewFinalData.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport axios from './axios-object';\nimport { getTemplateId, getDId, getStateValue, getAllFieldValues, setTemplateId, setDId, resetFieldValues, resetFilledMandatoryFieldIndicator, resetStateValues, setFieldValue } from './values';\nimport './ViewFinalData.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing.unit * 2,\n    color: theme.palette.text.secondary\n  },\n  finalpaper: {\n    // padding: theme.spacing.unit * 2,\n    color: theme.palette.text.secondary,\n    position: \"relative\",\n    display: \"inline-block\"\n  },\n  image: {\n    width: '100%'\n  }\n});\nclass ViewFinalData extends Component {\n  constructor() {\n    super();\n    this.handleInputChange = e => {\n      // Access the new value from the input field\n      const newValue = e.target.value;\n      setFieldValue(e.target.getAttribute('data-field'), newValue);\n      console.log(getAllFieldValues());\n    };\n    this.handleNameChange = e => {\n      const newName = e.target.value;\n      this.setState({\n        name: newName\n      });\n    };\n    this.handleDateChange = e => {\n      const newDate = e.target.value;\n      this.setState({\n        date: newDate\n      });\n    };\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const dataToSend = getAllFieldValues();\n\n      // Filter out key-value pairs with null values\n      const filteredData = Object.fromEntries(Object.entries(dataToSend).filter(([key, value]) => value !== null));\n\n      // Check if there are non-null values to submit\n      if (Object.keys(filteredData).length === 0) {\n        alert('No data to submit.');\n        return;\n      }\n      console.log('filtereer', filteredData);\n      if (this.state.name !== null) {\n        if (this.state.date !== null) {\n          // Get today's date in the format YYYY-MM-DD\n          const today = new Date().toISOString().split('T')[0];\n\n          // Convert the entered date to the same format\n          const enteredDate = this.state.date.split('-').reverse().join('-');\n          if (today === enteredDate) {\n            filteredData['e-validation-name'] = this.state.name;\n            filteredData['e-validation-date'] = this.state.date;\n            // Send a POST request to the server\n            fetch(url, {\n              method: 'POST',\n              body: formData\n            }).then(response => {\n              if (!response.ok) {\n                throw new Error('Network response was not ok');\n              }\n              return response.json(); // Assuming the server sends JSON in the response\n            }).then(data => {\n              // Handle success\n              alert('Response Submitted');\n              setTemplateId(0);\n              setDId(0);\n              resetFieldValues();\n              resetFilledMandatoryFieldIndicator();\n              resetStateValues();\n              window.history.pushState({}, null, \"/formsList\");\n              window.dispatchEvent(new Event('popstate'));\n            }).catch(error => {\n              // Handle error\n              console.error('Error submitting response:', error);\n              alert('Failed to submit response. Please try again.');\n            });\n          } else {\n            alert('Enter today\\'s date.');\n          }\n        } else {\n          alert('Enter today\\'s date.');\n        }\n      } else {\n        alert('Enter your full name.');\n      }\n    };\n    this.state = {\n      data: [],\n      tid: null,\n      did: null,\n      templateURL: null,\n      formImageURL: null,\n      name: null,\n      date: null\n    };\n  }\n  componentDidMount() {\n    let tid = getTemplateId();\n    let did = getDId();\n    this.setState({\n      tid: tid,\n      did: did\n    });\n    const url = window.URL.createObjectURL(new Blob([getStateValue(\"form-image\")]));\n    this.setState({\n      formImageURL: url\n    });\n\n    // Make a request to fetch the file data\n    axios.get('/getTemplateFile/' + tid, {\n      responseType: 'blob'\n    }).then(response => {\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      // Set the URL to a state variable\n      this.setState({\n        templateURL: url\n      });\n    });\n    const dataToSend = getAllFieldValues();\n\n    // Filter out key-value pairs with null values\n    const filteredData = Object.fromEntries(Object.entries(dataToSend).filter(([key, value]) => value !== null));\n    console.log('filtered    ', filteredData);\n    axios.post('/showFinalMarked/' + tid, filteredData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(response => {\n      this.setState({\n        data: response.data\n      });\n      console.log(response.data);\n      // if (response.data)\n    });\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        wrap: \"nowrap\",\n        spacing: 24,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            className: classes.paper,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.formImageURL,\n              className: classes.image,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            className: classes.finalpaper,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.templateURL,\n              className: classes.image,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 29\n            }, this), this.state.data.map((field, key) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: Object.keys(field).map(data => {\n                  const st2 = {\n                    location: {\n                      position: \"absolute\",\n                      margin: \"0 auto\",\n                      color: \"black\",\n                      letterSpacing: \"0.4em\",\n                      left: field[data][\"lx\"] + 0.5 + \"%\",\n                      top: field[data][\"ty\"] + \"%\"\n                    }\n                  };\n                  if (field[data][\"type\"] === \"Text\") {\n                    return /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        style: st2.location,\n                        children: /*#__PURE__*/_jsxDEV(\"input\", {\n                          type: \"text\",\n                          class: \"transparent-input\",\n                          placeholder: data,\n                          defaultValue: data,\n                          \"data-field\": field[data]['field'],\n                          onChange: e => this.handleInputChange(e)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 199,\n                          columnNumber: 87\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 199,\n                        columnNumber: 61\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 199,\n                      columnNumber: 53\n                    }, this);\n                  } else if (field[data][\"type\"] === \"Signature\") {\n                    if (data === 'passportImage') {\n                      if (getAllFieldValues()['passportImage'] instanceof Blob) {\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          style: st2.location,\n                          children: /*#__PURE__*/_jsxDEV(\"img\", {\n                            src: URL.createObjectURL(getAllFieldValues()['passportImage']),\n                            alt: \"Passport\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 207,\n                            columnNumber: 87\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 207,\n                          columnNumber: 61\n                        }, this);\n                      } else {\n                        // Convert the base64 string to binary data\n                        const binaryImageData = atob(getAllFieldValues()['passportImage']);\n                        const arrayBuffer = new ArrayBuffer(binaryImageData.length);\n                        const view = new Uint8Array(arrayBuffer);\n                        for (let i = 0; i < binaryImageData.length; i++) {\n                          view[i] = binaryImageData.charCodeAt(i);\n                        }\n                        // Create a Blob and generate a URL for displaying the image\n                        const blob = new Blob([arrayBuffer], {\n                          type: 'image/png'\n                        });\n                        setFieldValue(field[data]['field'], blob);\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          style: st2.location,\n                          children: /*#__PURE__*/_jsxDEV(\"img\", {\n                            src: URL.createObjectURL(blob),\n                            alt: \"Passport\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 222,\n                            columnNumber: 87\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 222,\n                          columnNumber: 61\n                        }, this);\n                      }\n                      // else {\n                      //     // Fetch the blob data from the FormData object\n                      //     console.log(\" form data - \", field[data][\"imageData\"])\n                      //     const blobData = field[data][\"imageData\"].get('image');\n                      //     return (\n                      //         <div style={st2.location}><img src={URL.createObjectURL(blobData)} alt=\"Passport\" /></div>\n                      //     )\n                      // }\n                    } else {\n                      // Convert the base64 string to binary data\n                      const binaryImageData = atob(data);\n                      const arrayBuffer = new ArrayBuffer(binaryImageData.length);\n                      const view = new Uint8Array(arrayBuffer);\n                      for (let i = 0; i < binaryImageData.length; i++) {\n                        view[i] = binaryImageData.charCodeAt(i);\n                      }\n                      // Create a Blob and generate a URL for displaying the image\n                      const blob = new Blob([arrayBuffer], {\n                        type: 'image/png'\n                      });\n                      setFieldValue('passportImage', blob);\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        style: st2.location,\n                        children: /*#__PURE__*/_jsxDEV(\"img\", {\n                          src: URL.createObjectURL(blob),\n                          alt: \"Passport\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 246,\n                          columnNumber: 83\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 246,\n                        columnNumber: 57\n                      }, this);\n                    }\n                  } else {\n                    return /*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        style: st2.location,\n                        children: \"Nothing\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 252,\n                        columnNumber: 61\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 252,\n                      columnNumber: 53\n                    }, this);\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 37\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.handleNameChange,\n          placeholder: \"Your Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: this.handleDateChange,\n          placeholder: \"Date - YYYY-MM-DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: classes.button,\n          type: \"submit\",\n          onClick: this.handleSubmit,\n          children: \"Submit Response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this);\n  }\n}\nViewFinalData.contextTypes = {\n  router: PropTypes.object\n};\nViewFinalData.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(ViewFinalData);","map":{"version":3,"names":["React","Component","PropTypes","withStyles","Button","Paper","Grid","axios","getTemplateId","getDId","getStateValue","getAllFieldValues","setTemplateId","setDId","resetFieldValues","resetFilledMandatoryFieldIndicator","resetStateValues","setFieldValue","jsxDEV","_jsxDEV","styles","theme","root","flexGrow","paper","padding","spacing","unit","color","palette","text","secondary","finalpaper","position","display","image","width","ViewFinalData","constructor","handleInputChange","e","newValue","target","value","getAttribute","console","log","handleNameChange","newName","setState","name","handleDateChange","newDate","date","handleSubmit","event","preventDefault","dataToSend","filteredData","Object","fromEntries","entries","filter","key","keys","length","alert","state","today","Date","toISOString","split","enteredDate","reverse","join","fetch","url","method","body","formData","then","response","ok","Error","json","data","window","history","pushState","dispatchEvent","Event","catch","error","tid","did","templateURL","formImageURL","componentDidMount","URL","createObjectURL","Blob","get","responseType","post","headers","render","classes","props","className","children","container","wrap","item","xs","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","field","st2","location","margin","letterSpacing","left","top","style","type","class","placeholder","defaultValue","onChange","binaryImageData","atob","arrayBuffer","ArrayBuffer","view","Uint8Array","i","charCodeAt","blob","variant","button","onClick","contextTypes","router","object","propTypes","isRequired"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/react-app/src/components/ViewFinalData.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport axios from './axios-object';\r\nimport { getTemplateId, getDId, getStateValue, getAllFieldValues, setTemplateId, setDId, resetFieldValues, resetFilledMandatoryFieldIndicator, resetStateValues, setFieldValue } from './values';\r\nimport './ViewFinalData.css';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing.unit * 2,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    finalpaper: {\r\n        // padding: theme.spacing.unit * 2,\r\n        color: theme.palette.text.secondary,\r\n        position: \"relative\",\r\n        display: \"inline-block\"\r\n    },\r\n    image: {\r\n        width: '100%',\r\n    }\r\n});\r\n\r\nclass ViewFinalData extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: [],\r\n            tid: null,\r\n            did: null,\r\n            templateURL: null,\r\n            formImageURL: null,\r\n            name: null,\r\n            date: null,\r\n        }\r\n    }\r\n\r\n    static contextTypes = {\r\n        router: PropTypes.object,\r\n    }\r\n\r\n    componentDidMount() {\r\n        let tid = getTemplateId();\r\n        let did = getDId();\r\n        this.setState({ tid: tid, did: did });\r\n\r\n        const url = window.URL.createObjectURL(new Blob([getStateValue(\"form-image\")]));\r\n        this.setState({ formImageURL: url });\r\n\r\n        // Make a request to fetch the file data\r\n        axios.get('/getTemplateFile/' + tid, { responseType: 'blob' })\r\n            .then((response) => {\r\n                const url = window.URL.createObjectURL(new Blob([response.data]));\r\n                // Set the URL to a state variable\r\n                this.setState({ templateURL: url });\r\n            });\r\n\r\n        const dataToSend = getAllFieldValues();\r\n\r\n        // Filter out key-value pairs with null values\r\n        const filteredData = Object.fromEntries(\r\n            Object.entries(dataToSend).filter(([key, value]) => value !== null)\r\n        );\r\n\r\n        console.log('filtered    ', filteredData)\r\n\r\n        axios.post('/showFinalMarked/' + tid, filteredData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        })\r\n            .then(response => {\r\n                this.setState({ data: response.data }); console.log(response.data);\r\n                // if (response.data)\r\n            });\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        // Access the new value from the input field\r\n        const newValue = e.target.value;\r\n        setFieldValue(e.target.getAttribute('data-field'), newValue);\r\n        console.log(getAllFieldValues())\r\n    };\r\n\r\n    handleNameChange = (e) => {\r\n        const newName = e.target.value;\r\n        this.setState({ name: newName });\r\n    };\r\n\r\n    handleDateChange = (e) => {\r\n        const newDate = e.target.value;\r\n        this.setState({ date: newDate });\r\n    };\r\n\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const dataToSend = getAllFieldValues();\r\n\r\n        // Filter out key-value pairs with null values\r\n        const filteredData = Object.fromEntries(\r\n            Object.entries(dataToSend).filter(([key, value]) => value !== null)\r\n        );\r\n\r\n        // Check if there are non-null values to submit\r\n        if (Object.keys(filteredData).length === 0) {\r\n            alert('No data to submit.');\r\n            return;\r\n        }\r\n\r\n        console.log('filtereer',filteredData)\r\n\r\n        if (this.state.name !== null) {\r\n            if (this.state.date !== null) {\r\n                // Get today's date in the format YYYY-MM-DD\r\n                const today = new Date().toISOString().split('T')[0];\r\n\r\n                // Convert the entered date to the same format\r\n                const enteredDate = this.state.date.split('-').reverse().join('-');\r\n                if (today === enteredDate) {\r\n                    filteredData['e-validation-name'] = this.state.name;\r\n                    filteredData['e-validation-date'] = this.state.date;\r\n                    // Send a POST request to the server\r\n                    fetch(url, {\r\n                        method: 'POST',\r\n                        body: formData,\r\n                      })\r\n                        .then(response => {\r\n                          if (!response.ok) {\r\n                            throw new Error('Network response was not ok');\r\n                          }\r\n                          return response.json(); // Assuming the server sends JSON in the response\r\n                        })\r\n                        .then(data => {\r\n                          // Handle success\r\n                          alert('Response Submitted');\r\n                          setTemplateId(0);\r\n                          setDId(0);\r\n                          resetFieldValues();\r\n                          resetFilledMandatoryFieldIndicator();\r\n                          resetStateValues();\r\n                          window.history.pushState({}, null, \"/formsList\");\r\n                          window.dispatchEvent(new Event('popstate'));\r\n                        })\r\n                        .catch(error => {\r\n                          // Handle error\r\n                          console.error('Error submitting response:', error);\r\n                          alert('Failed to submit response. Please try again.');\r\n                        });\r\n                } else {\r\n                    alert('Enter today\\'s date.');\r\n                }\r\n            } else {\r\n                alert('Enter today\\'s date.');\r\n            }\r\n        } else {\r\n            alert('Enter your full name.');\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container wrap=\"nowrap\" spacing={24}>\r\n                    <Grid item xs={6}>\r\n                        <Paper className={classes.paper}>\r\n                            <img src={this.state.formImageURL} className={classes.image} alt='' />\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Paper className={classes.finalpaper}>\r\n                            <img src={this.state.templateURL} className={classes.image} alt='' />\r\n\r\n                            {this.state.data.map((field, key) => {\r\n\r\n                                return (\r\n                                    <div>\r\n                                        {Object.keys(field).map(data => {\r\n                                            const st2 = {\r\n                                                location: {\r\n                                                    position: \"absolute\",\r\n                                                    margin: \"0 auto\",\r\n                                                    color: \"black\",\r\n                                                    letterSpacing: \"0.4em\",\r\n                                                    left: field[data][\"lx\"] + 0.5 + \"%\",\r\n                                                    top: field[data][\"ty\"] + \"%\",\r\n                                                }\r\n                                            }\r\n                                            if (field[data][\"type\"] === \"Text\") {\r\n                                                return (\r\n                                                    <strong><div style={st2.location}><input type=\"text\" class=\"transparent-input\" placeholder={data} defaultValue={data}\r\n                                                        data-field={field[data]['field']} onChange={(e) => this.handleInputChange(e)} /></div></strong>\r\n                                                )\r\n                                            }\r\n                                            else if (field[data][\"type\"] === \"Signature\") {\r\n                                                if (data === 'passportImage') {\r\n                                                    if (getAllFieldValues()['passportImage'] instanceof Blob) {\r\n                                                        return (\r\n                                                            <div style={st2.location}><img src={URL.createObjectURL(getAllFieldValues()['passportImage'])} alt=\"Passport\" /></div>\r\n                                                        )\r\n                                                    }\r\n                                                    else {\r\n                                                        // Convert the base64 string to binary data\r\n                                                        const binaryImageData = atob(getAllFieldValues()['passportImage']);\r\n                                                        const arrayBuffer = new ArrayBuffer(binaryImageData.length);\r\n                                                        const view = new Uint8Array(arrayBuffer);\r\n                                                        for (let i = 0; i < binaryImageData.length; i++) {\r\n                                                            view[i] = binaryImageData.charCodeAt(i);\r\n                                                        }\r\n                                                        // Create a Blob and generate a URL for displaying the image\r\n                                                        const blob = new Blob([arrayBuffer], { type: 'image/png' });\r\n                                                        setFieldValue(field[data]['field'], blob);\r\n                                                        return (\r\n                                                            <div style={st2.location}><img src={URL.createObjectURL(blob)} alt=\"Passport\" /></div>\r\n                                                        )\r\n                                                    }\r\n                                                    // else {\r\n                                                    //     // Fetch the blob data from the FormData object\r\n                                                    //     console.log(\" form data - \", field[data][\"imageData\"])\r\n                                                    //     const blobData = field[data][\"imageData\"].get('image');\r\n                                                    //     return (\r\n                                                    //         <div style={st2.location}><img src={URL.createObjectURL(blobData)} alt=\"Passport\" /></div>\r\n                                                    //     )\r\n                                                    // }\r\n                                                }\r\n                                                else {\r\n                                                    // Convert the base64 string to binary data\r\n                                                    const binaryImageData = atob(data);\r\n                                                    const arrayBuffer = new ArrayBuffer(binaryImageData.length);\r\n                                                    const view = new Uint8Array(arrayBuffer);\r\n                                                    for (let i = 0; i < binaryImageData.length; i++) {\r\n                                                        view[i] = binaryImageData.charCodeAt(i);\r\n                                                    }\r\n                                                    // Create a Blob and generate a URL for displaying the image\r\n                                                    const blob = new Blob([arrayBuffer], { type: 'image/png' });\r\n                                                    setFieldValue('passportImage', blob);\r\n                                                    return (\r\n                                                        <div style={st2.location}><img src={URL.createObjectURL(blob)} alt=\"Passport\" /></div>\r\n                                                    )\r\n                                                }\r\n\r\n                                            } else {\r\n                                                return (\r\n                                                    <strong><div style={st2.location}>Nothing</div></strong>\r\n                                                )\r\n                                            }\r\n                                        })}\r\n                                    </div>\r\n                                )\r\n                            })}\r\n\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n                <div>\r\n                    <input type=\"text\" onChange={this.handleNameChange} placeholder=\"Your Name\" />\r\n                    <input type=\"text\" onChange={this.handleDateChange} placeholder=\"Date - YYYY-MM-DD\" />\r\n                    <Button variant=\"contained\" color=\"primary\" className={classes.button} type=\"submit\" onClick={this.handleSubmit}>\r\n                        Submit Response\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nViewFinalData.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ViewFinalData);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}