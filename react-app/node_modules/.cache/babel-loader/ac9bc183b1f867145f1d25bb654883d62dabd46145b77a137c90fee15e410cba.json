{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport questions from \"./questions\";\nimport { validateAndFormatName, isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength, isValidEmailFormat, toTitle } from './validate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [voiceInput, setVoiceInput] = useState('');\n  const inputRef = useRef(null);\n  const [userInputs, setUserInputs] = useState([]);\n  const [familyIncome, setFamilyIncome] = useState('');\n  const [checkboxValue, setCheckboxValue] = useState('');\n  const [inputs, setInputs] = useState([]);\n  const [lastQuestionValue, setLastQuestionValue] = useState('');\n  const location = useLocation();\n  let selectedFormId = null;\n  if (location !== null) {\n    selectedFormId = location.state.selectedFormId;\n    // console.log(selectedFormId);\n  }\n\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const readOutText = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  const askNextQuestion = () => {\n    // Check if there are more questions in the selected form\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\n      // Get the next question\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\n\n      // Create a message for the next question\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n\n      // Update the state with the new question and messages\n      setMessages(messages => [...messages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n\n      // Read out the next question\n      readOutText(nextQuestion.text);\n    } else {\n      // Conversation ended, you can handle this however you want\n      const endMessage = {\n        text: 'Thank you for the conversation!\\n Enter your Name',\n        isUser: false\n      };\n      // setMessages([...messages, endMessage]);\n      setMessages(messages => [...messages, endMessage]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n      readOutText(endMessage.text);\n    }\n  };\n  const handleUserInput = async event => {\n    event.preventDefault();\n    // console.log('Handle User Input');\n    // console.log('Data:', { name, address, dob });\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    // Remove trailing full stop if it exists\n    userInput = userInput.replace(/\\.$/, '');\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\n    let updatedMessages = [];\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\n\n    // if (userInput === \"\") {\n    //   // If field is mandatory\n    //   if (currentQuestion.field === 'name' || currentQuestion.field === 'personalNumber') {\n    //     const mandatoryMessage = {\n    //       text: 'This field is required.',\n    //     };\n    //     setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\n    //     readOutText(mandatoryMessage.text);\n    //     return;\n    //   }\n    //   if (currentQuestion.field === 'familyIncome') {\n    //     if (familyIncome === '') {\n    //       const mandatoryMessage = {\n    //         text: 'Please select an option.',\n    //         isUser: false,\n    //       };\n    //       setMessages([...messages, mandatoryMessage]);\n    //       readOutText(mandatoryMessage.text);\n    //       return;\n    //     }\n    //     // userInput=familyIncome;\n    //     // console.log(familyIncome);\n    //     // const familyIncomeMessage = { text: 'yes', isUser: true };\n    //     // setMessages(prevMessages => [...prevMessages, familyIncomeMessage]);\n    //     // setMessages([...messages, familyIncomeMessage]);\n    //     // readOutText(familyIncomeMessage.text);\n    //     // console.log(messages)\n    //     // setVoiceInput('');\n    //     // setUserInputs((prevUserInputs) => [...prevUserInputs, { familyIncome }]);\n    //   }\n    //   // If user input is empty, just move to the next question\n    //   askNextQuestion();\n    //   return; // Skip further processing\n    // }\n\n    let validationFailed = false;\n    let invalidMessage;\n    if (currentQuestion.mandatory) for (let i = 0; i < currentQuestion.callValidations.length; i++) {\n      const validationCheck = currentQuestion.callValidations[i];\n      if (validationCheck === 'mandatory') {\n        if (!userInput) {\n          invalidMessage = \"This field is required.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'onlyAlphabets') {\n        if (!hasOnlyAlphabets(userInput)) {\n          invalidMessage = \"Field must contain only alphabets.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'onlyDigits') {\n        if (!hasOnlyDigits(userInput)) {\n          invalidMessage = \"Field must contain only digits.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'maxLength') {\n        if (!hasFieldLength(userInput, currentQuestion.fieldLength, false)) {\n          invalidMessage = \"Field exceeds the max length.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'fixedLength') {\n        if (!hasFieldLength(userInput, currentQuestion.fieldLength, true)) {\n          invalidMessage = \"Field is not of the required length.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'validEmail') {\n        if (!isValidEmailFormat(userInput)) {\n          invalidMessage = \"Field is not of proper Email id format.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'makeTitle') {\n        userInput = toTitle(userInput);\n      } else if (validationCheck === 'dateFormat') {\n        if (!isValidDateFormat(userInput)) {\n          invalidMessage = \"Field is not of proper date format.\";\n          validationFailed = true;\n          break;\n        }\n      } else if (validationCheck === 'validDate') {\n        if (!isValidDate(userInput)) {\n          invalidMessage = \"Field is not a proper calendar date or date lies in the future.\";\n          validationFailed = true;\n          break;\n        }\n      }\n    }\n    if (validationFailed) {\n      const invalidMessageObj = {\n        text: invalidMessage,\n        isUser: false\n      };\n      setMessages([...messages, invalidMessageObj]);\n      readOutText(invalidMessage);\n      return; // Exit the handleUserInput function if validation failed\n    }\n\n    if (userInput) {\n      setInputs([...inputs, {\n        fieldName: currentQuestion.field,\n        val: userInput\n      }]);\n      if (currentQuestion.last === true) setLastQuestionValue(userInput);\n\n      // Add the user's input to the messages\n      updatedMessages = [...messages, {\n        text: userInput,\n        isUser: true\n      }];\n      setMessages(updatedMessages);\n      setVoiceInput('');\n    } else {\n      if (currentQuestion.last === true) setLastQuestionValue('Empty');\n    }\n\n    // Move to the next field or end the conversation\n    askNextQuestion();\n  };\n\n  // Use useEffect to capture the updated dob value before sending it to the server\n  useEffect(() => {\n    if (lastQuestionValue || lastQuestionValue === 'Empty') {\n      // Send the user input to the server\n      const sendUserInput = async () => {\n        const userInputData = {};\n        for (let i = 0; i < inputs.length; i++) {\n          console.log(inputs[i]);\n          userInputData[inputs[i].fieldName] = inputs[i].val;\n        }\n\n        // Prepare the user input data by filtering out empty fields\n        // const userInputData = {};\n        // for (const [key, value] of Object.entries(fields)) {\n        //   if (value !== null && value !== undefined && value !== '') {\n        //     userInputData[key] = value;\n        //   }\n        // }\n        try {\n          await axios.post('http://localhost:3001/save', {\n            userInput: userInputData\n          });\n          console.log('User input saved successfully');\n\n          // Add the user inputs to the userInputs array\n          const newInput = userInputData;\n          console.log(newInput);\n          setUserInputs(prevUserInputs => [...prevUserInputs, newInput]);\n\n          // Clear the input fields\n          setLastQuestionValue('');\n          setInputs([]);\n        } catch (error) {\n          console.error('Failed to save user input:', error);\n        }\n      };\n      sendUserInput();\n    }\n  }, [lastQuestionValue]);\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n    readOutText(currentQuestion.text); // Read out the initial question\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      className: \"chat-window\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isUser ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this)), userInputs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Collected Inputs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this), userInputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: Object.entries(input).map(_ref => {\n            let [fieldName, fieldValue] = _ref;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [fieldName, \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 23\n                }, this), \" \", fieldValue]\n              }, fieldName, true, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 19\n            }, this);\n          })\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), questions[selectedFormId][currentQuestionIndex].options ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-options\",\n        children: questions[selectedFormId][currentQuestionIndex].options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-option\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: option.value,\n            name: option.value\n            // checked={checkboxValue === option.value}\n            ,\n            checked: false,\n            onChange: () => {\n              // setCheckboxValue(option.value);\n              setInputs([...inputs, {\n                fieldName: questions[selectedFormId][currentQuestionIndex].field,\n                val: option.value\n              }]);\n              const checkboxMessage = {\n                text: option.value,\n                isUser: true\n              };\n              setMessages([...messages, checkboxMessage]);\n              askNextQuestion();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: option.value,\n            children: option.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 17\n          }, this)]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        value: voiceInput,\n        onChange: e => setVoiceInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recognition\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startVoiceRecognition,\n        children: \"Start Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopVoiceRecognition,\n        children: \"Stop Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"Z6HWgJtk1c3sqXV9ldpp16rN0sc=\", false, function () {\n  return [useLocation];\n});\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useLocation","questions","validateAndFormatName","isValidDateFormat","isValidDate","hasOnlyAlphabets","hasOnlyDigits","hasFieldLength","isValidEmailFormat","toTitle","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","currentQuestionIndex","setCurrentQuestionIndex","voiceInput","setVoiceInput","inputRef","userInputs","setUserInputs","familyIncome","setFamilyIncome","checkboxValue","setCheckboxValue","inputs","setInputs","lastQuestionValue","setLastQuestionValue","location","selectedFormId","state","handleVoiceInput","event","transcript","results","handleVoiceError","console","log","error","readOutText","text","utterance","SpeechSynthesisUtterance","window","speechSynthesis","speak","startVoiceRecognition","SpeechRecognition","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","askNextQuestion","length","nextQuestion","nextQuestionMessage","isUser","endMessage","handleUserInput","preventDefault","userInput","current","value","replace","currentQuestion","updatedMessages","trim","validationFailed","invalidMessage","mandatory","i","callValidations","validationCheck","fieldLength","invalidMessageObj","fieldName","field","val","last","sendUserInput","userInputData","post","newInput","prevUserInputs","chatWindow","document","getElementById","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","message","index","input","Object","entries","_ref","fieldValue","options","option","type","name","checked","onChange","checkboxMessage","htmlFor","label","onSubmit","ref","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport axios from 'axios';\r\nimport { useLocation } from 'react-router-dom';\r\nimport questions from \"./questions\";\r\nimport { validateAndFormatName, isValidDateFormat, isValidDate, hasOnlyAlphabets, hasOnlyDigits, hasFieldLength, isValidEmailFormat, toTitle } from './validate';\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const inputRef = useRef(null);\r\n  const [userInputs, setUserInputs] = useState([]);\r\n  const [familyIncome, setFamilyIncome] = useState('');\r\n  const [checkboxValue, setCheckboxValue] = useState('');\r\n  const [inputs, setInputs] = useState([]);\r\n\r\n  const [lastQuestionValue, setLastQuestionValue] = useState('');\r\n\r\n\r\n  const location = useLocation();\r\n  let selectedFormId = null;\r\n  if (location !== null) {\r\n    selectedFormId = location.state.selectedFormId;\r\n    // console.log(selectedFormId);\r\n  }\r\n\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const readOutText = (text) => {\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n\r\n  const askNextQuestion = () => {\r\n    // Check if there are more questions in the selected form\r\n    if (currentQuestionIndex + 1 < questions[selectedFormId].length) {\r\n      // Get the next question\r\n      const nextQuestion = questions[selectedFormId][currentQuestionIndex + 1];\r\n\r\n      // Create a message for the next question\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n\r\n      // Update the state with the new question and messages\r\n      setMessages((messages) => [...messages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n\r\n      // Read out the next question\r\n      readOutText(nextQuestion.text);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!\\n Enter your Name',\r\n        isUser: false,\r\n      };\r\n      // setMessages([...messages, endMessage]);\r\n      setMessages((messages) => [...messages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n      readOutText(endMessage.text);\r\n    }\r\n  };\r\n\r\n\r\n  const handleUserInput = async (event) => {\r\n    event.preventDefault();\r\n    // console.log('Handle User Input');\r\n    // console.log('Data:', { name, address, dob });\r\n    let userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    // Remove trailing full stop if it exists\r\n    userInput = userInput.replace(/\\.$/, '');\r\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\r\n    let updatedMessages = [];\r\n\r\n    userInput = userInput.trim(); // Remove leading and trailing whitespace\r\n\r\n    // if (userInput === \"\") {\r\n    //   // If field is mandatory\r\n    //   if (currentQuestion.field === 'name' || currentQuestion.field === 'personalNumber') {\r\n    //     const mandatoryMessage = {\r\n    //       text: 'This field is required.',\r\n    //     };\r\n    //     setMessages(prevMessages => [...prevMessages, mandatoryMessage]);\r\n    //     readOutText(mandatoryMessage.text);\r\n    //     return;\r\n    //   }\r\n    //   if (currentQuestion.field === 'familyIncome') {\r\n    //     if (familyIncome === '') {\r\n    //       const mandatoryMessage = {\r\n    //         text: 'Please select an option.',\r\n    //         isUser: false,\r\n    //       };\r\n    //       setMessages([...messages, mandatoryMessage]);\r\n    //       readOutText(mandatoryMessage.text);\r\n    //       return;\r\n    //     }\r\n    //     // userInput=familyIncome;\r\n    //     // console.log(familyIncome);\r\n    //     // const familyIncomeMessage = { text: 'yes', isUser: true };\r\n    //     // setMessages(prevMessages => [...prevMessages, familyIncomeMessage]);\r\n    //     // setMessages([...messages, familyIncomeMessage]);\r\n    //     // readOutText(familyIncomeMessage.text);\r\n    //     // console.log(messages)\r\n    //     // setVoiceInput('');\r\n    //     // setUserInputs((prevUserInputs) => [...prevUserInputs, { familyIncome }]);\r\n    //   }\r\n    //   // If user input is empty, just move to the next question\r\n    //   askNextQuestion();\r\n    //   return; // Skip further processing\r\n    // }\r\n\r\n    let validationFailed = false;\r\n    let invalidMessage;\r\n\r\n    if(currentQuestion.mandatory)\r\n\r\n    for (let i = 0; i < currentQuestion.callValidations.length; i++) {\r\n      const validationCheck = currentQuestion.callValidations[i];\r\n      if (validationCheck === 'mandatory') {\r\n        if (!userInput) {\r\n          invalidMessage = \"This field is required.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'onlyAlphabets') {\r\n        if (!hasOnlyAlphabets(userInput)) {\r\n          invalidMessage = \"Field must contain only alphabets.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'onlyDigits') {\r\n        if (!hasOnlyDigits(userInput)) {\r\n          invalidMessage = \"Field must contain only digits.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'maxLength') {\r\n        if (!hasFieldLength(userInput, currentQuestion.fieldLength, false)) {\r\n          invalidMessage = \"Field exceeds the max length.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'fixedLength') {\r\n        if (!hasFieldLength(userInput, currentQuestion.fieldLength, true)) {\r\n          invalidMessage = \"Field is not of the required length.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'validEmail') {\r\n        if (!isValidEmailFormat(userInput)) {\r\n          invalidMessage = \"Field is not of proper Email id format.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'makeTitle') {\r\n        userInput = toTitle(userInput);\r\n      } else if (validationCheck === 'dateFormat') {\r\n        if (!isValidDateFormat(userInput)) {\r\n          invalidMessage = \"Field is not of proper date format.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      } else if (validationCheck === 'validDate') {\r\n        if (!isValidDate(userInput)) {\r\n          invalidMessage = \"Field is not a proper calendar date or date lies in the future.\";\r\n          validationFailed = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validationFailed) {\r\n      const invalidMessageObj = { text: invalidMessage, isUser: false };\r\n      setMessages([...messages, invalidMessageObj]);\r\n      readOutText(invalidMessage);\r\n      return; // Exit the handleUserInput function if validation failed\r\n    }\r\n    if (userInput) {\r\n      setInputs([...inputs, { fieldName: currentQuestion.field, val: userInput }]);\r\n      if (currentQuestion.last === true)\r\n        setLastQuestionValue(userInput);\r\n\r\n      // Add the user's input to the messages\r\n      updatedMessages = [\r\n        ...messages,\r\n        { text: userInput, isUser: true },\r\n      ];\r\n      setMessages(updatedMessages);\r\n      setVoiceInput('');\r\n    } else {\r\n      if (currentQuestion.last === true)\r\n        setLastQuestionValue('Empty');\r\n    }\r\n\r\n    // Move to the next field or end the conversation\r\n    askNextQuestion();\r\n  };\r\n\r\n\r\n  // Use useEffect to capture the updated dob value before sending it to the server\r\n  useEffect(() => {\r\n    if (lastQuestionValue || lastQuestionValue==='Empty') {\r\n      // Send the user input to the server\r\n      const sendUserInput = async () => {\r\n        const userInputData = {};\r\n        for (let i = 0; i < inputs.length; i++) {\r\n          console.log(inputs[i]);\r\n          userInputData[inputs[i].fieldName] = inputs[i].val;\r\n        }\r\n\r\n        // Prepare the user input data by filtering out empty fields\r\n        // const userInputData = {};\r\n        // for (const [key, value] of Object.entries(fields)) {\r\n        //   if (value !== null && value !== undefined && value !== '') {\r\n        //     userInputData[key] = value;\r\n        //   }\r\n        // }\r\n        try {\r\n          await axios.post('http://localhost:3001/save', {\r\n            userInput: userInputData,\r\n          });\r\n          console.log('User input saved successfully');\r\n\r\n          // Add the user inputs to the userInputs array\r\n          const newInput = userInputData;\r\n          console.log(newInput);\r\n          setUserInputs((prevUserInputs) => [...prevUserInputs, newInput]);\r\n\r\n          // Clear the input fields\r\n          setLastQuestionValue('');\r\n          setInputs([]);\r\n\r\n        } catch (error) {\r\n          console.error('Failed to save user input:', error);\r\n        }\r\n      };\r\n\r\n      sendUserInput();\r\n    }\r\n  }, [lastQuestionValue]);\r\n\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[selectedFormId][currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n    readOutText(currentQuestion.text); // Read out the initial question\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {userInputs.length > 0 && (\r\n          <div className=\"message bot\">\r\n            <h4>Collected Inputs:</h4>\r\n            {userInputs.map((input, index) => (\r\n              <div key={index}>\r\n                {Object.entries(input).map(([fieldName, fieldValue]) => (\r\n                  <div>\r\n                    <span key={fieldName}>\r\n                      <strong>{fieldName}:</strong> {fieldValue}\r\n                    </span>\r\n                    <br />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        {questions[selectedFormId][currentQuestionIndex].options ? (\r\n          <div className=\"checkbox-options\">\r\n            {questions[selectedFormId][currentQuestionIndex].options.map((option) => (\r\n              <div key={option.value} className=\"checkbox-option\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={option.value}\r\n                  name={option.value}\r\n                  // checked={checkboxValue === option.value}\r\n                  checked={false}\r\n                  onChange={() => {\r\n                    // setCheckboxValue(option.value);\r\n                    setInputs([...inputs, { fieldName: questions[selectedFormId][currentQuestionIndex].field, val: option.value }]);\r\n                    const checkboxMessage = {\r\n                      text: option.value,\r\n                      isUser: true,\r\n                    };\r\n                    setMessages([...messages, checkboxMessage]);\r\n                    askNextQuestion();\r\n                  }}\r\n                />\r\n                <label htmlFor={option.value}>{option.label}</label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          ref={inputRef}\r\n          value={voiceInput}\r\n          onChange={(e) => setVoiceInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}