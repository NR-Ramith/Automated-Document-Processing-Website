{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\react-app\\\\src\\\\components\\\\Menu.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './Menu.css';\nimport { useNavigate } from 'react-router-dom';\nimport UploadForm from './UploadForm';\nimport { getTemplateId } from './values';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Menu = () => {\n  _s();\n  const [processedImageBlob, setProcessedImageBlob] = useState(null);\n  const [processedImageURL, setProcessedImageURL] = useState(null);\n  const [isLoading, setIsLoading] = useState(false); // New loading state\n  const navigate = useNavigate();\n  const fileInputRef = useRef(null);\n  let selectedFormId = getTemplateId();\n  const handleImageUpload = async imageData => {\n    setIsLoading(true); // Set loading state to true when processing starts\n\n    try {\n      const response = await fetch('http://localhost:5000/processImage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          imageData\n        }) // Assuming imageData is a base64-encoded image\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const blob = await response.blob();\n\n      // Check if the Blob has a valid type (e.g., image/jpeg, image/png)\n      if (blob.type.startsWith('image/')) {\n        // Create a Blob URL for the image\n        setProcessedImageBlob(blob);\n        const imageUrl = URL.createObjectURL(blob);\n        setProcessedImageURL(imageUrl);\n      } else {\n        console.error('Invalid Blob type:', blob.type);\n        // Handle the case where the Blob is not a valid image\n      }\n    } catch (error) {\n      console.error('Error fetching image:', error);\n      // Handle the fetch error here\n    } finally {\n      setIsLoading(false); // Set loading state to false when processing is complete\n    }\n  };\n\n  const handleButtonClick = () => {\n    navigate('/chatbot', {\n      state: {\n        selectedFormId: selectedFormId\n      }\n    });\n  };\n  const handleScanFormClick = () => {\n    navigate('/getdata');\n  };\n  const handleImageSubmit = async () => {\n    if (processedImageBlob) {\n      setIsLoading(true);\n      try {\n        const formData = new FormData();\n        formData.append('image', processedImageBlob);\n        const response = await fetch('http://localhost:5000/uploadImage', {\n          method: 'POST',\n          body: formData\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        console.log('Image uploaded successfully');\n\n        // Reset the file input value to clear the selected file\n        fileInputRef.current.value = '';\n\n        // Reset the processedImageBlob and URL after upload\n        setProcessedImageBlob(null);\n        setProcessedImageURL(null);\n      } catch (error) {\n        console.error('Error uploading image:', error);\n        // Handle the fetch error here\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  const goBack = () => {\n    navigate('/formsList');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goBack,\n      className: \"back-button\",\n      children: \"&lt- Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"menu-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"menu-title\",\n          children: \"Image Processing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(UploadForm, {\n          onImageUpload: handleImageUpload,\n          fileInputRef: fileInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this) : processedImageURL ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processed-image-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Processed Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"processed-image\",\n            src: processedImageURL,\n            alt: \"Processed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleImageSubmit,\n            className: \"submit-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleScanFormClick,\n        className: \"scan-form-button\",\n        children: \"Scan Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-application\",\n        children: \"Don't have the filled application form?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleButtonClick,\n        className: \"chatbot-button\",\n        children: \"Try ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Menu, \"rXJhpUNyCpHk6vOIXpzhskioNBk=\", false, function () {\n  return [useNavigate];\n});\n_c = Menu;\nexport default Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useState","useRef","useNavigate","UploadForm","getTemplateId","jsxDEV","_jsxDEV","Fragment","_Fragment","Menu","_s","processedImageBlob","setProcessedImageBlob","processedImageURL","setProcessedImageURL","isLoading","setIsLoading","navigate","fileInputRef","selectedFormId","handleImageUpload","imageData","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","blob","type","startsWith","imageUrl","URL","createObjectURL","console","error","handleButtonClick","state","handleScanFormClick","handleImageSubmit","formData","FormData","append","log","current","value","goBack","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","onImageUpload","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/react-app/src/components/Menu.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './Menu.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport UploadForm from './UploadForm';\r\nimport { getTemplateId } from './values';\r\n\r\nconst Menu = () => {\r\n    const [processedImageBlob, setProcessedImageBlob] = useState(null);\r\n    const [processedImageURL, setProcessedImageURL] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false); // New loading state\r\n    const navigate = useNavigate();\r\n    const fileInputRef = useRef(null);\r\n    let selectedFormId = getTemplateId();\r\n\r\n    const handleImageUpload = async (imageData) => {\r\n        setIsLoading(true); // Set loading state to true when processing starts\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/processImage', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ imageData }), // Assuming imageData is a base64-encoded image\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n\r\n            const blob = await response.blob();\r\n\r\n            // Check if the Blob has a valid type (e.g., image/jpeg, image/png)\r\n            if (blob.type.startsWith('image/')) {\r\n                // Create a Blob URL for the image\r\n                setProcessedImageBlob(blob);\r\n                const imageUrl = URL.createObjectURL(blob);\r\n                setProcessedImageURL(imageUrl);\r\n            } else {\r\n                console.error('Invalid Blob type:', blob.type);\r\n                // Handle the case where the Blob is not a valid image\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching image:', error);\r\n            // Handle the fetch error here\r\n        } finally {\r\n            setIsLoading(false); // Set loading state to false when processing is complete\r\n        }\r\n    };\r\n\r\n    const handleButtonClick = () => {\r\n        navigate('/chatbot', { state: { selectedFormId: selectedFormId } });\r\n    };\r\n\r\n    const handleScanFormClick = () => {\r\n        navigate('/getdata');\r\n    };\r\n\r\n    const handleImageSubmit = async () => {\r\n        if (processedImageBlob) {\r\n            setIsLoading(true);\r\n\r\n            try {\r\n                const formData = new FormData();\r\n                formData.append('image', processedImageBlob);\r\n\r\n                const response = await fetch('http://localhost:5000/uploadImage', {\r\n                    method: 'POST',\r\n                    body: formData,\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! Status: ${response.status}`);\r\n                }\r\n\r\n                console.log('Image uploaded successfully');\r\n\r\n                // Reset the file input value to clear the selected file\r\n                fileInputRef.current.value = '';\r\n\r\n                // Reset the processedImageBlob and URL after upload\r\n                setProcessedImageBlob(null);\r\n                setProcessedImageURL(null);\r\n            } catch (error) {\r\n                console.error('Error uploading image:', error);\r\n                // Handle the fetch error here\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const goBack = () => {\r\n        navigate('/formsList');\r\n      };\r\n\r\n    return (\r\n        <>\r\n            <button onClick={goBack} className=\"back-button\">&lt- Back</button>\r\n            <div className=\"menu-container\">\r\n                <div className=\"menu-content\">\r\n                    <h1 className=\"menu-title\">Image Processing</h1>\r\n                    <UploadForm onImageUpload={handleImageUpload} fileInputRef={fileInputRef} />\r\n                    {isLoading ? (\r\n                        <div className=\"loading-spinner-container\">\r\n                            <div className=\"loading-spinner\"></div>\r\n                        </div>\r\n                    ) : processedImageURL ? (\r\n                        <div className=\"processed-image-container\">\r\n                            <h2>Processed Image</h2>\r\n                            <img className=\"processed-image\" src={processedImageURL} alt=\"Processed\" />\r\n                            <button onClick={handleImageSubmit} className=\"submit-button\">Submit</button>\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n                <button onClick={handleScanFormClick} className=\"scan-form-button\">Scan Form</button>\r\n                <p className=\"no-application\">Don't have the filled application form?</p>\r\n                <button onClick={handleButtonClick} className=\"chatbot-button\">Try ChatBot</button>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Menu;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}