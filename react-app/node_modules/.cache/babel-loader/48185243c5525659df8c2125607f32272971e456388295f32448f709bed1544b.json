{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ramith\\\\Projects\\\\Application Scanner\\\\scanner-app\\\\src\\\\components\\\\Menu.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Menu.css';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport UploadForm from './UploadForm';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Menu = () => {\n  _s();\n  const [processedImage, setProcessedImage] = useState(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n  let selectedForm = null;\n  if (location !== null) {\n    selectedForm = location.state.selectedForm;\n    console.log(selectedForm);\n  }\n  // const path = require('path');\n  // const fs = require('fs');\n  // const passportImagePath = path.join(__dirname, 'res_image.jpeg');\n\n  const handleImageUpload = async imageData => {\n    try {\n      const response = await axios.post('http://localhost:5000/processImage', {\n        imageData\n      });\n      // console.log(response);\n      // setProcessedImage(response.data);\n      // const processedImageUrl = URL.createObjectURL(response.data);\n      // const fetchresponse = await fetch(response.data); // Replace with the actual path\n      console.log(response);\n      // const imageBlob = await response.data.blob();\n      // setProcessedImage(URL.createObjectURL(imageBlob));\n      const blob = new Blob([response.data], {\n        type: 'image/jpeg'\n      });\n      // saveAs(blob, \"my-image.jpeg\");\n\n      const blobURL = URL.createObjectURL(blob);\n      console.log(blobURL); // Check the console to see if it's a valid Blob\n      setProcessedImage(blobURL);\n      // Save the buffer as a temporary image\n      // console.log(response);\n      // fs.writeFile(passportImagePath, response, (err) => {\n      //   if (err) {\n      //     console.error(err);\n      //   }});\n      // const buffer = Buffer.from(response.data, 'binary'); // Convert image data to Buffer\n      // const blob = new Blob([response.data], { type: 'image/jpeg' }); // Create Blob from Buffer\n      // setProcessedImage(URL.createObjectURL(blob)); // Convert Blob to URL\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleFillButtonClick = form => {\n    setSelectedForm(form);\n    navigate('/menu', {\n      state: {\n        selectedForm: form\n      }\n    }); // Use navigate() for navigation\n  };\n\n  useEffect(() => {\n    console.log('Processed image changed:', processedImage);\n  }, [processedImage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"menu-title\",\n        children: \"Image Processing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UploadForm, {\n        onImageUpload: handleImageUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), processedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processed-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Processed Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"processed-image\",\n          src: processedImage,\n          alt: \"Processed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-application\",\n      children: \"Don't have the filled application form?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-button\",\n      children: \"Try ChatBot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(Menu, \"w96UgVjXg+3vnnulwY6q9hVeeLg=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Menu;\nexport default Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","useNavigate","UploadForm","axios","jsxDEV","_jsxDEV","Menu","_s","processedImage","setProcessedImage","navigate","location","selectedForm","state","console","log","handleImageUpload","imageData","response","post","blob","Blob","data","type","blobURL","URL","createObjectURL","error","handleFillButtonClick","form","setSelectedForm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onImageUpload","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Ramith/Projects/Application Scanner/scanner-app/src/components/Menu.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Menu.css';\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\r\nimport UploadForm from './UploadForm';\r\nimport axios from 'axios';\r\n\r\nconst Menu = () => {\r\n\r\n    const [processedImage, setProcessedImage] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    const location = useLocation();\r\n    let selectedForm =null;\r\n    if(location !== null){\r\n    selectedForm = location.state.selectedForm;\r\n    console.log(selectedForm);\r\n    }\r\n    // const path = require('path');\r\n    // const fs = require('fs');\r\n    // const passportImagePath = path.join(__dirname, 'res_image.jpeg');\r\n    \r\n    const handleImageUpload = async (imageData) => {\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/processImage', {\r\n                imageData,\r\n            });\r\n            // console.log(response);\r\n            // setProcessedImage(response.data);\r\n            // const processedImageUrl = URL.createObjectURL(response.data);\r\n            // const fetchresponse = await fetch(response.data); // Replace with the actual path\r\n            console.log(response);\r\n            // const imageBlob = await response.data.blob();\r\n            // setProcessedImage(URL.createObjectURL(imageBlob));\r\n            const blob = new Blob([response.data], { type: 'image/jpeg' });\r\n            // saveAs(blob, \"my-image.jpeg\");\r\n\r\n            const blobURL = URL.createObjectURL(blob);\r\n            console.log(blobURL); // Check the console to see if it's a valid Blob\r\n            setProcessedImage(blobURL);\r\n            // Save the buffer as a temporary image\r\n            // console.log(response);\r\n            // fs.writeFile(passportImagePath, response, (err) => {\r\n            //   if (err) {\r\n            //     console.error(err);\r\n            //   }});\r\n            // const buffer = Buffer.from(response.data, 'binary'); // Convert image data to Buffer\r\n            // const blob = new Blob([response.data], { type: 'image/jpeg' }); // Create Blob from Buffer\r\n            // setProcessedImage(URL.createObjectURL(blob)); // Convert Blob to URL\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const handleFillButtonClick = (form) => {\r\n        setSelectedForm(form);\r\n        navigate('/menu', { state: { selectedForm: form } }); // Use navigate() for navigation\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        console.log('Processed image changed:', processedImage);\r\n    }, [processedImage]);\r\n\r\n    return (\r\n        <div className=\"menu-container\">\r\n            <div className=\"menu-content\">\r\n                <h1 className=\"menu-title\">Image Processing</h1>\r\n                <UploadForm onImageUpload={handleImageUpload} />\r\n                {processedImage && (\r\n                    <div className=\"processed-image-container\">\r\n                        <h2>Processed Image</h2>\r\n                        <img className=\"processed-image\" src={processedImage} alt=\"Processed\" />\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <p className=\"no-application\">Don't have the filled application form?</p>\r\n            {/* <Link to={{ pathname: '/chatBot', state: { selectedForm } }} className=\"chatbot-link\"> */}\r\n                <button className=\"chatbot-button\">Try ChatBot</button>\r\n            {/* </Link> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}